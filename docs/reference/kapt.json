[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Annotation Processing with Kotlin"}, {"type": "p", "text": "Annotation processors (see JSR 269) are supported in Kotlin with the kapt compiler plugin."}, {"type": "a", "text": "JSR 269"}, {"type": "em", "text": "kapt"}, {"type": "p", "text": "In a nutshell, you can use libraries such as Dagger or Data Binding in your Kotlin projects."}, {"type": "a", "text": "Dagger"}, {"type": "a", "text": "Data Binding"}, {"type": "p", "text": "Please read below about how to apply the kapt plugin to your Gradle/Maven build."}, {"type": "em", "text": "kapt"}, {"type": "h2", "text": "Using in Gradle"}, {"type": "p", "text": "Apply the kotlin-kapt Gradle plugin:"}, {"type": "code", "text": "kotlin-kapt"}, {"type": "div", "text": "\n\nplugins {\n    id \"org.jetbrains.kotlin.kapt\" version \"1.3.72\"\n}\n\n\n"}, {"type": "div", "text": "\nplugins {\n    id \"org.jetbrains.kotlin.kapt\" version \"1.3.72\"\n}\n\n"}, {"type": "pre", "text": "plugins {\n    id \"org.jetbrains.kotlin.kapt\" version \"1.3.72\"\n}\n"}, {"type": "code", "text": "plugins {\n    id \"org.jetbrains.kotlin.kapt\" version \"1.3.72\"\n}\n"}, {"type": "div", "text": "\n\nplugins {\n    kotlin(\"kapt\") version \"1.3.72\"\n}\n\n\n"}, {"type": "div", "text": "\nplugins {\n    kotlin(\"kapt\") version \"1.3.72\"\n}\n\n"}, {"type": "pre", "text": "plugins {\n    kotlin(\"kapt\") version \"1.3.72\"\n}\n"}, {"type": "code", "text": "plugins {\n    kotlin(\"kapt\") version \"1.3.72\"\n}\n"}, {"type": "p", "text": "Alternatively, you can use the apply plugin syntax:"}, {"type": "code", "text": "apply plugin"}, {"type": "div", "text": "\napply plugin: 'kotlin-kapt'\n\n"}, {"type": "pre", "text": "apply plugin: 'kotlin-kapt'\n"}, {"type": "code", "text": "apply plugin: 'kotlin-kapt'\n"}, {"type": "p", "text": "Then add the respective dependencies using the kapt configuration in your dependencies block:"}, {"type": "code", "text": "kapt"}, {"type": "code", "text": "dependencies"}, {"type": "div", "text": "\n\ndependencies {\n    kapt 'groupId:artifactId:version'\n}\n\n\n"}, {"type": "div", "text": "\ndependencies {\n    kapt 'groupId:artifactId:version'\n}\n\n"}, {"type": "pre", "text": "dependencies {\n    kapt 'groupId:artifactId:version'\n}\n"}, {"type": "code", "text": "dependencies {\n    kapt 'groupId:artifactId:version'\n}\n"}, {"type": "div", "text": "\n\ndependencies {\n    kapt(\"groupId:artifactId:version\")\n}\n\n\n"}, {"type": "div", "text": "\ndependencies {\n    kapt(\"groupId:artifactId:version\")\n}\n\n"}, {"type": "pre", "text": "dependencies {\n    kapt(\"groupId:artifactId:version\")\n}\n"}, {"type": "code", "text": "dependencies {\n    kapt(\"groupId:artifactId:version\")\n}\n"}, {"type": "p", "text": "If you previously used the Android support for annotation processors, replace usages of the annotationProcessor configuration with kapt. If your project contains Java classes, kapt will also take care of them."}, {"type": "a", "text": "Android support"}, {"type": "code", "text": "annotationProcessor"}, {"type": "code", "text": "kapt"}, {"type": "code", "text": "kapt"}, {"type": "p", "text": "If you use annotation processors for your androidTest or test sources, the respective kapt configurations are named kaptAndroidTest and kaptTest. Note that kaptAndroidTest and kaptTest extends kapt, so you can just provide the kapt dependency and it will be available both for production sources and tests."}, {"type": "code", "text": "androidTest"}, {"type": "code", "text": "test"}, {"type": "code", "text": "kapt"}, {"type": "code", "text": "kaptAndroidTest"}, {"type": "code", "text": "kaptTest"}, {"type": "code", "text": "kaptAndroidTest"}, {"type": "code", "text": "kaptTest"}, {"type": "code", "text": "kapt"}, {"type": "code", "text": "kapt"}, {"type": "h2", "text": "Annotation processor arguments"}, {"type": "p", "text": "Use arguments {} block to pass arguments to annotation processors:"}, {"type": "code", "text": "arguments {}"}, {"type": "div", "text": "\nkapt {\n    arguments {\n        arg(\"key\", \"value\")\n    }\n}\n\n"}, {"type": "pre", "text": "kapt {\n    arguments {\n        arg(\"key\", \"value\")\n    }\n}\n"}, {"type": "code", "text": "kapt {\n    arguments {\n        arg(\"key\", \"value\")\n    }\n}\n"}, {"type": "h2", "text": "Gradle build cache support (since 1.2.20)"}, {"type": "p", "text": "The kapt annotation processing tasks are cached in Gradle by default. However,  annotation processors run arbitrary code that may not necessarily transform the task inputs into the outputs, might access and modify the files that are not tracked by Gradle etc. If the annotation processors used in the build cannot be properly cached, it is possible to disable caching for kapt entirely by adding the following lines to the build script, in order to avoid false-positive cache hits for the kapt tasks:"}, {"type": "a", "text": "cached in Gradle"}, {"type": "div", "text": "\nkapt {\n    useBuildCache = false\n}\n\n"}, {"type": "pre", "text": "kapt {\n    useBuildCache = false\n}\n"}, {"type": "code", "text": "kapt {\n    useBuildCache = false\n}\n"}, {"type": "h2", "text": "Running kapt tasks in parallel (since 1.2.60)"}, {"type": "p", "text": "To improve the speed of builds that use kapt, you can enable the Gradle worker API for kapt tasks.\nUsing the worker API lets Gradle run independent annotation processing tasks from a single project in parallel, which in some cases significantly decreases the execution time. \nHowever, running kapt with Gradle worker API enabled can result in increased memory consumption due to parallel execution."}, {"type": "a", "text": "Gradle worker API"}, {"type": "p", "text": "To use the Gradle worker API for parallel execution of kapt tasks, add this line to your gradle.properties file:"}, {"type": "code", "text": "gradle.properties"}, {"type": "div", "text": "\nkapt.use.worker.api=true\n\n"}, {"type": "pre", "text": "kapt.use.worker.api=true\n"}, {"type": "code", "text": "kapt.use.worker.api=true\n"}, {"type": "h2", "text": "Compile avoidance for kapt (since 1.3.20)"}, {"type": "p", "text": "To improve the times of incremental builds with kapt, it can use the Gradle compile avoidance.\nWith compile avoidance enabled, Gradle can skip annotation processing when rebuilding a project. Particularly, annotation processing is skipped when:"}, {"type": "a", "text": "compile avoidance"}, {"type": "ul", "text": "\nThe project's source files are unchanged.\nThe changes in dependencies are ABI compatible. For example, the only changes are in method bodies.\n"}, {"type": "li", "text": "The project's source files are unchanged."}, {"type": "li", "text": "The changes in dependencies are ABI compatible. For example, the only changes are in method bodies."}, {"type": "a", "text": "ABI"}, {"type": "p", "text": "However, compile avoidance can't be used for annotation processors discovered in the compile classpath since any changes in them require running the annotation processing tasks."}, {"type": "em", "text": "any changes"}, {"type": "p", "text": "To run kapt with compile avoidance:"}, {"type": "ul", "text": "\nAdd the annotation processor dependencies to the kapt* configurations manually as described above.\nTurn off the discovery of annotation processors in the compile classpath by adding this line to your gradle.properties file:\n"}, {"type": "li", "text": "Add the annotation processor dependencies to the kapt* configurations manually as described above."}, {"type": "code", "text": "kapt*"}, {"type": "a", "text": "above"}, {"type": "li", "text": "Turn off the discovery of annotation processors in the compile classpath by adding this line to your gradle.properties file:"}, {"type": "code", "text": "gradle.properties"}, {"type": "div", "text": "\nkapt.include.compile.classpath=false\n\n"}, {"type": "pre", "text": "kapt.include.compile.classpath=false\n"}, {"type": "code", "text": "kapt.include.compile.classpath=false\n"}, {"type": "h2", "text": "Incremental annotation processing (since 1.3.30)"}, {"type": "p", "text": "Starting from version 1.3.30, kapt supports incremental annotation processing as an experimental feature. \nCurrently, annotation processing can be incremental only if all annotation processors being used are incremental."}, {"type": "p", "text": "Incremental annotation processing is enabled by default starting from version 1.3.50.\nTo disable incremental annotation processing, add this line to your gradle.properties file:"}, {"type": "code", "text": "gradle.properties"}, {"type": "div", "text": "\nkapt.incremental.apt=false\n\n"}, {"type": "pre", "text": "kapt.incremental.apt=false\n"}, {"type": "code", "text": "kapt.incremental.apt=false\n"}, {"type": "p", "text": "Note that incremental annotation processing requires incremental compilation to be enabled as well."}, {"type": "a", "text": "incremental compilation"}, {"type": "h2", "text": "Java compiler options"}, {"type": "p", "text": "Kapt uses Java compiler to run annotation processors.\nHere is how you can pass arbitrary options to javac:"}, {"type": "br", "text": ""}, {"type": "div", "text": "\nkapt {\n    javacOptions {\n        // Increase the max count of errors from annotation processors.\n        // Default is 100.\n        option(\"-Xmaxerrs\", 500)\n    }\n}\n\n"}, {"type": "pre", "text": "kapt {\n    javacOptions {\n        // Increase the max count of errors from annotation processors.\n        // Default is 100.\n        option(\"-Xmaxerrs\", 500)\n    }\n}\n"}, {"type": "code", "text": "kapt {\n    javacOptions {\n        // Increase the max count of errors from annotation processors.\n        // Default is 100.\n        option(\"-Xmaxerrs\", 500)\n    }\n}\n"}, {"type": "h2", "text": "Non-existent type correction"}, {"type": "p", "text": "Some annotation processors (such as AutoFactory) rely on precise types in declaration signatures. By default, Kapt replaces every unknown type (including types for the generated classes) to NonExistentClass, but you can change this behavior. Add the additional flag to the build.gradle file to enable error type inferring in stubs:"}, {"type": "code", "text": "AutoFactory"}, {"type": "code", "text": "NonExistentClass"}, {"type": "code", "text": "build.gradle"}, {"type": "div", "text": "\nkapt {\n    correctErrorTypes = true\n}\n\n"}, {"type": "pre", "text": "kapt {\n    correctErrorTypes = true\n}\n"}, {"type": "code", "text": "kapt {\n    correctErrorTypes = true\n}\n"}, {"type": "h2", "text": "Using in Maven"}, {"type": "p", "text": "Add an execution of the kapt goal from kotlin-maven-plugin before compile:"}, {"type": "code", "text": "kapt"}, {"type": "code", "text": "compile"}, {"type": "div", "text": "\n<execution>\n    <id>kapt</id>\n    <goals>\n        <goal>kapt</goal>\n    </goals>\n    <configuration>\n        <sourceDirs>\n            <sourceDir>src/main/kotlin</sourceDir>\n            <sourceDir>src/main/java</sourceDir>\n        </sourceDirs>\n        <annotationProcessorPaths>\n            <!-- Specify your annotation processors here. -->\n            <annotationProcessorPath>\n                <groupId>com.google.dagger</groupId>\n                <artifactId>dagger-compiler</artifactId>\n                <version>2.9</version>\n            </annotationProcessorPath>\n        </annotationProcessorPaths>\n    </configuration>\n</execution>\n\n"}, {"type": "pre", "text": "<execution>\n    <id>kapt</id>\n    <goals>\n        <goal>kapt</goal>\n    </goals>\n    <configuration>\n        <sourceDirs>\n            <sourceDir>src/main/kotlin</sourceDir>\n            <sourceDir>src/main/java</sourceDir>\n        </sourceDirs>\n        <annotationProcessorPaths>\n            <!-- Specify your annotation processors here. -->\n            <annotationProcessorPath>\n                <groupId>com.google.dagger</groupId>\n                <artifactId>dagger-compiler</artifactId>\n                <version>2.9</version>\n            </annotationProcessorPath>\n        </annotationProcessorPaths>\n    </configuration>\n</execution>\n"}, {"type": "code", "text": "<execution>\n    <id>kapt</id>\n    <goals>\n        <goal>kapt</goal>\n    </goals>\n    <configuration>\n        <sourceDirs>\n            <sourceDir>src/main/kotlin</sourceDir>\n            <sourceDir>src/main/java</sourceDir>\n        </sourceDirs>\n        <annotationProcessorPaths>\n            <!-- Specify your annotation processors here. -->\n            <annotationProcessorPath>\n                <groupId>com.google.dagger</groupId>\n                <artifactId>dagger-compiler</artifactId>\n                <version>2.9</version>\n            </annotationProcessorPath>\n        </annotationProcessorPaths>\n    </configuration>\n</execution>\n"}, {"type": "p", "text": "You can find a complete sample project showing the use of Kotlin, Maven and Dagger in the\nKotlin examples repository."}, {"type": "a", "text": "Kotlin examples repository"}, {"type": "p", "text": "Please note that kapt is still not supported for IntelliJ IDEA\u2019s own build system. Launch the build from the \u201cMaven Projects\u201d toolbar whenever you want to re-run the annotation processing."}, {"type": "h2", "text": "Using in CLI"}, {"type": "p", "text": "Kapt compiler plugin is available in the binary distribution of the Kotlin compiler."}, {"type": "p", "text": "You can attach the plugin by providing the path to its JAR file using the Xplugin kotlinc option:"}, {"type": "code", "text": "Xplugin"}, {"type": "div", "text": "\n-Xplugin=$KOTLIN_HOME/lib/kotlin-annotation-processing.jar\n\n"}, {"type": "pre", "text": "-Xplugin=$KOTLIN_HOME/lib/kotlin-annotation-processing.jar\n"}, {"type": "code", "text": "-Xplugin=$KOTLIN_HOME/lib/kotlin-annotation-processing.jar\n"}, {"type": "p", "text": "Here is a list of the available options:"}, {"type": "ul", "text": "\nsources (required): An output path for the generated files.\nclasses (required): An output path for the generated class files and resources.\nstubs (required): An output path for the stub files. In other words, some temporary directory.\nincrementalData: An output path for the binary stubs.\napclasspath (repeatable): A path to the annotation processor JAR. Pass as many apclasspath options as many JARs you have.\napoptions: A base64-encoded list of the annotation processor options. See AP/javac options encoding for more information.\njavacArguments: A base64-encoded list of the options passed to javac. See AP/javac options encoding for more information.\nprocessors: A comma-specified list of annotation processor qualified class names. If specified, kapt does not try to find annotation processors in apclasspath.\nverbose: Enable verbose output.\naptMode (required)\n    \nstubs \u2013 only generate stubs needed for annotation processing;\napt \u2013 only run annotation processing;\nstubsAndApt \u2013 generate stubs and run annotation processing.\n\n\ncorrectErrorTypes: See below. Disabled by default.\n"}, {"type": "li", "text": "sources (required): An output path for the generated files."}, {"type": "code", "text": "sources"}, {"type": "em", "text": "required"}, {"type": "li", "text": "classes (required): An output path for the generated class files and resources."}, {"type": "code", "text": "classes"}, {"type": "em", "text": "required"}, {"type": "li", "text": "stubs (required): An output path for the stub files. In other words, some temporary directory."}, {"type": "code", "text": "stubs"}, {"type": "em", "text": "required"}, {"type": "li", "text": "incrementalData: An output path for the binary stubs."}, {"type": "code", "text": "incrementalData"}, {"type": "li", "text": "apclasspath (repeatable): A path to the annotation processor JAR. Pass as many apclasspath options as many JARs you have."}, {"type": "code", "text": "apclasspath"}, {"type": "em", "text": "repeatable"}, {"type": "code", "text": "apclasspath"}, {"type": "li", "text": "apoptions: A base64-encoded list of the annotation processor options. See AP/javac options encoding for more information."}, {"type": "code", "text": "apoptions"}, {"type": "a", "text": "AP/javac options encoding"}, {"type": "li", "text": "javacArguments: A base64-encoded list of the options passed to javac. See AP/javac options encoding for more information."}, {"type": "code", "text": "javacArguments"}, {"type": "a", "text": "AP/javac options encoding"}, {"type": "li", "text": "processors: A comma-specified list of annotation processor qualified class names. If specified, kapt does not try to find annotation processors in apclasspath."}, {"type": "code", "text": "processors"}, {"type": "code", "text": "apclasspath"}, {"type": "li", "text": "verbose: Enable verbose output."}, {"type": "code", "text": "verbose"}, {"type": "li", "text": "aptMode (required)\n    \nstubs \u2013 only generate stubs needed for annotation processing;\napt \u2013 only run annotation processing;\nstubsAndApt \u2013 generate stubs and run annotation processing.\n\n"}, {"type": "code", "text": "aptMode"}, {"type": "em", "text": "required"}, {"type": "ul", "text": "\nstubs \u2013 only generate stubs needed for annotation processing;\napt \u2013 only run annotation processing;\nstubsAndApt \u2013 generate stubs and run annotation processing.\n"}, {"type": "li", "text": "stubs \u2013 only generate stubs needed for annotation processing;"}, {"type": "code", "text": "stubs"}, {"type": "li", "text": "apt \u2013 only run annotation processing;"}, {"type": "code", "text": "apt"}, {"type": "li", "text": "stubsAndApt \u2013 generate stubs and run annotation processing."}, {"type": "code", "text": "stubsAndApt"}, {"type": "li", "text": "correctErrorTypes: See below. Disabled by default."}, {"type": "code", "text": "correctErrorTypes"}, {"type": "a", "text": "below"}, {"type": "p", "text": "The plugin option format is: -P plugin:<plugin id>:<key>=<value>. Options can be repeated."}, {"type": "code", "text": "-P plugin:<plugin id>:<key>=<value>"}, {"type": "p", "text": "An example:"}, {"type": "div", "text": "\n-P plugin:org.jetbrains.kotlin.kapt3:sources=build/kapt/sources\n-P plugin:org.jetbrains.kotlin.kapt3:classes=build/kapt/classes\n-P plugin:org.jetbrains.kotlin.kapt3:stubs=build/kapt/stubs\n\n-P plugin:org.jetbrains.kotlin.kapt3:apclasspath=lib/ap.jar\n-P plugin:org.jetbrains.kotlin.kapt3:apclasspath=lib/anotherAp.jar\n\n-P plugin:org.jetbrains.kotlin.kapt3:correctErrorTypes=true\n\n"}, {"type": "pre", "text": "-P plugin:org.jetbrains.kotlin.kapt3:sources=build/kapt/sources\n-P plugin:org.jetbrains.kotlin.kapt3:classes=build/kapt/classes\n-P plugin:org.jetbrains.kotlin.kapt3:stubs=build/kapt/stubs\n\n-P plugin:org.jetbrains.kotlin.kapt3:apclasspath=lib/ap.jar\n-P plugin:org.jetbrains.kotlin.kapt3:apclasspath=lib/anotherAp.jar\n\n-P plugin:org.jetbrains.kotlin.kapt3:correctErrorTypes=true\n"}, {"type": "code", "text": "-P plugin:org.jetbrains.kotlin.kapt3:sources=build/kapt/sources\n-P plugin:org.jetbrains.kotlin.kapt3:classes=build/kapt/classes\n-P plugin:org.jetbrains.kotlin.kapt3:stubs=build/kapt/stubs\n\n-P plugin:org.jetbrains.kotlin.kapt3:apclasspath=lib/ap.jar\n-P plugin:org.jetbrains.kotlin.kapt3:apclasspath=lib/anotherAp.jar\n\n-P plugin:org.jetbrains.kotlin.kapt3:correctErrorTypes=true\n"}, {"type": "h2", "text": "Generating Kotlin sources"}, {"type": "p", "text": "Kapt can generate Kotlin sources. Just write the generated Kotlin source files to the directory specified by processingEnv.options[\"kapt.kotlin.generated\"], and these files will be compiled together with the main sources."}, {"type": "code", "text": "processingEnv.options[\"kapt.kotlin.generated\"]"}, {"type": "p", "text": "You can find the complete sample in the kotlin-examples Github repository."}, {"type": "a", "text": "kotlin-examples"}, {"type": "p", "text": "Note that Kapt does not support multiple rounds for the generated Kotlin files."}, {"type": "h2", "text": "AP/Javac options encoding"}, {"type": "p", "text": "apoptions and javacArguments CLI options accept an encoded map of options.\nHere is how you can encode options by yourself:"}, {"type": "code", "text": "apoptions"}, {"type": "code", "text": "javacArguments"}, {"type": "br", "text": ""}, {"type": "div", "text": "\nfun encodeList(options: Map<String, String>): String {\n    val os = ByteArrayOutputStream()\n    val oos = ObjectOutputStream(os)\n\n    oos.writeInt(options.size)\n    for ((key, value) in options.entries) {\n        oos.writeUTF(key)\n        oos.writeUTF(value)\n    }\n\n    oos.flush()\n    return Base64.getEncoder().encodeToString(os.toByteArray())\n}\n\n"}, {"type": "pre", "text": "fun encodeList(options: Map<String, String>): String {\n    val os = ByteArrayOutputStream()\n    val oos = ObjectOutputStream(os)\n\n    oos.writeInt(options.size)\n    for ((key, value) in options.entries) {\n        oos.writeUTF(key)\n        oos.writeUTF(value)\n    }\n\n    oos.flush()\n    return Base64.getEncoder().encodeToString(os.toByteArray())\n}\n"}, {"type": "code", "text": "fun encodeList(options: Map<String, String>): String {\n    val os = ByteArrayOutputStream()\n    val oos = ObjectOutputStream(os)\n\n    oos.writeInt(options.size)\n    for ((key, value) in options.entries) {\n        oos.writeUTF(key)\n        oos.writeUTF(value)\n    }\n\n    oos.flush()\n    return Base64.getEncoder().encodeToString(os.toByteArray())\n}\n"}]