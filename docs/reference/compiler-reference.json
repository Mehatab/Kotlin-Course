[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Kotlin Compiler Options"}, {"type": "p", "text": "Each release of Kotlin includes compilers for the supported targets: \nJVM, JavaScript, and native binaries for supported platforms."}, {"type": "a", "text": "supported platforms"}, {"type": "p", "text": "These compilers are used by the IDE when you click the Compile or Run button for your Kotlin project."}, {"type": "strong", "text": "Compile"}, {"type": "strong", "text": "Run"}, {"type": "p", "text": "You can also run Kotlin compilers manually from the command line as described \nin the Working with command-line compiler tutorial. For example:"}, {"type": "a", "text": "Working with command-line compiler"}, {"type": "div", "text": "\n$ kotlinc hello.kt -include-runtime -d hello.jar\n\n"}, {"type": "pre", "text": "$ kotlinc hello.kt -include-runtime -d hello.jar\n"}, {"type": "code", "text": "$ kotlinc hello.kt -include-runtime -d hello.jar\n"}, {"type": "h2", "text": "Compiler options"}, {"type": "p", "text": "Kotlin compilers have a number of options for tailoring the compiling process.\nCompiler options for different targets are listed on this page together with a description of each one."}, {"type": "p", "text": "There are several ways to set the compiler options and their values (compiler arguments):"}, {"type": "em", "text": "compiler arguments"}, {"type": "ul", "text": "\nIn IntelliJ IDEA, write in the compiler arguments in the Additional command-line parameters text box in \nSettings | Build, Execution, Deployment | Compilers | Kotlin Compiler\nIf you're using Gradle, specify the compiler arguments in the kotlinOptions property of the Kotlin compilation task.\nFor details, see Using Gradle.\nIf you're using Maven, specify the compiler arguments in the <configuration> element of the Maven plugin node. \nFor details, see Using Maven.\nIf you run a command-line compiler, add the compiler arguments directly to the utility call or write them into an argfile.\n"}, {"type": "li", "text": "In IntelliJ IDEA, write in the compiler arguments in the Additional command-line parameters text box in \nSettings | Build, Execution, Deployment | Compilers | Kotlin Compiler"}, {"type": "strong", "text": "Additional command-line parameters"}, {"type": "strong", "text": "Settings | Build, Execution, Deployment | Compilers | Kotlin Compiler"}, {"type": "li", "text": "If you're using Gradle, specify the compiler arguments in the kotlinOptions property of the Kotlin compilation task.\nFor details, see Using Gradle."}, {"type": "code", "text": "kotlinOptions"}, {"type": "a", "text": "Using Gradle"}, {"type": "li", "text": "If you're using Maven, specify the compiler arguments in the <configuration> element of the Maven plugin node. \nFor details, see Using Maven."}, {"type": "code", "text": "<configuration>"}, {"type": "a", "text": "Using Maven"}, {"type": "li", "text": "If you run a command-line compiler, add the compiler arguments directly to the utility call or write them into an argfile."}, {"type": "a", "text": "argfile"}, {"type": "h2", "text": "Common options"}, {"type": "p", "text": "The following options are common for all Kotlin compilers."}, {"type": "h3", "text": "-version"}, {"type": "code", "text": "-version"}, {"type": "p", "text": "Display the compiler version."}, {"type": "h3", "text": "-nowarn"}, {"type": "code", "text": "-nowarn"}, {"type": "p", "text": "Suppress the compiler from displaying warnings during compilation."}, {"type": "h3", "text": "-Werror"}, {"type": "code", "text": "-Werror"}, {"type": "p", "text": "Turn any warnings into a compilation error."}, {"type": "h3", "text": "-verbose"}, {"type": "code", "text": "-verbose"}, {"type": "p", "text": "Enable verbose logging output which includes details of the compilation process."}, {"type": "h3", "text": "-script"}, {"type": "code", "text": "-script"}, {"type": "p", "text": "Evaluate a Kotlin script file. When called with this option, the compiler executes the first Kotlin script (*.kts) \nfile among the given arguments."}, {"type": "code", "text": "*.kts"}, {"type": "h3", "text": "-help (-h)"}, {"type": "code", "text": "-help"}, {"type": "code", "text": "-h"}, {"type": "p", "text": "Display usage information and exit. Only standard options are shown.\nTo show advanced options, use -X."}, {"type": "code", "text": "-X"}, {"type": "h3", "text": "-X"}, {"type": "code", "text": "-X"}, {"type": "p", "text": "Display information about the advanced options and exit. These options are currently unstable: \ntheir names and behavior may be changed without notice."}, {"type": "h3", "text": "-kotlin-home <path>"}, {"type": "code", "text": "-kotlin-home <path>"}, {"type": "p", "text": "Specify a custom path to the Kotlin compiler used for the discovery of runtime libraries."}, {"type": "h3", "text": "-P plugin:<pluginId>:<optionName>=<value>"}, {"type": "code", "text": "-P plugin:<pluginId>:<optionName>=<value>"}, {"type": "p", "text": "Pass an option to a Kotlin compiler plugin.\nAvailable plugins and their options are listed in Compiler plugins."}, {"type": "a", "text": "Compiler plugins"}, {"type": "h3", "text": "-language-version <version>"}, {"type": "code", "text": "-language-version <version>"}, {"type": "p", "text": "Provide source compatibility with the specified version of Kotlin."}, {"type": "h3", "text": "-api-version <version>"}, {"type": "code", "text": "-api-version <version>"}, {"type": "p", "text": "Allow using declarations only from the specified version of Kotlin bundled libraries."}, {"type": "h3", "text": "-progressive"}, {"type": "code", "text": "-progressive"}, {"type": "p", "text": "Enable the progressive mode for the compiler."}, {"type": "a", "text": "progressive mode"}, {"type": "p", "text": "In the progressive mode, deprecations and bug fixes for unstable code take effect immediately,\ninstead of going through a graceful migration cycle.\nCode written in the progressive mode is backwards compatible; however, code written in\na non-progressive mode may cause compilation errors in the progressive mode."}, {"type": "h3", "text": "@<argfile>"}, {"type": "code", "text": "@<argfile>"}, {"type": "p", "text": "Read the compiler options from the given file. Such a file can contain compiler options with values \nand paths to the source files. Options and paths should be separated by whitespaces. For example:"}, {"type": "div", "text": "\n-include-runtime -d hello.jar\nhello.kt\n\n"}, {"type": "pre", "text": "-include-runtime -d hello.jar\nhello.kt\n"}, {"type": "code", "text": "-include-runtime -d hello.jar\nhello.kt\n"}, {"type": "p", "text": "To pass values that contain whitespaces, surround them with single (') or double (\") quotes. If a value contains \nquotation marks in it, escape them with a backslash (\\)."}, {"type": "strong", "text": "'"}, {"type": "strong", "text": "\""}, {"type": "strong", "text": "\\"}, {"type": "div", "text": "\n-include-runtime -d 'My folder'\n\n"}, {"type": "pre", "text": "-include-runtime -d 'My folder'\n"}, {"type": "code", "text": "-include-runtime -d 'My folder'\n"}, {"type": "p", "text": "You can also pass multiple argument files, for example, to separate compiler options from source files."}, {"type": "div", "text": "\n$ kotlinc @compiler.options @classes\n\n"}, {"type": "pre", "text": "$ kotlinc @compiler.options @classes\n"}, {"type": "code", "text": "$ kotlinc @compiler.options @classes\n"}, {"type": "p", "text": "If the files reside in locations different from the current directory, use relative paths."}, {"type": "div", "text": "\n$ kotlinc @options/compiler.options hello.kt\n\n"}, {"type": "pre", "text": "$ kotlinc @options/compiler.options hello.kt\n"}, {"type": "code", "text": "$ kotlinc @options/compiler.options hello.kt\n"}, {"type": "h2", "text": "Kotlin/JVM compiler options"}, {"type": "p", "text": "The Kotlin compiler for JVM compiles Kotlin source files into Java class files. \nThe command-line tools for Kotlin to JVM compilation are kotlinc and kotlinc-jvm.\nYou can also use them for executing Kotlin script files."}, {"type": "code", "text": "kotlinc"}, {"type": "code", "text": "kotlinc-jvm"}, {"type": "p", "text": "In addition to the common options, Kotlin/JVM compiler has the options listed below."}, {"type": "a", "text": "common options"}, {"type": "h3", "text": "-classpath <path> (-cp <path>)"}, {"type": "code", "text": "-classpath <path>"}, {"type": "code", "text": "-cp <path>"}, {"type": "p", "text": "Search for class files in the specified paths. Separate elements of the classpath with system path separators (; on Windows, : on macOS/Linux).\nThe classpath can contain file and directory paths, ZIP, or JAR files."}, {"type": "strong", "text": ";"}, {"type": "strong", "text": ":"}, {"type": "h3", "text": "-d <path>"}, {"type": "code", "text": "-d <path>"}, {"type": "p", "text": "Place the generated class files into the specified location. The location can be a directory, a ZIP, or a JAR file."}, {"type": "h3", "text": "-include-runtime"}, {"type": "code", "text": "-include-runtime"}, {"type": "p", "text": "Include the Kotlin runtime into the resulting JAR file. Makes the resulting archive runnable on any Java-enabled \nenvironment."}, {"type": "h3", "text": "-jdk-home <path>"}, {"type": "code", "text": "-jdk-home <path>"}, {"type": "p", "text": "Use a custom JDK home directory to include into the classpath if it differs from the default JAVA_HOME."}, {"type": "code", "text": "JAVA_HOME"}, {"type": "h3", "text": "-jvm-target <version>"}, {"type": "code", "text": "-jvm-target <version>"}, {"type": "p", "text": "Specify the target version of the generated JVM bytecode. Possible values are 1.6, 1.8, 9, 10, 11, 12, and 13.\nThe default value is 1.6."}, {"type": "code", "text": "1.6"}, {"type": "code", "text": "1.8"}, {"type": "code", "text": "9"}, {"type": "code", "text": "10"}, {"type": "code", "text": "11"}, {"type": "code", "text": "12"}, {"type": "code", "text": "13"}, {"type": "code", "text": "1.6"}, {"type": "h3", "text": "-java-parameters"}, {"type": "code", "text": "-java-parameters"}, {"type": "p", "text": "Generate metadata for Java 1.8 reflection on method parameters."}, {"type": "h3", "text": "-module-name <name>"}, {"type": "code", "text": "-module-name <name>"}, {"type": "p", "text": "Set a custom name for the generated .kotlin_module file."}, {"type": "code", "text": ".kotlin_module"}, {"type": "h3", "text": "-no-jdk"}, {"type": "code", "text": "-no-jdk"}, {"type": "p", "text": "Don't automatically include the Java runtime into the classpath."}, {"type": "h3", "text": "-no-reflect"}, {"type": "code", "text": "-no-reflect"}, {"type": "p", "text": "Don't automatically include the Kotlin reflection (kotlin-reflect.jar) into the classpath."}, {"type": "code", "text": "kotlin-reflect.jar"}, {"type": "h3", "text": "-no-stdlib"}, {"type": "code", "text": "-no-stdlib"}, {"type": "p", "text": "Don't automatically include the Kotlin/JVM stdlib (kotlin-stdlib.jar) and Kotlin reflection (kotlin-reflect.jar)\ninto the classpath."}, {"type": "code", "text": "kotlin-stdlib.jar"}, {"type": "code", "text": "kotlin-reflect.jar"}, {"type": "h3", "text": "-script-templates <classnames[,]>"}, {"type": "code", "text": "-script-templates <classnames[,]>"}, {"type": "p", "text": "Script definition template classes. Use fully qualified class names and separate them with commas (,)."}, {"type": "strong", "text": ","}, {"type": "h2", "text": "Kotlin/JS compiler options"}, {"type": "p", "text": "The Kotlin compiler for JS compiles Kotlin source files into JavaScript code. \nThe command-line tool for Kotlin to JS compilation is kotlinc-js."}, {"type": "code", "text": "kotlinc-js"}, {"type": "p", "text": "In addition to the common options, Kotlin/JS compiler has the options listed below."}, {"type": "a", "text": "common options"}, {"type": "h3", "text": "-libraries <path>"}, {"type": "code", "text": "-libraries <path>"}, {"type": "p", "text": "Paths to Kotlin libraries with .meta.js and .kjsm files, separated by the system path separator."}, {"type": "code", "text": ".meta.js"}, {"type": "code", "text": ".kjsm"}, {"type": "h3", "text": "-main {call|noCall}"}, {"type": "code", "text": "-main {call|noCall}"}, {"type": "p", "text": "Define whether the main function should be called upon execution."}, {"type": "code", "text": "main"}, {"type": "h3", "text": "-meta-info"}, {"type": "code", "text": "-meta-info"}, {"type": "p", "text": "Generate .meta.js and .kjsm files with metadata. Use this option when creating a JS library."}, {"type": "code", "text": ".meta.js"}, {"type": "code", "text": ".kjsm"}, {"type": "h3", "text": "-module-kind {plain|amd|commonjs|umd}"}, {"type": "code", "text": "-module-kind {plain|amd|commonjs|umd}"}, {"type": "p", "text": "The kind of JS module generated by the compiler:"}, {"type": "ul", "text": "\nplain - a plain JS module;\ncommonjs - a CommonJS module;\namd - an Asynchronous Module Definition module;\numd - a Universal Module Definition module.\n"}, {"type": "li", "text": "plain - a plain JS module;"}, {"type": "code", "text": "plain"}, {"type": "li", "text": "commonjs - a CommonJS module;"}, {"type": "code", "text": "commonjs"}, {"type": "a", "text": "CommonJS"}, {"type": "li", "text": "amd - an Asynchronous Module Definition module;"}, {"type": "code", "text": "amd"}, {"type": "a", "text": "Asynchronous Module Definition"}, {"type": "li", "text": "umd - a Universal Module Definition module."}, {"type": "code", "text": "umd"}, {"type": "a", "text": "Universal Module Definition"}, {"type": "p", "text": "To learn more about the different kinds of JS module and the distinctions between them,\nsee this article."}, {"type": "a", "text": "this"}, {"type": "h3", "text": "-no-stdlib"}, {"type": "code", "text": "-no-stdlib"}, {"type": "p", "text": "Don't automatically include the default Kotlin/JS stdlib into the compilation dependencies."}, {"type": "h3", "text": "-output <filepath>"}, {"type": "code", "text": "-output <filepath>"}, {"type": "p", "text": "Set the destination file for the compilation result. The value must be a path to a .js file including its name."}, {"type": "code", "text": ".js"}, {"type": "h3", "text": "-output-postfix <filepath>"}, {"type": "code", "text": "-output-postfix <filepath>"}, {"type": "p", "text": "Add the content of the specified file to the end of the output file."}, {"type": "h3", "text": "-output-prefix <filepath>"}, {"type": "code", "text": "-output-prefix <filepath>"}, {"type": "p", "text": "Add the content of the specified file to the beginning of the output file."}, {"type": "h3", "text": "-source-map"}, {"type": "code", "text": "-source-map"}, {"type": "p", "text": "Generate the source map."}, {"type": "h3", "text": "-source-map-base-dirs <path>"}, {"type": "code", "text": "-source-map-base-dirs <path>"}, {"type": "p", "text": "Use the specified paths as base directories. Base directories are used for calculating relative paths in the source map."}, {"type": "h3", "text": "-source-map-embed-sources {always|never|inlining}"}, {"type": "code", "text": "-source-map-embed-sources {always|never|inlining}"}, {"type": "p", "text": "Embed source files into the source map."}, {"type": "h3", "text": "-source-map-prefix"}, {"type": "code", "text": "-source-map-prefix"}, {"type": "p", "text": "Add the specified prefix to paths in the source map."}, {"type": "h2", "text": "Kotlin/Native compiler options"}, {"type": "p", "text": "Kotlin/Native compiler compiles Kotlin source files into native binaries for the supported platforms. \nThe command-line tool for Kotlin/Native compilation is kotlinc-native."}, {"type": "a", "text": "supported platforms"}, {"type": "code", "text": "kotlinc-native"}, {"type": "p", "text": "In addition to the common options, Kotlin/Native compiler has the options listed below."}, {"type": "a", "text": "common options"}, {"type": "h3", "text": "-enable-assertions (-ea)"}, {"type": "code", "text": "-enable-assertions"}, {"type": "code", "text": "-ea"}, {"type": "p", "text": "Enable runtime assertions in the generated code."}, {"type": "h3", "text": "-g"}, {"type": "code", "text": "-g"}, {"type": "p", "text": "Enable emitting debug information."}, {"type": "h3", "text": "-generate-test-runner (-tr)"}, {"type": "code", "text": "-generate-test-runner"}, {"type": "code", "text": "-tr"}, {"type": "p", "text": "Produce an application for running unit tests from the project."}, {"type": "h3", "text": "-generate-worker-test-runner (-trw)"}, {"type": "code", "text": "-generate-worker-test-runner"}, {"type": "code", "text": "-trw"}, {"type": "p", "text": "Produce an application for running unit tests in a worker thread."}, {"type": "a", "text": "worker thread"}, {"type": "h3", "text": "-generate-no-exit-test-runner (-trn)"}, {"type": "code", "text": "-generate-no-exit-test-runner"}, {"type": "code", "text": "-trn"}, {"type": "p", "text": "Produce an application for running unit tests without an explicit process exit."}, {"type": "h3", "text": "-include-binary <path> (-ib <path>)"}, {"type": "code", "text": "-include-binary <path>"}, {"type": "code", "text": "-ib <path>"}, {"type": "p", "text": "Pack external binary within the generated klib file."}, {"type": "h3", "text": "-library <path> (-l <path>)"}, {"type": "code", "text": "-library <path>"}, {"type": "code", "text": "-l <path>"}, {"type": "p", "text": "Link with the library. To learn about using libraries in Kotlin/native projects, see \nKotlin/Native libraries."}, {"type": "a", "text": "Kotlin/Native libraries"}, {"type": "h3", "text": "-library-version <version> (-lv)"}, {"type": "code", "text": "-library-version <version>"}, {"type": "code", "text": "-lv"}, {"type": "p", "text": "Set the library version."}, {"type": "h3", "text": "-list-targets"}, {"type": "code", "text": "-list-targets"}, {"type": "p", "text": "List the available hardware targets."}, {"type": "h3", "text": "-manifest <path>"}, {"type": "code", "text": "-manifest <path>"}, {"type": "p", "text": "Provide a manifest addend file."}, {"type": "h3", "text": "-module-name <name>"}, {"type": "code", "text": "-module-name <name>"}, {"type": "p", "text": "Specify a name for the compilation module.\nThis option can also be used to specify a name prefix for the declarations exported to Objective-C:\nHow do I specify a custom Objective-C prefix/name for my Kotlin framework?"}, {"type": "a", "text": "How do I specify a custom Objective-C prefix/name for my Kotlin framework?"}, {"type": "h3", "text": "-native-library <path>(-nl <path>)"}, {"type": "code", "text": "-native-library <path>"}, {"type": "code", "text": "-nl <path>"}, {"type": "p", "text": "Include the native bitcode library."}, {"type": "h3", "text": "-no-default-libs"}, {"type": "code", "text": "-no-default-libs"}, {"type": "p", "text": "Disable linking user code with the default platform libraries distributed with the compiler."}, {"type": "a", "text": "default platform libraries"}, {"type": "h3", "text": "-nomain"}, {"type": "code", "text": "-nomain"}, {"type": "p", "text": "Assume the main entry point to be provided by external libraries."}, {"type": "code", "text": "main"}, {"type": "h3", "text": "-nopack"}, {"type": "code", "text": "-nopack"}, {"type": "p", "text": "Don't pack the library into a klib file."}, {"type": "h3", "text": "-linker-option"}, {"type": "code", "text": "-linker-option"}, {"type": "p", "text": "Pass an argument to the linker during binary building. This can be used for linking against some native library."}, {"type": "h3", "text": "-linker-options <args>"}, {"type": "code", "text": "-linker-options <args>"}, {"type": "p", "text": "Pass multiple arguments to the linker during binary building. Separate arguments with whitespaces."}, {"type": "h3", "text": "-nostdlib"}, {"type": "code", "text": "-nostdlib"}, {"type": "p", "text": "Don't link with stdlib."}, {"type": "h3", "text": "-opt"}, {"type": "code", "text": "-opt"}, {"type": "p", "text": "Enable compilation optimizations."}, {"type": "h3", "text": "-output <name> (-o <name>)"}, {"type": "code", "text": "-output <name>"}, {"type": "code", "text": "-o <name>"}, {"type": "p", "text": "Set the name for the output file."}, {"type": "h3", "text": "-entry <name> (-e <name>)"}, {"type": "code", "text": "-entry <name>"}, {"type": "code", "text": "-e <name>"}, {"type": "p", "text": "Specify the qualified entry point name."}, {"type": "h3", "text": "-produce <output> (-p)"}, {"type": "code", "text": "-produce <output>"}, {"type": "code", "text": "-p"}, {"type": "p", "text": "Specify output file kind:"}, {"type": "ul", "text": "\nprogram\nstatic\ndynamic\nframework\nlibrary\nbitcode\n"}, {"type": "li", "text": "program"}, {"type": "code", "text": "program"}, {"type": "li", "text": "static"}, {"type": "code", "text": "static"}, {"type": "li", "text": "dynamic"}, {"type": "code", "text": "dynamic"}, {"type": "li", "text": "framework"}, {"type": "code", "text": "framework"}, {"type": "li", "text": "library"}, {"type": "code", "text": "library"}, {"type": "li", "text": "bitcode"}, {"type": "code", "text": "bitcode"}, {"type": "h3", "text": "-repo <path> (-r <path>)"}, {"type": "code", "text": "-repo <path>"}, {"type": "code", "text": "-r <path>"}, {"type": "p", "text": "Library search path. For more information, see Library search sequence."}, {"type": "a", "text": "Library search sequence"}, {"type": "h3", "text": "-target <target>"}, {"type": "code", "text": "-target <target>"}, {"type": "p", "text": "Set hardware target. To see the list of available targets, use the -list-targets option."}, {"type": "a", "text": "-list-targets"}, {"type": "code", "text": "-list-targets"}]