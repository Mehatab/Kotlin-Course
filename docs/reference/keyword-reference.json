[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Keywords and Operators"}, {"type": "h2", "text": "Hard Keywords"}, {"type": "p", "text": "The following tokens are always interpreted as keywords and cannot be used as identifiers:"}, {"type": "ul", "text": "\nas\n\nis used for type casts\nspecifies an alias for an import\n\n\nas? is used for safe type casts\nbreak terminates the execution of a loop\nclass declares a class\ncontinue proceeds to the next step of the nearest enclosing loop\ndo begins a do/while loop (loop with postcondition)\nelse defines the branch of an if expression which is executed when the condition is false\nfalse specifies the 'false' value of the Boolean type\nfor begins a for loop\nfun declares a function\nif begins an if expression\nin\n\nspecifies the object being iterated in a for loop\nis used as an infix operator to check that a value belongs to a range, \na collection or another entity that defines the 'contains' method\nis used in when expressions for the same purpose\nmarks a type parameter as contravariant\n\n\n!in\n\nis used as an operator to check that a value does NOT belong to a range, \na collection or another entity that defines the 'contains' method\nis used in when expressions for the same purpose\n\n\ninterface declares an interface\nis\n\nchecks that a value has a certain type\nis used in when expressions for the same purpose\n\n\n!is\n\nchecks that a value does NOT have a certain type\nis used in when expressions for the same purpose\n\n\nnull is a constant representing an object reference that doesn't point to any object\nobject declares a class and its instance at the same time\npackage specifies the package for the current file\nreturn returns from the nearest enclosing function or anonymous function\nsuper\n\nrefers to the superclass implementation of a method or property\ncalls the superclass constructor from a secondary constructor\n\n\nthis\n\nrefers to the current receiver\ncalls another constructor of the same class from a secondary constructor\n\n\nthrow throws an exception\ntrue specifies the 'true' value of the Boolean type\ntry begins an exception handling block\ntypealias declares a type alias\ntypeof reserved for future use\nval declares a read-only property or local variable\nvar declares a mutable property or local variable\nwhen begins a when expression (executes one of the given branches)\nwhile begins a while loop (loop with precondition)\n"}, {"type": "li", "text": "as\n\nis used for type casts\nspecifies an alias for an import\n\n"}, {"type": "code", "text": "as"}, {"type": "ul", "text": "\nis used for type casts\nspecifies an alias for an import\n"}, {"type": "li", "text": "is used for type casts"}, {"type": "a", "text": "type casts"}, {"type": "li", "text": "specifies an alias for an import"}, {"type": "a", "text": "alias for an import"}, {"type": "li", "text": "as? is used for safe type casts"}, {"type": "code", "text": "as?"}, {"type": "a", "text": "safe type casts"}, {"type": "li", "text": "break terminates the execution of a loop"}, {"type": "code", "text": "break"}, {"type": "a", "text": "terminates the execution of a loop"}, {"type": "li", "text": "class declares a class"}, {"type": "code", "text": "class"}, {"type": "a", "text": "class"}, {"type": "li", "text": "continue proceeds to the next step of the nearest enclosing loop"}, {"type": "code", "text": "continue"}, {"type": "a", "text": "proceeds to the next step of the nearest enclosing loop"}, {"type": "li", "text": "do begins a do/while loop (loop with postcondition)"}, {"type": "code", "text": "do"}, {"type": "a", "text": "do/while loop"}, {"type": "li", "text": "else defines the branch of an if expression which is executed when the condition is false"}, {"type": "code", "text": "else"}, {"type": "a", "text": "if expression"}, {"type": "li", "text": "false specifies the 'false' value of the Boolean type"}, {"type": "code", "text": "false"}, {"type": "a", "text": "Boolean type"}, {"type": "li", "text": "for begins a for loop"}, {"type": "code", "text": "for"}, {"type": "a", "text": "for loop"}, {"type": "li", "text": "fun declares a function"}, {"type": "code", "text": "fun"}, {"type": "a", "text": "function"}, {"type": "li", "text": "if begins an if expression"}, {"type": "code", "text": "if"}, {"type": "a", "text": "if expression"}, {"type": "li", "text": "in\n\nspecifies the object being iterated in a for loop\nis used as an infix operator to check that a value belongs to a range, \na collection or another entity that defines the 'contains' method\nis used in when expressions for the same purpose\nmarks a type parameter as contravariant\n\n"}, {"type": "code", "text": "in"}, {"type": "ul", "text": "\nspecifies the object being iterated in a for loop\nis used as an infix operator to check that a value belongs to a range, \na collection or another entity that defines the 'contains' method\nis used in when expressions for the same purpose\nmarks a type parameter as contravariant\n"}, {"type": "li", "text": "specifies the object being iterated in a for loop"}, {"type": "a", "text": "for loop"}, {"type": "li", "text": "is used as an infix operator to check that a value belongs to a range, \na collection or another entity that defines the 'contains' method"}, {"type": "a", "text": "a range"}, {"type": "a", "text": "defines the 'contains' method"}, {"type": "li", "text": "is used in when expressions for the same purpose"}, {"type": "a", "text": "when expressions"}, {"type": "li", "text": "marks a type parameter as contravariant"}, {"type": "a", "text": "contravariant"}, {"type": "li", "text": "!in\n\nis used as an operator to check that a value does NOT belong to a range, \na collection or another entity that defines the 'contains' method\nis used in when expressions for the same purpose\n\n"}, {"type": "code", "text": "!in"}, {"type": "ul", "text": "\nis used as an operator to check that a value does NOT belong to a range, \na collection or another entity that defines the 'contains' method\nis used in when expressions for the same purpose\n"}, {"type": "li", "text": "is used as an operator to check that a value does NOT belong to a range, \na collection or another entity that defines the 'contains' method"}, {"type": "a", "text": "a range"}, {"type": "a", "text": "defines the 'contains' method"}, {"type": "li", "text": "is used in when expressions for the same purpose"}, {"type": "a", "text": "when expressions"}, {"type": "li", "text": "interface declares an interface"}, {"type": "code", "text": "interface"}, {"type": "a", "text": "interface"}, {"type": "li", "text": "is\n\nchecks that a value has a certain type\nis used in when expressions for the same purpose\n\n"}, {"type": "code", "text": "is"}, {"type": "ul", "text": "\nchecks that a value has a certain type\nis used in when expressions for the same purpose\n"}, {"type": "li", "text": "checks that a value has a certain type"}, {"type": "a", "text": "a value has a certain type"}, {"type": "li", "text": "is used in when expressions for the same purpose"}, {"type": "a", "text": "when expressions"}, {"type": "li", "text": "!is\n\nchecks that a value does NOT have a certain type\nis used in when expressions for the same purpose\n\n"}, {"type": "code", "text": "!is"}, {"type": "ul", "text": "\nchecks that a value does NOT have a certain type\nis used in when expressions for the same purpose\n"}, {"type": "li", "text": "checks that a value does NOT have a certain type"}, {"type": "a", "text": "a value does NOT have a certain type"}, {"type": "li", "text": "is used in when expressions for the same purpose"}, {"type": "a", "text": "when expressions"}, {"type": "li", "text": "null is a constant representing an object reference that doesn't point to any object"}, {"type": "code", "text": "null"}, {"type": "li", "text": "object declares a class and its instance at the same time"}, {"type": "code", "text": "object"}, {"type": "a", "text": "a class and its instance at the same time"}, {"type": "li", "text": "package specifies the package for the current file"}, {"type": "code", "text": "package"}, {"type": "a", "text": "package for the current file"}, {"type": "li", "text": "return returns from the nearest enclosing function or anonymous function"}, {"type": "code", "text": "return"}, {"type": "a", "text": "returns from the nearest enclosing function or anonymous function"}, {"type": "li", "text": "super\n\nrefers to the superclass implementation of a method or property\ncalls the superclass constructor from a secondary constructor\n\n"}, {"type": "code", "text": "super"}, {"type": "ul", "text": "\nrefers to the superclass implementation of a method or property\ncalls the superclass constructor from a secondary constructor\n"}, {"type": "li", "text": "refers to the superclass implementation of a method or property"}, {"type": "a", "text": "refers to the superclass implementation of a method or property"}, {"type": "li", "text": "calls the superclass constructor from a secondary constructor"}, {"type": "a", "text": "calls the superclass constructor from a secondary constructor"}, {"type": "li", "text": "this\n\nrefers to the current receiver\ncalls another constructor of the same class from a secondary constructor\n\n"}, {"type": "code", "text": "this"}, {"type": "ul", "text": "\nrefers to the current receiver\ncalls another constructor of the same class from a secondary constructor\n"}, {"type": "li", "text": "refers to the current receiver"}, {"type": "a", "text": "the current receiver"}, {"type": "li", "text": "calls another constructor of the same class from a secondary constructor"}, {"type": "a", "text": "calls another constructor of the same class from a secondary constructor"}, {"type": "li", "text": "throw throws an exception"}, {"type": "code", "text": "throw"}, {"type": "a", "text": "throws an exception"}, {"type": "li", "text": "true specifies the 'true' value of the Boolean type"}, {"type": "code", "text": "true"}, {"type": "a", "text": "Boolean type"}, {"type": "li", "text": "try begins an exception handling block"}, {"type": "code", "text": "try"}, {"type": "a", "text": "begins an exception handling block"}, {"type": "li", "text": "typealias declares a type alias"}, {"type": "code", "text": "typealias"}, {"type": "a", "text": "type alias"}, {"type": "li", "text": "typeof reserved for future use"}, {"type": "code", "text": "typeof"}, {"type": "li", "text": "val declares a read-only property or local variable"}, {"type": "code", "text": "val"}, {"type": "a", "text": "property"}, {"type": "a", "text": "local variable"}, {"type": "li", "text": "var declares a mutable property or local variable"}, {"type": "code", "text": "var"}, {"type": "a", "text": "property"}, {"type": "a", "text": "local variable"}, {"type": "li", "text": "when begins a when expression (executes one of the given branches)"}, {"type": "code", "text": "when"}, {"type": "a", "text": "when expression"}, {"type": "li", "text": "while begins a while loop (loop with precondition)"}, {"type": "code", "text": "while"}, {"type": "a", "text": "while loop"}, {"type": "h2", "text": "Soft Keywords"}, {"type": "p", "text": "The following tokens act as keywords in the context when they are applicable and can be used\nas identifiers in other contexts:"}, {"type": "ul", "text": "\nby\n\ndelegates the implementation of an interface to another object\ndelegates the implementation of accessors for a property to another object\n\n\ncatch begins a block that handles a specific exception type\nconstructor declares a primary or secondary constructor\ndelegate is used as an annotation use-site target\ndynamic references a dynamic type in Kotlin/JS code\nfield is used as an annotation use-site target\nfile is used as an annotation use-site target\nfinally begins a block that is always executed when a try block exits\nget\n\ndeclares the getter of a property\nis used as an annotation use-site target\n\n\nimport imports a declaration from another package into the current file\ninit begins an initializer block\nparam is used as an annotation use-site target\nproperty is used as an annotation use-site target\nreceiveris used as an annotation use-site target\nset\n\ndeclares the setter of a property\nis used as an annotation use-site target\n\n\nsetparam is used as an annotation use-site target\nwhere specifies constraints for a generic type parameter\n"}, {"type": "li", "text": "by\n\ndelegates the implementation of an interface to another object\ndelegates the implementation of accessors for a property to another object\n\n"}, {"type": "code", "text": "by"}, {"type": "ul", "text": "\ndelegates the implementation of an interface to another object\ndelegates the implementation of accessors for a property to another object\n"}, {"type": "li", "text": "delegates the implementation of an interface to another object"}, {"type": "a", "text": "delegates the implementation of an interface to another object"}, {"type": "li", "text": "delegates the implementation of accessors for a property to another object"}, {"type": "a", "text": "delegates the implementation of accessors for a property to another object"}, {"type": "li", "text": "catch begins a block that handles a specific exception type"}, {"type": "code", "text": "catch"}, {"type": "a", "text": "handles a specific exception type"}, {"type": "li", "text": "constructor declares a primary or secondary constructor"}, {"type": "code", "text": "constructor"}, {"type": "a", "text": "primary or secondary constructor"}, {"type": "li", "text": "delegate is used as an annotation use-site target"}, {"type": "code", "text": "delegate"}, {"type": "a", "text": "annotation use-site target"}, {"type": "li", "text": "dynamic references a dynamic type in Kotlin/JS code"}, {"type": "code", "text": "dynamic"}, {"type": "a", "text": "dynamic type"}, {"type": "li", "text": "field is used as an annotation use-site target"}, {"type": "code", "text": "field"}, {"type": "a", "text": "annotation use-site target"}, {"type": "li", "text": "file is used as an annotation use-site target"}, {"type": "code", "text": "file"}, {"type": "a", "text": "annotation use-site target"}, {"type": "li", "text": "finally begins a block that is always executed when a try block exits"}, {"type": "code", "text": "finally"}, {"type": "a", "text": "is always executed when a try block exits"}, {"type": "li", "text": "get\n\ndeclares the getter of a property\nis used as an annotation use-site target\n\n"}, {"type": "code", "text": "get"}, {"type": "ul", "text": "\ndeclares the getter of a property\nis used as an annotation use-site target\n"}, {"type": "li", "text": "declares the getter of a property"}, {"type": "a", "text": "getter of a property"}, {"type": "li", "text": "is used as an annotation use-site target"}, {"type": "a", "text": "annotation use-site target"}, {"type": "li", "text": "import imports a declaration from another package into the current file"}, {"type": "code", "text": "import"}, {"type": "a", "text": "imports a declaration from another package into the current file"}, {"type": "li", "text": "init begins an initializer block"}, {"type": "code", "text": "init"}, {"type": "a", "text": "initializer block"}, {"type": "li", "text": "param is used as an annotation use-site target"}, {"type": "code", "text": "param"}, {"type": "a", "text": "annotation use-site target"}, {"type": "li", "text": "property is used as an annotation use-site target"}, {"type": "code", "text": "property"}, {"type": "a", "text": "annotation use-site target"}, {"type": "li", "text": "receiveris used as an annotation use-site target"}, {"type": "code", "text": "receiver"}, {"type": "a", "text": "annotation use-site target"}, {"type": "li", "text": "set\n\ndeclares the setter of a property\nis used as an annotation use-site target\n\n"}, {"type": "code", "text": "set"}, {"type": "ul", "text": "\ndeclares the setter of a property\nis used as an annotation use-site target\n"}, {"type": "li", "text": "declares the setter of a property"}, {"type": "a", "text": "setter of a property"}, {"type": "li", "text": "is used as an annotation use-site target"}, {"type": "a", "text": "annotation use-site target"}, {"type": "li", "text": "setparam is used as an annotation use-site target"}, {"type": "code", "text": "setparam"}, {"type": "a", "text": "annotation use-site target"}, {"type": "li", "text": "where specifies constraints for a generic type parameter"}, {"type": "code", "text": "where"}, {"type": "a", "text": "constraints for a generic type parameter"}, {"type": "h2", "text": "Modifier Keywords"}, {"type": "p", "text": "The following tokens act as keywords in modifier lists of declarations and can be used as identifiers\nin other contexts:"}, {"type": "ul", "text": "\nactual denotes a platform-specific implementation in multiplatform projects\nabstract marks a class or member as abstract\nannotation declares an annotation class\ncompanion declares a companion object\nconst marks a property as a compile-time constant\ncrossinline forbids non-local returns in a lambda passed to an inline function\ndata instructs the compiler to generate canonical members for a class\nenum declares an enumeration\nexpect marks a declaration as platform-specific, expecting an implementation in platform modules.\nexternal marks a declaration as implemented not in Kotlin (accessible through JNI or in JavaScript)\nfinal forbids overriding a member\ninfix allows calling a function in infix notation\ninline tells the compiler to inline the function and the lambdas passed to it at the call site\ninner allows referring to the outer class instance from a nested class\ninternal marks a declaration as visible in the current module\nlateinit allows initializing a non-null property outside of a constructor\nnoinline turns off inlining of a lambda passed to an inline function\nopen allows subclassing a class or overriding a member\noperator marks a function as overloading an operator or implementing a convention\nout marks a type parameter as covariant\noverride marks a member as an override of a superclass member\nprivate marks a declaration as visible in the current class or file\nprotected marks a declaration as visible in the current class and its subclasses\npublic marks a declaration as visible anywhere\nreified marks a type parameter of an inline function as accessible at runtime\nsealed declares a sealed class (a class with restricted subclassing)\nsuspend marks a function or lambda as suspending (usable as a coroutine)\ntailrec marks a function as tail-recursive (allowing the compiler to replace recursion with iteration)\nvararg allows passing a variable number of arguments for a parameter\n"}, {"type": "li", "text": "actual denotes a platform-specific implementation in multiplatform projects"}, {"type": "code", "text": "actual"}, {"type": "a", "text": "multiplatform projects"}, {"type": "li", "text": "abstract marks a class or member as abstract"}, {"type": "code", "text": "abstract"}, {"type": "a", "text": "abstract"}, {"type": "li", "text": "annotation declares an annotation class"}, {"type": "code", "text": "annotation"}, {"type": "a", "text": "annotation class"}, {"type": "li", "text": "companion declares a companion object"}, {"type": "code", "text": "companion"}, {"type": "a", "text": "companion object"}, {"type": "li", "text": "const marks a property as a compile-time constant"}, {"type": "code", "text": "const"}, {"type": "a", "text": "compile-time constant"}, {"type": "li", "text": "crossinline forbids non-local returns in a lambda passed to an inline function"}, {"type": "code", "text": "crossinline"}, {"type": "a", "text": "non-local returns in a lambda passed to an inline function"}, {"type": "li", "text": "data instructs the compiler to generate canonical members for a class"}, {"type": "code", "text": "data"}, {"type": "a", "text": "generate canonical members for a class"}, {"type": "li", "text": "enum declares an enumeration"}, {"type": "code", "text": "enum"}, {"type": "a", "text": "enumeration"}, {"type": "li", "text": "expect marks a declaration as platform-specific, expecting an implementation in platform modules."}, {"type": "code", "text": "expect"}, {"type": "a", "text": "platform-specific"}, {"type": "li", "text": "external marks a declaration as implemented not in Kotlin (accessible through JNI or in JavaScript)"}, {"type": "code", "text": "external"}, {"type": "a", "text": "JNI"}, {"type": "a", "text": "JavaScript"}, {"type": "li", "text": "final forbids overriding a member"}, {"type": "code", "text": "final"}, {"type": "a", "text": "overriding a member"}, {"type": "li", "text": "infix allows calling a function in infix notation"}, {"type": "code", "text": "infix"}, {"type": "a", "text": "infix notation"}, {"type": "li", "text": "inline tells the compiler to inline the function and the lambdas passed to it at the call site"}, {"type": "code", "text": "inline"}, {"type": "a", "text": "inline the function and the lambdas passed to it at the call site"}, {"type": "li", "text": "inner allows referring to the outer class instance from a nested class"}, {"type": "code", "text": "inner"}, {"type": "a", "text": "nested class"}, {"type": "li", "text": "internal marks a declaration as visible in the current module"}, {"type": "code", "text": "internal"}, {"type": "a", "text": "visible in the current module"}, {"type": "li", "text": "lateinit allows initializing a non-null property outside of a constructor"}, {"type": "code", "text": "lateinit"}, {"type": "a", "text": "non-null property outside of a constructor"}, {"type": "li", "text": "noinline turns off inlining of a lambda passed to an inline function"}, {"type": "code", "text": "noinline"}, {"type": "a", "text": "inlining of a lambda passed to an inline function"}, {"type": "li", "text": "open allows subclassing a class or overriding a member"}, {"type": "code", "text": "open"}, {"type": "a", "text": "subclassing a class or overriding a member"}, {"type": "li", "text": "operator marks a function as overloading an operator or implementing a convention"}, {"type": "code", "text": "operator"}, {"type": "a", "text": "overloading an operator or implementing a convention"}, {"type": "li", "text": "out marks a type parameter as covariant"}, {"type": "code", "text": "out"}, {"type": "a", "text": "covariant"}, {"type": "li", "text": "override marks a member as an override of a superclass member"}, {"type": "code", "text": "override"}, {"type": "a", "text": "override of a superclass member"}, {"type": "li", "text": "private marks a declaration as visible in the current class or file"}, {"type": "code", "text": "private"}, {"type": "a", "text": "visible in the current class or file"}, {"type": "li", "text": "protected marks a declaration as visible in the current class and its subclasses"}, {"type": "code", "text": "protected"}, {"type": "a", "text": "visible in the current class and its subclasses"}, {"type": "li", "text": "public marks a declaration as visible anywhere"}, {"type": "code", "text": "public"}, {"type": "a", "text": "visible anywhere"}, {"type": "li", "text": "reified marks a type parameter of an inline function as accessible at runtime"}, {"type": "code", "text": "reified"}, {"type": "a", "text": "accessible at runtime"}, {"type": "li", "text": "sealed declares a sealed class (a class with restricted subclassing)"}, {"type": "code", "text": "sealed"}, {"type": "a", "text": "sealed class"}, {"type": "li", "text": "suspend marks a function or lambda as suspending (usable as a coroutine)"}, {"type": "code", "text": "suspend"}, {"type": "a", "text": "coroutine"}, {"type": "li", "text": "tailrec marks a function as tail-recursive (allowing the compiler to replace recursion with iteration)"}, {"type": "code", "text": "tailrec"}, {"type": "a", "text": "tail-recursive"}, {"type": "li", "text": "vararg allows passing a variable number of arguments for a parameter"}, {"type": "code", "text": "vararg"}, {"type": "a", "text": "passing a variable number of arguments for a parameter"}, {"type": "h2", "text": "Special Identifiers"}, {"type": "p", "text": "The following identifiers are defined by the compiler in specific contexts and can be used as regular\nidentifiers in other contexts:"}, {"type": "ul", "text": "\nfield is used inside a property accessor to refer to the backing field of the property\nit is used inside a lambda to refer to its parameter implicitly\n"}, {"type": "li", "text": "field is used inside a property accessor to refer to the backing field of the property"}, {"type": "code", "text": "field"}, {"type": "a", "text": "backing field of the property"}, {"type": "li", "text": "it is used inside a lambda to refer to its parameter implicitly"}, {"type": "code", "text": "it"}, {"type": "a", "text": "refer to its parameter implicitly"}, {"type": "h2", "text": "Operators and Special Symbols"}, {"type": "p", "text": "Kotlin supports the following operators and special symbols:"}, {"type": "ul", "text": "\n+, -, *, /, % - mathematical operators\n    \n* is also used to pass an array to a vararg parameter\n\n\n=\n\nassignment operator\nis used to specify default values for parameters\n\n\n+=, -=, *=, /=, %= - augmented assignment operators\n++, -- - increment and decrement operators\n&&, ||, ! - logical 'and', 'or', 'not' operators (for bitwise operations, use corresponding infix functions)\n==, != - equality operators (translated to calls of equals() for non-primitive types)\n===, !== - referential equality operators\n<, >, <=, >= - comparison operators (translated to calls of compareTo() for non-primitive types)\n[, ] - indexed access operator (translated to calls of get and set)\n!! asserts that an expression is non-null\n?. performs a safe call (calls a method or accesses a property if the receiver is non-null)\n?: takes the right-hand value if the left-hand value is null (the elvis operator)\n:: creates a member reference or a class reference\n.. creates a range\n: separates a name from a type in declarations\n? marks a type as nullable\n->\n\nseparates the parameters and body of a lambda expression\nseparates the parameters and return type declaration in a function type\nseparates the condition and body of a when expression branch\n\n\n@\n\nintroduces an annotation\nintroduces or references a loop label\nintroduces or references a lambda label\nreferences a 'this' expression from an outer scope\nreferences an outer superclass\n\n\n; separates multiple statements on the same line\n$ references a variable or expression in a string template\n_\n\nsubstitutes an unused parameter in a lambda expression\nsubstitutes an unused parameter in a destructuring declaration\n\n\n"}, {"type": "li", "text": "+, -, *, /, % - mathematical operators\n    \n* is also used to pass an array to a vararg parameter\n\n"}, {"type": "code", "text": "+"}, {"type": "code", "text": "-"}, {"type": "code", "text": "*"}, {"type": "code", "text": "/"}, {"type": "code", "text": "%"}, {"type": "ul", "text": "\n* is also used to pass an array to a vararg parameter\n"}, {"type": "li", "text": "* is also used to pass an array to a vararg parameter"}, {"type": "code", "text": "*"}, {"type": "a", "text": "pass an array to a vararg parameter"}, {"type": "li", "text": "=\n\nassignment operator\nis used to specify default values for parameters\n\n"}, {"type": "code", "text": "="}, {"type": "ul", "text": "\nassignment operator\nis used to specify default values for parameters\n"}, {"type": "li", "text": "assignment operator"}, {"type": "li", "text": "is used to specify default values for parameters"}, {"type": "a", "text": "default values for parameters"}, {"type": "li", "text": "+=, -=, *=, /=, %= - augmented assignment operators"}, {"type": "code", "text": "+="}, {"type": "code", "text": "-="}, {"type": "code", "text": "*="}, {"type": "code", "text": "/="}, {"type": "code", "text": "%="}, {"type": "a", "text": "augmented assignment operators"}, {"type": "li", "text": "++, -- - increment and decrement operators"}, {"type": "code", "text": "++"}, {"type": "code", "text": "--"}, {"type": "a", "text": "increment and decrement operators"}, {"type": "li", "text": "&&, ||, ! - logical 'and', 'or', 'not' operators (for bitwise operations, use corresponding infix functions)"}, {"type": "code", "text": "&&"}, {"type": "code", "text": "||"}, {"type": "code", "text": "!"}, {"type": "a", "text": "infix functions"}, {"type": "li", "text": "==, != - equality operators (translated to calls of equals() for non-primitive types)"}, {"type": "code", "text": "=="}, {"type": "code", "text": "!="}, {"type": "a", "text": "equality operators"}, {"type": "code", "text": "equals()"}, {"type": "li", "text": "===, !== - referential equality operators"}, {"type": "code", "text": "==="}, {"type": "code", "text": "!=="}, {"type": "a", "text": "referential equality operators"}, {"type": "li", "text": "<, >, <=, >= - comparison operators (translated to calls of compareTo() for non-primitive types)"}, {"type": "code", "text": "<"}, {"type": "code", "text": ">"}, {"type": "code", "text": "<="}, {"type": "code", "text": ">="}, {"type": "a", "text": "comparison operators"}, {"type": "code", "text": "compareTo()"}, {"type": "li", "text": "[, ] - indexed access operator (translated to calls of get and set)"}, {"type": "code", "text": "["}, {"type": "code", "text": "]"}, {"type": "a", "text": "indexed access operator"}, {"type": "code", "text": "get"}, {"type": "code", "text": "set"}, {"type": "li", "text": "!! asserts that an expression is non-null"}, {"type": "code", "text": "!!"}, {"type": "a", "text": "asserts that an expression is non-null"}, {"type": "li", "text": "?. performs a safe call (calls a method or accesses a property if the receiver is non-null)"}, {"type": "code", "text": "?."}, {"type": "a", "text": "safe call"}, {"type": "li", "text": "?: takes the right-hand value if the left-hand value is null (the elvis operator)"}, {"type": "code", "text": "?:"}, {"type": "a", "text": "elvis operator"}, {"type": "li", "text": ":: creates a member reference or a class reference"}, {"type": "code", "text": "::"}, {"type": "a", "text": "member reference"}, {"type": "a", "text": "class reference"}, {"type": "li", "text": ".. creates a range"}, {"type": "code", "text": ".."}, {"type": "a", "text": "range"}, {"type": "li", "text": ": separates a name from a type in declarations"}, {"type": "code", "text": ":"}, {"type": "li", "text": "? marks a type as nullable"}, {"type": "code", "text": "?"}, {"type": "a", "text": "nullable"}, {"type": "li", "text": "->\n\nseparates the parameters and body of a lambda expression\nseparates the parameters and return type declaration in a function type\nseparates the condition and body of a when expression branch\n\n"}, {"type": "code", "text": "->"}, {"type": "ul", "text": "\nseparates the parameters and body of a lambda expression\nseparates the parameters and return type declaration in a function type\nseparates the condition and body of a when expression branch\n"}, {"type": "li", "text": "separates the parameters and body of a lambda expression"}, {"type": "a", "text": "lambda expression"}, {"type": "li", "text": "separates the parameters and return type declaration in a function type"}, {"type": "a", "text": "function type"}, {"type": "li", "text": "separates the condition and body of a when expression branch"}, {"type": "a", "text": "when expression"}, {"type": "li", "text": "@\n\nintroduces an annotation\nintroduces or references a loop label\nintroduces or references a lambda label\nreferences a 'this' expression from an outer scope\nreferences an outer superclass\n\n"}, {"type": "code", "text": "@"}, {"type": "ul", "text": "\nintroduces an annotation\nintroduces or references a loop label\nintroduces or references a lambda label\nreferences a 'this' expression from an outer scope\nreferences an outer superclass\n"}, {"type": "li", "text": "introduces an annotation"}, {"type": "a", "text": "annotation"}, {"type": "li", "text": "introduces or references a loop label"}, {"type": "a", "text": "loop label"}, {"type": "li", "text": "introduces or references a lambda label"}, {"type": "a", "text": "lambda label"}, {"type": "li", "text": "references a 'this' expression from an outer scope"}, {"type": "a", "text": "'this' expression from an outer scope"}, {"type": "li", "text": "references an outer superclass"}, {"type": "a", "text": "outer superclass"}, {"type": "li", "text": "; separates multiple statements on the same line"}, {"type": "code", "text": ";"}, {"type": "li", "text": "$ references a variable or expression in a string template"}, {"type": "code", "text": "$"}, {"type": "a", "text": "string template"}, {"type": "li", "text": "_\n\nsubstitutes an unused parameter in a lambda expression\nsubstitutes an unused parameter in a destructuring declaration\n\n"}, {"type": "code", "text": "_"}, {"type": "ul", "text": "\nsubstitutes an unused parameter in a lambda expression\nsubstitutes an unused parameter in a destructuring declaration\n"}, {"type": "li", "text": "substitutes an unused parameter in a lambda expression"}, {"type": "a", "text": "lambda expression"}, {"type": "li", "text": "substitutes an unused parameter in a destructuring declaration"}, {"type": "a", "text": "destructuring declaration"}]