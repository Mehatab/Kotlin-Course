[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "JavaScript Reflection"}, {"type": "p", "text": "At this time, JavaScript does not support the full Kotlin reflection API. The only supported part of the API\nis the ::class syntax which allows you to refer to the class of an instance, or the class corresponding to the given type.\nThe value of a ::class expression is a stripped-down KClass\nimplementation that only supports the simpleName and\nisInstance members."}, {"type": "code", "text": "::class"}, {"type": "code", "text": "::class"}, {"type": "a", "text": "KClass"}, {"type": "a", "text": "simpleName"}, {"type": "a", "text": "isInstance"}, {"type": "p", "text": "In addition to that, you can use KClass.js to access the\nJsClass instance corresponding to the class.\nThe JsClass instance itself is a reference to the constructor function.\nThis can be used to interoperate with JS functions that expect a reference to a constructor."}, {"type": "a", "text": "KClass.js"}, {"type": "a", "text": "JsClass"}, {"type": "code", "text": "JsClass"}, {"type": "p", "text": "Examples:"}, {"type": "div", "text": "\nclass A\nclass B\nclass C\n\ninline fun <reified T> foo() {\n    println(T::class.simpleName)\n}\n\nval a = A()\nprintln(a::class.simpleName)  // Obtains class for an instance; prints \"A\"\nprintln(B::class.simpleName)  // Obtains class for a type; prints \"B\"\nprintln(B::class.js.name)     // prints \"B\"\nfoo<C>()                      // prints \"C\"\n\n"}, {"type": "pre", "text": "class A\nclass B\nclass C\n\ninline fun <reified T> foo() {\n    println(T::class.simpleName)\n}\n\nval a = A()\nprintln(a::class.simpleName)  // Obtains class for an instance; prints \"A\"\nprintln(B::class.simpleName)  // Obtains class for a type; prints \"B\"\nprintln(B::class.js.name)     // prints \"B\"\nfoo<C>()                      // prints \"C\"\n"}, {"type": "code", "text": "class A\nclass B\nclass C\n\ninline fun <reified T> foo() {\n    println(T::class.simpleName)\n}\n\nval a = A()\nprintln(a::class.simpleName)  // Obtains class for an instance; prints \"A\"\nprintln(B::class.simpleName)  // Obtains class for a type; prints \"B\"\nprintln(B::class.js.name)     // prints \"B\"\nfoo<C>()                      // prints \"C\"\n"}]