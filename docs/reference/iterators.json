[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Iterators"}, {"type": "p", "text": "For traversing collection elements, the Kotlin standard library supports the commonly used mechanism of iterators \u2013 objects that provide access to the elements sequentially without exposing the underlying structure of the collection.\nIterators are useful when you need to process all the elements of a collection one-by-one, for example, print values or make similar updates to them."}, {"type": "em", "text": "iterators"}, {"type": "p", "text": "Iterators can be obtained for inheritors of the Iterable<T> interface, including Set and List, by calling the iterator() function.\nOnce you obtain an iterator, it points to the first element of a collection; calling the next() function returns this element and moves the iterator position to the following element if it exists.\nOnce the iterator passes through the last element, it can no longer be used for retrieving elements; neither can it be reset to any previous position. To iterate through the collection again, create a new iterator."}, {"type": "a", "text": "Iterable<T>"}, {"type": "code", "text": "Iterable<T>"}, {"type": "code", "text": "Set"}, {"type": "code", "text": "List"}, {"type": "a", "text": "iterator()"}, {"type": "code", "text": "iterator()"}, {"type": "a", "text": "next()"}, {"type": "code", "text": "next()"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    val numbersIterator = numbers.iterator()\n    while (numbersIterator.hasNext()) {\n        println(numbersIterator.next())\n    }\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    val numbersIterator = numbers.iterator()\n    while (numbersIterator.hasNext()) {\n        println(numbersIterator.next())\n    }\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    val numbersIterator = numbers.iterator()\n    while (numbersIterator.hasNext()) {\n        println(numbersIterator.next())\n    }\n//sampleEnd\n}\n"}, {"type": "p", "text": "Another way to go through an Iterable collection is the well-known for loop. When using for on a collection, you obtain the iterator implicitly. So, the following code is equivalent to the example above:"}, {"type": "code", "text": "Iterable"}, {"type": "code", "text": "for"}, {"type": "code", "text": "for"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    for (item in numbers) {\n        println(item)\n    }\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    for (item in numbers) {\n        println(item)\n    }\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    for (item in numbers) {\n        println(item)\n    }\n//sampleEnd\n}\n"}, {"type": "p", "text": "Finally, there is a useful forEach() function that lets you automatically iterate a collection and execute the given code for each element. So, the same example would look like this:"}, {"type": "code", "text": "forEach()"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    numbers.forEach {\n        println(it)\n    }\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    numbers.forEach {\n        println(it)\n    }\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    numbers.forEach {\n        println(it)\n    }\n//sampleEnd\n}\n"}, {"type": "h2", "text": "List iterators"}, {"type": "p", "text": "For lists, there is a special iterator implementation: ListIterator. It supports iterating lists in both directions: forwards and backwards.\nBackward iteration is implemented by the functions hasPrevious() and previous().\nAdditionally, the ListIterator provides information about the element indices with the functions nextIndex() and previousIndex()."}, {"type": "a", "text": "ListIterator"}, {"type": "code", "text": "ListIterator"}, {"type": "a", "text": "hasPrevious()"}, {"type": "code", "text": "hasPrevious()"}, {"type": "a", "text": "previous()"}, {"type": "code", "text": "previous()"}, {"type": "code", "text": "ListIterator"}, {"type": "a", "text": "nextIndex()"}, {"type": "code", "text": "nextIndex()"}, {"type": "a", "text": "previousIndex()"}, {"type": "code", "text": "previousIndex()"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    val listIterator = numbers.listIterator()\n    while (listIterator.hasNext()) listIterator.next()\n    println(\"Iterating backwards:\")\n    while (listIterator.hasPrevious()) {\n        print(\"Index: ${listIterator.previousIndex()}\")\n        println(\", value: ${listIterator.previous()}\")\n    }\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    val listIterator = numbers.listIterator()\n    while (listIterator.hasNext()) listIterator.next()\n    println(\"Iterating backwards:\")\n    while (listIterator.hasPrevious()) {\n        print(\"Index: ${listIterator.previousIndex()}\")\n        println(\", value: ${listIterator.previous()}\")\n    }\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    val listIterator = numbers.listIterator()\n    while (listIterator.hasNext()) listIterator.next()\n    println(\"Iterating backwards:\")\n    while (listIterator.hasPrevious()) {\n        print(\"Index: ${listIterator.previousIndex()}\")\n        println(\", value: ${listIterator.previous()}\")\n    }\n//sampleEnd\n}\n"}, {"type": "p", "text": "Having the ability to iterate in both directions, means the ListIterator can still be used after it reaches the last element."}, {"type": "code", "text": "ListIterator"}, {"type": "h2", "text": "Mutable iterators"}, {"type": "p", "text": "For iterating mutable collections, there is MutableIterator that extends Iterator with the element removal function remove(). So, you can remove elements from a collection while iterating it."}, {"type": "a", "text": "MutableIterator"}, {"type": "code", "text": "MutableIterator"}, {"type": "code", "text": "Iterator"}, {"type": "a", "text": "remove()"}, {"type": "code", "text": "remove()"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"two\", \"three\", \"four\") \n    val mutableIterator = numbers.iterator()\n    \n    mutableIterator.next()\n    mutableIterator.remove()    \n    println(\"After removal: $numbers\")\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"two\", \"three\", \"four\") \n    val mutableIterator = numbers.iterator()\n    \n    mutableIterator.next()\n    mutableIterator.remove()    \n    println(\"After removal: $numbers\")\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"two\", \"three\", \"four\") \n    val mutableIterator = numbers.iterator()\n    \n    mutableIterator.next()\n    mutableIterator.remove()    \n    println(\"After removal: $numbers\")\n//sampleEnd\n}\n"}, {"type": "p", "text": "In addition to removing elements, the MutableListIterator can also insert and replace elements while iterating the list."}, {"type": "a", "text": "MutableListIterator"}, {"type": "code", "text": "MutableListIterator"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"four\", \"four\") \n    val mutableListIterator = numbers.listIterator()\n    \n    mutableListIterator.next()\n    mutableListIterator.add(\"two\")\n    mutableListIterator.next()\n    mutableListIterator.set(\"three\")   \n    println(numbers)\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"four\", \"four\") \n    val mutableListIterator = numbers.listIterator()\n    \n    mutableListIterator.next()\n    mutableListIterator.add(\"two\")\n    mutableListIterator.next()\n    mutableListIterator.set(\"three\")   \n    println(numbers)\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"four\", \"four\") \n    val mutableListIterator = numbers.listIterator()\n    \n    mutableListIterator.next()\n    mutableListIterator.add(\"two\")\n    mutableListIterator.next()\n    mutableListIterator.set(\"three\")   \n    println(numbers)\n//sampleEnd\n}\n"}]