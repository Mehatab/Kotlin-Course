[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Symbolicating iOS crash reports"}, {"type": "p", "text": "Debugging an iOS application crash sometimes involves analyzing crash reports.\nMore info about crash reports can be found\nin the official documentation."}, {"type": "a", "text": "in the official documentation"}, {"type": "p", "text": "Crash reports generally require symbolication to become properly readable:\nsymbolication turns machine code addresses into human-readable source locations.\nThe document below describes some specific details of symbolicating crash reports\nfrom iOS applications using Kotlin."}, {"type": "h2", "text": "Enable .dSYM for release Kotlin binaries"}, {"type": "p", "text": "To symbolicate addresses in Kotlin code (e.g. for stack trace elements\ncorresponding to Kotlin code) .dSYM bundle for Kotlin code is required."}, {"type": "code", "text": ".dSYM"}, {"type": "p", "text": "By default Kotlin/Native compiler doesn't produce .dSYM for release\n(i.e. optimized) binaries. This can be changed with -Xg0 experimental\ncompiler flag: it enables debug info and .dSYM bundle generation for produced\nrelease binaries. To enable it in Gradle, use"}, {"type": "code", "text": ".dSYM"}, {"type": "code", "text": "-Xg0"}, {"type": "code", "text": ".dSYM"}, {"type": "pre", "text": "kotlin {\n    targets.withType<org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget> {\n        binaries.all {\n            freeCompilerArgs += \"-Xg0\"\n        }\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    targets.withType<org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget> {\n        binaries.all {\n            freeCompilerArgs += \"-Xg0\"\n        }\n    }\n}\n"}, {"type": "p", "text": "(in Kotlin DSL)."}, {"type": "p", "text": "In projects created from IntelliJ IDEA or AppCode templates these .dSYM bundles\nare then discovered by Xcode automatically."}, {"type": "code", "text": ".dSYM"}, {"type": "h2", "text": "Make frameworks static when using rebuild from bitcode"}, {"type": "p", "text": "Rebuilding Kotlin-produced framework from bitcode invalidates the original .dSYM.\nIf it is performed locally, make sure the updated .dSYM is used when symbolicating\ncrash reports."}, {"type": "code", "text": ".dSYM"}, {"type": "code", "text": ".dSYM"}, {"type": "p", "text": "If rebuilding is performed on App Store side, then .dSYM of rebuilt dynamic framework\nseems discarded and not downloadable from App Store Connect.\nSo in this case it may be required to make the framework static, e.g. with"}, {"type": "code", "text": ".dSYM"}, {"type": "em", "text": "dynamic"}, {"type": "pre", "text": "kotlin {\n    targets.withType<org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget> {\n        binaries.withType<org.jetbrains.kotlin.gradle.plugin.mpp.Framework> {\n            isStatic = true\n        }\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    targets.withType<org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget> {\n        binaries.withType<org.jetbrains.kotlin.gradle.plugin.mpp.Framework> {\n            isStatic = true\n        }\n    }\n}\n"}, {"type": "p", "text": "(in Kotlin DSL)."}, {"type": "h2", "text": "Decode inlined stack frames"}, {"type": "p", "text": "Xcode doesn't seem to properly decode stack trace elements of inlined function\ncalls (these aren't only Kotlin inline functions but also functions that are\ninlined when optimizing machine code). So some stack trace elements may be\nmissing. If this is the case, consider using lldb to process crash report\nthat is already symbolicated by Xcode, for example:"}, {"type": "code", "text": "inline"}, {"type": "code", "text": "lldb"}, {"type": "pre", "text": "$ lldb -b -o \"script import lldb.macosx\" -o \"crashlog file.crash\"\n"}, {"type": "code", "text": "$ lldb -b -o \"script import lldb.macosx\" -o \"crashlog file.crash\"\n"}, {"type": "p", "text": "This command should output crash report that is additionally processed and\nincludes inlined stack trace elements."}, {"type": "p", "text": "More details can be found in LLDB documentation."}, {"type": "a", "text": "LLDB documentation"}]