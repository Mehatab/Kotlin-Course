[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h3", "text": "Q: How do I run my program?"}, {"type": "p", "text": "A: Define a top level function fun main(args: Array<String>) or just  fun main() if you are not interested\nin passed arguments, please ensure it's not in a package.\nAlso compiler switch -entry could be used to make any function taking Array<String> or no arguments\nand return Unit as an entry point."}, {"type": "code", "text": "fun main(args: Array<String>)"}, {"type": "code", "text": "fun main()"}, {"type": "code", "text": "-entry"}, {"type": "code", "text": "Array<String>"}, {"type": "code", "text": "Unit"}, {"type": "h3", "text": "Q: What is Kotlin/Native memory management model?"}, {"type": "p", "text": "A: Kotlin/Native provides an automated memory management scheme, similar to what Java or Swift provides.\nThe current implementation includes an automated reference counter with a cycle collector to collect cyclical\ngarbage."}, {"type": "h3", "text": "Q: How do I create a shared library?"}, {"type": "p", "text": "A: Use the -produce dynamic compiler switch, or binaries.sharedLib() in Gradle, i.e."}, {"type": "code", "text": "-produce dynamic"}, {"type": "code", "text": "binaries.sharedLib()"}, {"type": "div", "text": "\nkotlin {\n    iosArm64(\"mylib\") {\n        binaries.sharedLib()\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    iosArm64(\"mylib\") {\n        binaries.sharedLib()\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    iosArm64(\"mylib\") {\n        binaries.sharedLib()\n    }\n}\n"}, {"type": "p", "text": "It will produce a platform-specific shared object (.so on Linux, .dylib on macOS, and .dll on Windows targets) and a\nC language header, allowing the use of all public APIs available in your Kotlin/Native program from C/C++ code.\nSee samples/python_extension for an example of using such a shared object to provide a bridge between Python and\nKotlin/Native."}, {"type": "code", "text": "samples/python_extension"}, {"type": "h3", "text": "Q: How do I create a static library or an object file?"}, {"type": "p", "text": "A: Use the -produce static compiler switch, or binaries.staticLib() in Gradle, i.e."}, {"type": "code", "text": "-produce static"}, {"type": "code", "text": "binaries.staticLib()"}, {"type": "div", "text": "\nkotlin {\n    iosArm64(\"mylib\") {\n        binaries.staticLib()\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    iosArm64(\"mylib\") {\n        binaries.staticLib()\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    iosArm64(\"mylib\") {\n        binaries.staticLib()\n    }\n}\n"}, {"type": "p", "text": "It will produce a platform-specific static object (.a library format) and a C language header, allowing you to\nuse all the public APIs available in your Kotlin/Native program from C/C++ code."}, {"type": "h3", "text": "Q: How do I run Kotlin/Native behind a corporate proxy?"}, {"type": "p", "text": "A: As Kotlin/Native needs to download a platform specific toolchain, you need to specify\n-Dhttp.proxyHost=xxx -Dhttp.proxyPort=xxx as the compiler's or gradlew arguments,\nor set it via the JAVA_OPTS environment variable."}, {"type": "code", "text": "-Dhttp.proxyHost=xxx -Dhttp.proxyPort=xxx"}, {"type": "code", "text": "gradlew"}, {"type": "code", "text": "JAVA_OPTS"}, {"type": "h3", "text": "Q: How do I specify a custom Objective-C prefix/name for my Kotlin framework?"}, {"type": "p", "text": "A: Use the -module-name compiler option or matching Gradle DSL statement, i.e."}, {"type": "code", "text": "-module-name"}, {"type": "div", "text": "\n\nkotlin {\n    iosArm64(\"myapp\") {\n        binaries.framework {\n            freeCompilerArgs += listOf(\"-module-name\", \"TheName\")\n        }\n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin {\n    iosArm64(\"myapp\") {\n        binaries.framework {\n            freeCompilerArgs += listOf(\"-module-name\", \"TheName\")\n        }\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    iosArm64(\"myapp\") {\n        binaries.framework {\n            freeCompilerArgs += listOf(\"-module-name\", \"TheName\")\n        }\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    iosArm64(\"myapp\") {\n        binaries.framework {\n            freeCompilerArgs += listOf(\"-module-name\", \"TheName\")\n        }\n    }\n}\n"}, {"type": "div", "text": "\n\nkotlin {\n    iosArm64(\"myapp\") {\n        binaries.framework {\n            freeCompilerArgs += [\"-module-name\", \"TheName\"]\n        }\n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin {\n    iosArm64(\"myapp\") {\n        binaries.framework {\n            freeCompilerArgs += [\"-module-name\", \"TheName\"]\n        }\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    iosArm64(\"myapp\") {\n        binaries.framework {\n            freeCompilerArgs += [\"-module-name\", \"TheName\"]\n        }\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    iosArm64(\"myapp\") {\n        binaries.framework {\n            freeCompilerArgs += [\"-module-name\", \"TheName\"]\n        }\n    }\n}\n"}, {"type": "h3", "text": "Q: How do I rename the iOS framework? (default name is <project name>.framework)"}, {"type": "em", "text": "<project name>"}, {"type": "p", "text": "A: Use the baseName option. This will also set the module name."}, {"type": "code", "text": "baseName"}, {"type": "div", "text": "\nkotlin {\n    iosArm64(\"myapp\") {\n       binaries {\n          framework {\n              baseName = \"TheName\"\n          }\n       }\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    iosArm64(\"myapp\") {\n       binaries {\n          framework {\n              baseName = \"TheName\"\n          }\n       }\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    iosArm64(\"myapp\") {\n       binaries {\n          framework {\n              baseName = \"TheName\"\n          }\n       }\n    }\n}\n"}, {"type": "h3", "text": "Q: How do I enable bitcode for my Kotlin framework?"}, {"type": "p", "text": "A: By default gradle plugin adds it on iOS target."}, {"type": "ul", "text": "\nFor debug build it embeds placeholder LLVM IR data as a marker.\nFor release build it embeds bitcode as data.\n"}, {"type": "li", "text": "For debug build it embeds placeholder LLVM IR data as a marker."}, {"type": "li", "text": "For release build it embeds bitcode as data."}, {"type": "p", "text": "Or commandline arguments: -Xembed-bitcode (for release) and -Xembed-bitcode-marker (debug)"}, {"type": "code", "text": "-Xembed-bitcode"}, {"type": "code", "text": "-Xembed-bitcode-marker"}, {"type": "p", "text": "Setting this in a Gradle DSL:"}, {"type": "div", "text": "\nkotlin {\n    iosArm64(\"myapp\") {\n        binaries {\n            framework {\n                // Use \"marker\" to embed the bitcode marker (for debug builds).\n                // Use \"disable\" to disable embedding.\n                embedBitcode(\"bitcode\") // for release binaries.\n            }\n        }\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    iosArm64(\"myapp\") {\n        binaries {\n            framework {\n                // Use \"marker\" to embed the bitcode marker (for debug builds).\n                // Use \"disable\" to disable embedding.\n                embedBitcode(\"bitcode\") // for release binaries.\n            }\n        }\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    iosArm64(\"myapp\") {\n        binaries {\n            framework {\n                // Use \"marker\" to embed the bitcode marker (for debug builds).\n                // Use \"disable\" to disable embedding.\n                embedBitcode(\"bitcode\") // for release binaries.\n            }\n        }\n    }\n}\n"}, {"type": "p", "text": "These options have nearly the same effect as clang's -fembed-bitcode/-fembed-bitcode-marker\nand swiftc's -embed-bitcode/-embed-bitcode-marker."}, {"type": "code", "text": "-fembed-bitcode"}, {"type": "code", "text": "-fembed-bitcode-marker"}, {"type": "code", "text": "-embed-bitcode"}, {"type": "code", "text": "-embed-bitcode-marker"}, {"type": "h3", "text": "Q: Why do I see InvalidMutabilityException?"}, {"type": "code", "text": "InvalidMutabilityException"}, {"type": "p", "text": "A: It likely happens, because you are trying to mutate a frozen object. An object can transfer to the\nfrozen state either explicitly, as objects reachable from objects on which the kotlin.native.concurrent.freeze is called,\nor implicitly (i.e. reachable from enum or global singleton object - see the next question)."}, {"type": "code", "text": "kotlin.native.concurrent.freeze"}, {"type": "code", "text": "enum"}, {"type": "h3", "text": "Q: How do I make a singleton object mutable?"}, {"type": "p", "text": "A: Currently, singleton objects are immutable (i.e. frozen after creation), and it's generally considered\ngood practise to have the global state immutable. If for some reason you need a mutable state inside such an\nobject, use the @konan.ThreadLocal annotation on the object. Also the kotlin.native.concurrent.AtomicReference class could be\nused to store different pointers to frozen objects in a frozen object and automatically update them."}, {"type": "code", "text": "@konan.ThreadLocal"}, {"type": "code", "text": "kotlin.native.concurrent.AtomicReference"}, {"type": "h3", "text": "Q: How can I compile my project against the Kotlin/Native master?"}, {"type": "p", "text": "A: One of the following should be done:"}, {"type": "details", "text": "\nFor the CLI, you can compile using gradle as stated in the README (and if you get errors, you can try to do a ./gradlew clean):\n\n./gradlew dependencies:update\n./gradlew dist distPlatformLibs\n\n\n\n\nYou can then set the `KONAN_HOME` env variable to the generated `dist` folder in the git repository.\n\n"}, {"type": "summary", "text": "For the CLI, you can compile using gradle as stated in the README (and if you get errors, you can try to do a ./gradlew clean):"}, {"type": "code", "text": "./gradlew clean"}, {"type": "div", "text": "\n./gradlew dependencies:update\n./gradlew dist distPlatformLibs\n\n"}, {"type": "pre", "text": "./gradlew dependencies:update\n./gradlew dist distPlatformLibs\n"}, {"type": "code", "text": "./gradlew dependencies:update\n./gradlew dist distPlatformLibs\n"}, {"type": "details", "text": "\nFor Gradle, you can use Gradle composite builds like this:\n\n# Set with the path of your kotlin-native clone\nexport KONAN_REPO=$PWD/../kotlin-native\n\n# Run this once since it is costly, you can remove the `clean` task if not big changes were made from the last time you did this\npushd $KONAN_REPO && git pull && ./gradlew clean dependencies:update dist distPlatformLibs && popd\n\n#\u00a0In your project, you set have to the org.jetbrains.kotlin.native.home property, and include as composite the shared and gradle-plugin builds\n./gradlew check -Porg.jetbrains.kotlin.native.home=$KONAN_REPO/dist --include-build $KONAN_REPO/shared --include-build $KONAN_REPO/tools/kotlin-native-gradle-plugin\n\n\n"}, {"type": "summary", "text": "For Gradle, you can use Gradle composite builds like this:"}, {"type": "a", "text": "Gradle composite builds"}, {"type": "div", "text": "\n# Set with the path of your kotlin-native clone\nexport KONAN_REPO=$PWD/../kotlin-native\n\n# Run this once since it is costly, you can remove the `clean` task if not big changes were made from the last time you did this\npushd $KONAN_REPO && git pull && ./gradlew clean dependencies:update dist distPlatformLibs && popd\n\n#\u00a0In your project, you set have to the org.jetbrains.kotlin.native.home property, and include as composite the shared and gradle-plugin builds\n./gradlew check -Porg.jetbrains.kotlin.native.home=$KONAN_REPO/dist --include-build $KONAN_REPO/shared --include-build $KONAN_REPO/tools/kotlin-native-gradle-plugin\n\n"}, {"type": "pre", "text": "# Set with the path of your kotlin-native clone\nexport KONAN_REPO=$PWD/../kotlin-native\n\n# Run this once since it is costly, you can remove the `clean` task if not big changes were made from the last time you did this\npushd $KONAN_REPO && git pull && ./gradlew clean dependencies:update dist distPlatformLibs && popd\n\n#\u00a0In your project, you set have to the org.jetbrains.kotlin.native.home property, and include as composite the shared and gradle-plugin builds\n./gradlew check -Porg.jetbrains.kotlin.native.home=$KONAN_REPO/dist --include-build $KONAN_REPO/shared --include-build $KONAN_REPO/tools/kotlin-native-gradle-plugin\n"}, {"type": "code", "text": "# Set with the path of your kotlin-native clone\nexport KONAN_REPO=$PWD/../kotlin-native\n\n# Run this once since it is costly, you can remove the `clean` task if not big changes were made from the last time you did this\npushd $KONAN_REPO && git pull && ./gradlew clean dependencies:update dist distPlatformLibs && popd\n\n#\u00a0In your project, you set have to the org.jetbrains.kotlin.native.home property, and include as composite the shared and gradle-plugin builds\n./gradlew check -Porg.jetbrains.kotlin.native.home=$KONAN_REPO/dist --include-build $KONAN_REPO/shared --include-build $KONAN_REPO/tools/kotlin-native-gradle-plugin\n"}]