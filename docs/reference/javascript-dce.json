[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "JavaScript Dead Code Elimination (DCE)"}, {"type": "p", "text": "The Kotlin/JS Gradle plugin includes a dead code elimination (DCE) tool.\nDead code elimination is often also called tree shaking. It reduces the size or the resulting JavaScript code by\nremoving unused properties, functions, and classes."}, {"type": "a", "text": "dead code elimination"}, {"type": "em", "text": "dead code elimination"}, {"type": "em", "text": "DCE"}, {"type": "em", "text": "tree shaking"}, {"type": "p", "text": "Unused declarations can appear in cases like:"}, {"type": "ul", "text": "\nA function is inlined and never gets called directly (which happens always except for few situations).\nA module uses a shared library. Its parts that you don't use still get into the resulting bundle without DCE.\nFor example, the Kotlin standard library contains functions for manipulating lists, arrays, char sequences,\nadapters for DOM, and so on. Altogether, they comprise about 1.3 mb file. A simple \"Hello, world\" application only requires\nconsole routines, which is only few kilobytes for the entire file.\n"}, {"type": "li", "text": "A function is inlined and never gets called directly (which happens always except for few situations)."}, {"type": "li", "text": "A module uses a shared library. Its parts that you don't use still get into the resulting bundle without DCE.\nFor example, the Kotlin standard library contains functions for manipulating lists, arrays, char sequences,\nadapters for DOM, and so on. Altogether, they comprise about 1.3 mb file. A simple \"Hello, world\" application only requires\nconsole routines, which is only few kilobytes for the entire file."}, {"type": "p", "text": "Kotlin/JS Gradle plugin handles DCE automatically when you build a production bundle, for example, with browserProductionWebpack task.\nThe development bundling tasks don't include DCE."}, {"type": "code", "text": "browserProductionWebpack"}, {"type": "h2", "text": "Excluding declarations from DCE"}, {"type": "p", "text": "Sometimes you may need to keep a function or a class in the resulting JavaScript code even if you don't use it in your module,\nfor example, if you're going to use it in the client JavaScript code."}, {"type": "p", "text": "To keep certain declarations from elimination, add the dceTask block into the Gradle build script and\nlist the declarations as the arguments of the keep function. An argument must be the declaration's fully qualified name\nwith the module name as a prefix: moduleName.dot.separated.package.name.declarationName"}, {"type": "code", "text": "dceTask"}, {"type": "code", "text": "keep"}, {"type": "code", "text": "moduleName.dot.separated.package.name.declarationName"}, {"type": "div", "text": "\n\nkotlin.target.browser {\n    dceTask {\n        keep 'myKotlinJSModule.org.example.getName', 'myKotlinJSModule.org.example.User'\n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin.target.browser {\n    dceTask {\n        keep 'myKotlinJSModule.org.example.getName', 'myKotlinJSModule.org.example.User'\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin.target.browser {\n    dceTask {\n        keep 'myKotlinJSModule.org.example.getName', 'myKotlinJSModule.org.example.User'\n    }\n}\n"}, {"type": "code", "text": "kotlin.target.browser {\n    dceTask {\n        keep 'myKotlinJSModule.org.example.getName', 'myKotlinJSModule.org.example.User'\n    }\n}\n"}, {"type": "div", "text": "\n\nkotlin.target.browser {\n    dceTask {\n        keep(\"myKotlinJSModule.org.example.getName\", \"myKotlinJSModule.org.example.User\" )\n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin.target.browser {\n    dceTask {\n        keep(\"myKotlinJSModule.org.example.getName\", \"myKotlinJSModule.org.example.User\" )\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin.target.browser {\n    dceTask {\n        keep(\"myKotlinJSModule.org.example.getName\", \"myKotlinJSModule.org.example.User\" )\n    }\n}\n"}, {"type": "code", "text": "kotlin.target.browser {\n    dceTask {\n        keep(\"myKotlinJSModule.org.example.getName\", \"myKotlinJSModule.org.example.User\" )\n    }\n}\n"}, {"type": "p", "text": "Note that the names of functions with parameters are mangled\nin the generated JavaScript code. To keep such functions from elimination, use the mangled names in the keep arguments."}, {"type": "a", "text": "mangled"}, {"type": "code", "text": "keep"}, {"type": "h2", "text": "Known issue: DCE and ktor"}, {"type": "p", "text": "In Kotlin 1.3.72, there is a known issue \nof using ktor in Kotlin/JS projects. In some cases, you may get a type error like <something> is not a function \nthat comes from the io.ktor:ktor-client-js:1.3.0 or io.ktor:ktor-client-core:1.3.0 artifacts.\nTo avoid this issue, add the following DCE configuration:"}, {"type": "a", "text": "issue"}, {"type": "a", "text": "ktor"}, {"type": "code", "text": "<something> is not a function"}, {"type": "code", "text": "io.ktor:ktor-client-js:1.3.0"}, {"type": "code", "text": "io.ktor:ktor-client-core:1.3.0"}, {"type": "div", "text": "\n\nkotlin.target.browser {\n    dceTask {\n        keep 'ktor-ktor-io.\\$\\$importsForInline\\$\\$.ktor-ktor-io.io.ktor.utils.io'\n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin.target.browser {\n    dceTask {\n        keep 'ktor-ktor-io.\\$\\$importsForInline\\$\\$.ktor-ktor-io.io.ktor.utils.io'\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin.target.browser {\n    dceTask {\n        keep 'ktor-ktor-io.\\$\\$importsForInline\\$\\$.ktor-ktor-io.io.ktor.utils.io'\n    }\n}\n"}, {"type": "code", "text": "kotlin.target.browser {\n    dceTask {\n        keep 'ktor-ktor-io.\\$\\$importsForInline\\$\\$.ktor-ktor-io.io.ktor.utils.io'\n    }\n}\n"}, {"type": "div", "text": "\n\nkotlin.target.browser {\n    dceTask {\n        keep(\"ktor-ktor-io.\\$\\$importsForInline\\$\\$.ktor-ktor-io.io.ktor.utils.io\")\n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin.target.browser {\n    dceTask {\n        keep(\"ktor-ktor-io.\\$\\$importsForInline\\$\\$.ktor-ktor-io.io.ktor.utils.io\")\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin.target.browser {\n    dceTask {\n        keep(\"ktor-ktor-io.\\$\\$importsForInline\\$\\$.ktor-ktor-io.io.ktor.utils.io\")\n    }\n}\n"}, {"type": "code", "text": "kotlin.target.browser {\n    dceTask {\n        keep(\"ktor-ktor-io.\\$\\$importsForInline\\$\\$.ktor-ktor-io.io.ktor.utils.io\")\n    }\n}\n"}]