[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "div", "text": ""}, {"type": "div", "text": "\nGrammar\n\n\nDescription\nNotation\nThe notation used on this page corresponds to the ANTLR 4 notation with a few exceptions for better readability:\n\nomitted lexer rule actions and commands,\nomitted lexical modes.\n\nShort description:\n\noperator | denotes alternative,\noperator * denotes iteration (zero or more),\noperator + denotes iteration (one or more),\noperator ? denotes option (zero or one),\noperator .. denotes range (from left to right),\noperator ~ denotes negation.\n\nGrammar source files\nKotlin grammar source files (in ANTLR format) are located in the Kotlin specification repository:\n\nKotlinLexer.g4 describes lexical structure;\nUnicodeClasses.g4 describes the characters that can be used in identifiers (these rules are omitted on this page for better readability);\nKotlinParser.g4 describes syntax.\n\nThe grammar on this page corresponds to the grammar files above.\nSymbols and naming\nTerminal symbol names start with an uppercase letter, e.g. Identifier.\nNon-terminal symbol names start with a lowercase letter, e.g. kotlinFile.\nSymbol definitions may be documented with attributes:\n\nstart attribute denotes a symbol that represents the whole source file (see kotlinFile and script),\nhelper attribute denotes a lexer fragment rule (used only inside other terminal symbols).\n\nAlso for better readability some simplifications are made:\n\nlexer rules consisting of one string literal element are inlined to the use site,\nnew line tokens are excluded (new lines are not allowed in some places, see source grammar files for details).\n\nScope\nThe grammar corresponds to the latest stable version of the Kotlin compiler excluding lexer and parser rules for experimental features that are disabled by default.\n\n\n\n\nSyntax grammar\nGeneral\nRelevant pages: Packages\n\n\nstart\n\nkotlinFile\n\n\n\u00a0\u00a0:\u00a0shebangLine?\u00a0fileAnnotation*\u00a0packageHeader\u00a0importList\u00a0topLevelObject*\u00a0EOF\n\u00a0\u00a0; \n\n\nstart\n\nscript\n\n\n\u00a0\u00a0:\u00a0shebangLine?\u00a0fileAnnotation*\u00a0packageHeader\u00a0importList\u00a0(statement\u00a0semi)*\u00a0EOF\n\u00a0\u00a0; \n\n\n\nshebangLine\n\n                                                (used by\n                                                    kotlinFile,                                                     script)\n                                            \n\n\n\u00a0\u00a0:\u00a0ShebangLine\n\u00a0\u00a0; \n\n\n\nfileAnnotation\n\n                                                (used by\n                                                    kotlinFile,                                                     script)\n                                            \n\n\n\u00a0\u00a0:\u00a0('@'\u00a0|\u00a0AT_PRE_WS)\u00a0'file'\u00a0':'\u00a0(('['\u00a0unescapedAnnotation+\u00a0']')\u00a0|\u00a0unescapedAnnotation)\n\u00a0\u00a0; \n\n\nSee Packages\n\n\n\npackageHeader\n\n                                                (used by\n                                                    kotlinFile,                                                     script)\n                                            \n\n\n\u00a0\u00a0:\u00a0('package'\u00a0identifier\u00a0semi?)?\n\u00a0\u00a0; \n\n\nSee Imports\n\n\n\nimportList\n\n                                                (used by\n                                                    kotlinFile,                                                     script)\n                                            \n\n\n\u00a0\u00a0:\u00a0importHeader*\n\u00a0\u00a0; \n\n\n\nimportHeader\n\n                                                (used by\n                                                    importList)\n                                            \n\n\n\u00a0\u00a0:\u00a0'import'\u00a0identifier\u00a0(('.'\u00a0'*')\u00a0|\u00a0importAlias)?\u00a0semi?\n\u00a0\u00a0; \n\n\n\nimportAlias\n\n                                                (used by\n                                                    importHeader)\n                                            \n\n\n\u00a0\u00a0:\u00a0'as'\u00a0simpleIdentifier\n\u00a0\u00a0; \n\n\n\ntopLevelObject\n\n                                                (used by\n                                                    kotlinFile)\n                                            \n\n\n\u00a0\u00a0:\u00a0declaration\u00a0semis?\n\u00a0\u00a0; \n\n\n\ntypeAlias\n\n                                                (used by\n                                                    declaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0'typealias'\u00a0simpleIdentifier\u00a0typeParameters?\u00a0'='\u00a0type\n\u00a0\u00a0; \n\n\n\ndeclaration\n\n                                                (used by\n                                                    topLevelObject,                                                     classMemberDeclaration,                                                     statement)\n                                            \n\n\n\u00a0\u00a0:\u00a0classDeclaration\n\u00a0\u00a0|\u00a0objectDeclaration\n\u00a0\u00a0|\u00a0functionDeclaration\n\u00a0\u00a0|\u00a0propertyDeclaration\n\u00a0\u00a0|\u00a0typeAlias\n\u00a0\u00a0; \n\n\n\n\nClasses\nSee Classes and Inheritance\n\n\n\nclassDeclaration\n\n                                                (used by\n                                                    declaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0('class'\u00a0|\u00a0('fun'?\u00a0'interface'))\n\u00a0\u00a0\u00a0\u00a0simpleIdentifier\u00a0typeParameters?\n\u00a0\u00a0\u00a0\u00a0primaryConstructor?\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0delegationSpecifiers)?\n\u00a0\u00a0\u00a0\u00a0typeConstraints?\n\u00a0\u00a0\u00a0\u00a0(classBody\u00a0|\u00a0enumClassBody)?\n\u00a0\u00a0; \n\n\n\nprimaryConstructor\n\n                                                (used by\n                                                    classDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0(modifiers?\u00a0'constructor')?\u00a0classParameters\n\u00a0\u00a0; \n\n\n\nclassBody\n\n                                                (used by\n                                                    classDeclaration,                                                     companionObject,                                                     objectDeclaration,                                                     enumEntry,                                                     objectLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'{'\u00a0classMemberDeclarations\u00a0'}'\n\u00a0\u00a0; \n\n\n\nclassParameters\n\n                                                (used by\n                                                    primaryConstructor)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0(classParameter\u00a0(','\u00a0classParameter)*\u00a0','?)?\u00a0')'\n\u00a0\u00a0; \n\n\n\nclassParameter\n\n                                                (used by\n                                                    classParameters)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0('val'\u00a0|\u00a0'var')?\u00a0simpleIdentifier\u00a0':'\u00a0type\u00a0('='\u00a0expression)?\n\u00a0\u00a0; \n\n\n\ndelegationSpecifiers\n\n                                                (used by\n                                                    classDeclaration,                                                     companionObject,                                                     objectDeclaration,                                                     objectLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotatedDelegationSpecifier\u00a0(','\u00a0annotatedDelegationSpecifier)*\n\u00a0\u00a0; \n\n\n\ndelegationSpecifier\n\n                                                (used by\n                                                    annotatedDelegationSpecifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0constructorInvocation\n\u00a0\u00a0|\u00a0explicitDelegation\n\u00a0\u00a0|\u00a0userType\n\u00a0\u00a0|\u00a0functionType\n\u00a0\u00a0; \n\n\n\nconstructorInvocation\n\n                                                (used by\n                                                    delegationSpecifier,                                                     unescapedAnnotation)\n                                            \n\n\n\u00a0\u00a0:\u00a0userType\u00a0valueArguments\n\u00a0\u00a0; \n\n\n\nannotatedDelegationSpecifier\n\n                                                (used by\n                                                    delegationSpecifiers)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation*\u00a0delegationSpecifier\n\u00a0\u00a0; \n\n\n\nexplicitDelegation\n\n                                                (used by\n                                                    delegationSpecifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0(userType\u00a0|\u00a0functionType)\u00a0'by'\u00a0expression\n\u00a0\u00a0; \n\n\nSee Generic classes\n\n\n\ntypeParameters\n\n                                                (used by\n                                                    typeAlias,                                                     classDeclaration,                                                     functionDeclaration,                                                     propertyDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0'<'\u00a0typeParameter\u00a0(','\u00a0typeParameter)*\u00a0','?\u00a0'>'\n\u00a0\u00a0; \n\n\n\ntypeParameter\n\n                                                (used by\n                                                    typeParameters)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeParameterModifiers?\u00a0simpleIdentifier\u00a0(':'\u00a0type)?\n\u00a0\u00a0; \n\n\nSee Generic constraints\n\n\n\ntypeConstraints\n\n                                                (used by\n                                                    classDeclaration,                                                     functionDeclaration,                                                     propertyDeclaration,                                                     anonymousFunction)\n                                            \n\n\n\u00a0\u00a0:\u00a0'where'\u00a0typeConstraint\u00a0(','\u00a0typeConstraint)*\n\u00a0\u00a0; \n\n\n\ntypeConstraint\n\n                                                (used by\n                                                    typeConstraints)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation*\u00a0simpleIdentifier\u00a0':'\u00a0type\n\u00a0\u00a0; \n\n\n\n\nClass members\n\n\n\nclassMemberDeclarations\n\n                                                (used by\n                                                    classBody,                                                     enumClassBody)\n                                            \n\n\n\u00a0\u00a0:\u00a0(classMemberDeclaration\u00a0semis?)*\n\u00a0\u00a0; \n\n\n\nclassMemberDeclaration\n\n                                                (used by\n                                                    classMemberDeclarations)\n                                            \n\n\n\u00a0\u00a0:\u00a0declaration\n\u00a0\u00a0|\u00a0companionObject\n\u00a0\u00a0|\u00a0anonymousInitializer\n\u00a0\u00a0|\u00a0secondaryConstructor\n\u00a0\u00a0; \n\n\n\nanonymousInitializer\n\n                                                (used by\n                                                    classMemberDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0'init'\u00a0block\n\u00a0\u00a0; \n\n\n\ncompanionObject\n\n                                                (used by\n                                                    classMemberDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0'companion'\u00a0'object'\u00a0simpleIdentifier?\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0delegationSpecifiers)?\n\u00a0\u00a0\u00a0\u00a0classBody?\n\u00a0\u00a0; \n\n\n\nfunctionValueParameters\n\n                                                (used by\n                                                    functionDeclaration,                                                     secondaryConstructor)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0(functionValueParameter\u00a0(','\u00a0functionValueParameter)*\u00a0','?)?\u00a0')'\n\u00a0\u00a0; \n\n\n\nfunctionValueParameter\n\n                                                (used by\n                                                    functionValueParameters)\n                                            \n\n\n\u00a0\u00a0:\u00a0parameterModifiers?\u00a0parameter\u00a0('='\u00a0expression)?\n\u00a0\u00a0; \n\n\n\nfunctionDeclaration\n\n                                                (used by\n                                                    declaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0'fun'\u00a0typeParameters?\n\u00a0\u00a0\u00a0\u00a0(receiverType\u00a0'.')?\n\u00a0\u00a0\u00a0\u00a0simpleIdentifier\u00a0functionValueParameters\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0type)?\u00a0typeConstraints?\n\u00a0\u00a0\u00a0\u00a0functionBody?\n\u00a0\u00a0; \n\n\n\nfunctionBody\n\n                                                (used by\n                                                    functionDeclaration,                                                     getter,                                                     setter,                                                     anonymousFunction)\n                                            \n\n\n\u00a0\u00a0:\u00a0block\n\u00a0\u00a0|\u00a0'='\u00a0expression\n\u00a0\u00a0; \n\n\n\nvariableDeclaration\n\n                                                (used by\n                                                    multiVariableDeclaration,                                                     propertyDeclaration,                                                     forStatement,                                                     lambdaParameter,                                                     whenSubject)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation*\u00a0simpleIdentifier\u00a0(':'\u00a0type)?\n\u00a0\u00a0; \n\n\n\nmultiVariableDeclaration\n\n                                                (used by\n                                                    propertyDeclaration,                                                     forStatement,                                                     lambdaParameter)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0variableDeclaration\u00a0(','\u00a0variableDeclaration)*\u00a0','?\u00a0')'\n\u00a0\u00a0; \n\n\nSee Properties and Fields\n\n\n\npropertyDeclaration\n\n                                                (used by\n                                                    declaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0('val'\u00a0|\u00a0'var')\u00a0typeParameters?\n\u00a0\u00a0\u00a0\u00a0(receiverType\u00a0'.')?\n\u00a0\u00a0\u00a0\u00a0(multiVariableDeclaration\u00a0|\u00a0variableDeclaration)\n\u00a0\u00a0\u00a0\u00a0typeConstraints?\n\u00a0\u00a0\u00a0\u00a0(('='\u00a0expression)\u00a0|\u00a0propertyDelegate)?\u00a0';'?\n\u00a0\u00a0\u00a0\u00a0((getter?\u00a0(semi?\u00a0setter)?)\u00a0|\u00a0(setter?\u00a0(semi?\u00a0getter)?))\n\u00a0\u00a0; \n\n\n\npropertyDelegate\n\n                                                (used by\n                                                    propertyDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0'by'\u00a0expression\n\u00a0\u00a0; \n\n\n\ngetter\n\n                                                (used by\n                                                    propertyDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0'get'\n\u00a0\u00a0|\u00a0modifiers?\u00a0'get'\u00a0'('\u00a0')'\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0type)?\n\u00a0\u00a0\u00a0\u00a0functionBody\n\u00a0\u00a0; \n\n\n\nsetter\n\n                                                (used by\n                                                    propertyDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0'set'\n\u00a0\u00a0|\u00a0modifiers?\u00a0'set'\u00a0'('\u00a0parameterWithOptionalType\u00a0','?\u00a0')'\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0type)?\n\u00a0\u00a0\u00a0\u00a0functionBody\n\u00a0\u00a0; \n\n\n\nparametersWithOptionalType\n\n                                                (used by\n                                                    anonymousFunction)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\n\u00a0\u00a0\u00a0\u00a0(parameterWithOptionalType\u00a0(','\u00a0parameterWithOptionalType)*\u00a0','?)?\u00a0')'\n\u00a0\u00a0; \n\n\n\nparameterWithOptionalType\n\n                                                (used by\n                                                    setter,                                                     parametersWithOptionalType)\n                                            \n\n\n\u00a0\u00a0:\u00a0parameterModifiers?\u00a0simpleIdentifier\u00a0(':'\u00a0type)?\n\u00a0\u00a0; \n\n\n\nparameter\n\n                                                (used by\n                                                    functionValueParameter,                                                     functionTypeParameters)\n                                            \n\n\n\u00a0\u00a0:\u00a0simpleIdentifier\u00a0':'\u00a0type\n\u00a0\u00a0; \n\n\nSee Object expressions and Declarations\n\n\n\nobjectDeclaration\n\n                                                (used by\n                                                    declaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0'object'\u00a0simpleIdentifier\u00a0(':'\u00a0delegationSpecifiers)?\u00a0classBody?\n\u00a0\u00a0; \n\n\n\nsecondaryConstructor\n\n                                                (used by\n                                                    classMemberDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0'constructor'\u00a0functionValueParameters\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0constructorDelegationCall)?\u00a0block?\n\u00a0\u00a0; \n\n\n\nconstructorDelegationCall\n\n                                                (used by\n                                                    secondaryConstructor)\n                                            \n\n\n\u00a0\u00a0:\u00a0'this'\u00a0valueArguments\n\u00a0\u00a0|\u00a0'super'\u00a0valueArguments\n\u00a0\u00a0; \n\n\n\n\nEnum classes\nSee Enum classes\n\n\n\nenumClassBody\n\n                                                (used by\n                                                    classDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0'{'\u00a0enumEntries?\u00a0(';'\u00a0classMemberDeclarations)?\u00a0'}'\n\u00a0\u00a0; \n\n\n\nenumEntries\n\n                                                (used by\n                                                    enumClassBody)\n                                            \n\n\n\u00a0\u00a0:\u00a0enumEntry\u00a0(','\u00a0enumEntry)*\u00a0','?\n\u00a0\u00a0; \n\n\n\nenumEntry\n\n                                                (used by\n                                                    enumEntries)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0simpleIdentifier\u00a0valueArguments?\u00a0classBody?\n\u00a0\u00a0; \n\n\n\n\nTypes\nSee Types\n\n\n\ntype\n\n                                                (used by\n                                                    typeAlias,                                                     classParameter,                                                     typeParameter,                                                     typeConstraint,                                                     functionDeclaration,                                                     variableDeclaration,                                                     getter,                                                     setter,                                                     parameterWithOptionalType,                                                     parameter,                                                     typeProjection,                                                     functionType,                                                     functionTypeParameters,                                                     parenthesizedType,                                                     infixOperation,                                                     asExpression,                                                     lambdaParameter,                                                     anonymousFunction,                                                     superExpression,                                                     typeTest,                                                     catchBlock)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeModifiers?\u00a0(parenthesizedType\u00a0|\u00a0nullableType\u00a0|\u00a0typeReference\u00a0|\u00a0functionType)\n\u00a0\u00a0; \n\n\n\ntypeReference\n\n                                                (used by\n                                                    type,                                                     nullableType,                                                     receiverType)\n                                            \n\n\n\u00a0\u00a0:\u00a0userType\n\u00a0\u00a0|\u00a0'dynamic'\n\u00a0\u00a0; \n\n\n\nnullableType\n\n                                                (used by\n                                                    type,                                                     receiverType)\n                                            \n\n\n\u00a0\u00a0:\u00a0(typeReference\u00a0|\u00a0parenthesizedType)\u00a0quest+\n\u00a0\u00a0; \n\n\n\nquest\n\n                                                (used by\n                                                    nullableType)\n                                            \n\n\n\u00a0\u00a0:\u00a0'?'\n\u00a0\u00a0|\u00a0QUEST_WS\n\u00a0\u00a0; \n\n\n\nuserType\n\n                                                (used by\n                                                    delegationSpecifier,                                                     constructorInvocation,                                                     explicitDelegation,                                                     typeReference,                                                     parenthesizedUserType,                                                     unescapedAnnotation)\n                                            \n\n\n\u00a0\u00a0:\u00a0simpleUserType\u00a0('.'\u00a0simpleUserType)*\n\u00a0\u00a0; \n\n\n\nsimpleUserType\n\n                                                (used by\n                                                    userType)\n                                            \n\n\n\u00a0\u00a0:\u00a0simpleIdentifier\u00a0typeArguments?\n\u00a0\u00a0; \n\n\n\ntypeProjection\n\n                                                (used by\n                                                    typeArguments)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeProjectionModifiers?\u00a0type\n\u00a0\u00a0|\u00a0'*'\n\u00a0\u00a0; \n\n\n\ntypeProjectionModifiers\n\n                                                (used by\n                                                    typeProjection)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeProjectionModifier+\n\u00a0\u00a0; \n\n\n\ntypeProjectionModifier\n\n                                                (used by\n                                                    typeProjectionModifiers)\n                                            \n\n\n\u00a0\u00a0:\u00a0varianceModifier\n\u00a0\u00a0|\u00a0annotation\n\u00a0\u00a0; \n\n\n\nfunctionType\n\n                                                (used by\n                                                    delegationSpecifier,                                                     explicitDelegation,                                                     type)\n                                            \n\n\n\u00a0\u00a0:\u00a0(receiverType\u00a0'.')?\u00a0functionTypeParameters\u00a0'->'\u00a0type\n\u00a0\u00a0; \n\n\n\nfunctionTypeParameters\n\n                                                (used by\n                                                    functionType)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0(parameter\u00a0|\u00a0type)?\u00a0(','\u00a0(parameter\u00a0|\u00a0type))*\u00a0','?\u00a0')'\n\u00a0\u00a0; \n\n\n\nparenthesizedType\n\n                                                (used by\n                                                    type,                                                     nullableType,                                                     receiverType)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0type\u00a0')'\n\u00a0\u00a0; \n\n\n\nreceiverType\n\n                                                (used by\n                                                    functionDeclaration,                                                     propertyDeclaration,                                                     functionType,                                                     callableReference)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeModifiers?\u00a0(parenthesizedType\u00a0|\u00a0nullableType\u00a0|\u00a0typeReference)\n\u00a0\u00a0; \n\n\n\nparenthesizedUserType\n\n                                                (used by\n                                                    parenthesizedUserType)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0userType\u00a0')'\n\u00a0\u00a0|\u00a0'('\u00a0parenthesizedUserType\u00a0')'\n\u00a0\u00a0; \n\n\n\n\nStatements\n\n\n\nstatements\n\n                                                (used by\n                                                    block,                                                     lambdaLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0(statement\u00a0(semis\u00a0statement)*)?\u00a0semis?\n\u00a0\u00a0; \n\n\n\nstatement\n\n                                                (used by\n                                                    script,                                                     statements,                                                     controlStructureBody)\n                                            \n\n\n\u00a0\u00a0:\u00a0(label\u00a0|\u00a0annotation)*\u00a0(declaration\u00a0|\u00a0assignment\u00a0|\u00a0loopStatement\u00a0|\u00a0expression)\n\u00a0\u00a0; \n\n\nSee Returns and jumps\n\n\n\nlabel\n\n                                                (used by\n                                                    statement,                                                     unaryPrefix,                                                     annotatedLambda)\n                                            \n\n\n\u00a0\u00a0:\u00a0simpleIdentifier\u00a0('@'\u00a0|\u00a0AT_POST_WS)\n\u00a0\u00a0; \n\n\n\ncontrolStructureBody\n\n                                                (used by\n                                                    forStatement,                                                     whileStatement,                                                     doWhileStatement,                                                     ifExpression,                                                     whenEntry)\n                                            \n\n\n\u00a0\u00a0:\u00a0block\n\u00a0\u00a0|\u00a0statement\n\u00a0\u00a0; \n\n\n\nblock\n\n                                                (used by\n                                                    anonymousInitializer,                                                     functionBody,                                                     secondaryConstructor,                                                     controlStructureBody,                                                     tryExpression,                                                     catchBlock,                                                     finallyBlock)\n                                            \n\n\n\u00a0\u00a0:\u00a0'{'\u00a0statements\u00a0'}'\n\u00a0\u00a0; \n\n\n\nloopStatement\n\n                                                (used by\n                                                    statement)\n                                            \n\n\n\u00a0\u00a0:\u00a0forStatement\n\u00a0\u00a0|\u00a0whileStatement\n\u00a0\u00a0|\u00a0doWhileStatement\n\u00a0\u00a0; \n\n\n\nforStatement\n\n                                                (used by\n                                                    loopStatement)\n                                            \n\n\n\u00a0\u00a0:\u00a0'for'\n\u00a0\u00a0\u00a0\u00a0'('\u00a0annotation*\u00a0(variableDeclaration\u00a0|\u00a0multiVariableDeclaration)\u00a0'in'\u00a0expression\u00a0')'\n\u00a0\u00a0\u00a0\u00a0controlStructureBody?\n\u00a0\u00a0; \n\n\n\nwhileStatement\n\n                                                (used by\n                                                    loopStatement)\n                                            \n\n\n\u00a0\u00a0:\u00a0'while'\u00a0'('\u00a0expression\u00a0')'\u00a0controlStructureBody\n\u00a0\u00a0|\u00a0'while'\u00a0'('\u00a0expression\u00a0')'\u00a0';'\n\u00a0\u00a0; \n\n\n\ndoWhileStatement\n\n                                                (used by\n                                                    loopStatement)\n                                            \n\n\n\u00a0\u00a0:\u00a0'do'\u00a0controlStructureBody?\u00a0'while'\u00a0'('\u00a0expression\u00a0')'\n\u00a0\u00a0; \n\n\n\nassignment\n\n                                                (used by\n                                                    statement)\n                                            \n\n\n\u00a0\u00a0:\u00a0directlyAssignableExpression\u00a0'='\u00a0expression\n\u00a0\u00a0|\u00a0assignableExpression\u00a0assignmentAndOperator\u00a0expression\n\u00a0\u00a0; \n\n\n\nsemi\n\n                                                (used by\n                                                    script,                                                     packageHeader,                                                     importHeader,                                                     propertyDeclaration,                                                     whenEntry)\n                                            \n\n\n\u00a0\u00a0:\u00a0EOF\n\u00a0\u00a0; \n\n\n\nsemis\n\n                                                (used by\n                                                    topLevelObject,                                                     classMemberDeclarations,                                                     statements)\n                                            \n\n\n\u00a0\u00a0:\u00a0EOF\n\u00a0\u00a0; \n\n\n\n\nExpressions\n\n\n\nPrecedence\nTitle\nSymbols\n\n\n\n\nHighest\nPostfix\n++, --, ., ?., ?\n\n\n\u00a0\nPrefix\n-, +, ++, --, !, label\n\n\n\u00a0\nType RHS\n:, as, as?\n\n\n\u00a0\nMultiplicative\n*, /, %\n\n\n\u00a0\nAdditive\n+, -\n\n\n\u00a0\nRange\n..\n\n\n\u00a0\nInfix function\nsimpleIdentifier\n\n\n\u00a0\nElvis\n?:\n\n\n\u00a0\nNamed checks\nin, !in, is, !is\n\n\n\u00a0\nComparison\n<, >, <=, >=\n\n\n\u00a0\nEquality\n==, !==\n\n\n\u00a0\nConjunction\n&&\n\n\n\u00a0\nDisjunction\n||\n\n\n\u00a0\nSpread operator\n*\n\n\nLowest\nAssignment\n=, +=, -=, *=, /=, %=\n\n\n\n\n\n\nexpression\n\n                                                (used by\n                                                    classParameter,                                                     explicitDelegation,                                                     functionValueParameter,                                                     functionBody,                                                     propertyDeclaration,                                                     propertyDelegate,                                                     statement,                                                     forStatement,                                                     whileStatement,                                                     doWhileStatement,                                                     assignment,                                                     comparisonWithLiteralRightSide,                                                     indexingSuffix,                                                     valueArgument,                                                     parenthesizedExpression,                                                     collectionLiteral,                                                     lineStringExpression,                                                     multiLineStringExpression,                                                     ifExpression,                                                     whenSubject,                                                     whenCondition,                                                     rangeTest,                                                     jumpExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0disjunction\n\u00a0\u00a0; \n\n\n\ndisjunction\n\n                                                (used by\n                                                    expression)\n                                            \n\n\n\u00a0\u00a0:\u00a0conjunction\u00a0('||'\u00a0conjunction)*\n\u00a0\u00a0; \n\n\n\nconjunction\n\n                                                (used by\n                                                    disjunction)\n                                            \n\n\n\u00a0\u00a0:\u00a0equality\u00a0('&&'\u00a0equality)*\n\u00a0\u00a0; \n\n\n\nequality\n\n                                                (used by\n                                                    conjunction)\n                                            \n\n\n\u00a0\u00a0:\u00a0comparison\u00a0(equalityOperator\u00a0comparison)*\n\u00a0\u00a0; \n\n\n\ncomparison\n\n                                                (used by\n                                                    equality)\n                                            \n\n\n\u00a0\u00a0:\u00a0infixOperation\u00a0(comparisonOperator\u00a0infixOperation)?\n\u00a0\u00a0; \n\n\n\ninfixOperation\n\n                                                (used by\n                                                    comparison)\n                                            \n\n\n\u00a0\u00a0:\u00a0elvisExpression\u00a0((inOperator\u00a0elvisExpression)\u00a0|\u00a0(isOperator\u00a0type))*\n\u00a0\u00a0; \n\n\n\nelvisExpression\n\n                                                (used by\n                                                    infixOperation)\n                                            \n\n\n\u00a0\u00a0:\u00a0infixFunctionCall\u00a0(elvis\u00a0infixFunctionCall)*\n\u00a0\u00a0; \n\n\n\nelvis\n\n                                                (used by\n                                                    elvisExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'?'\u00a0':'\n\u00a0\u00a0; \n\n\n\ninfixFunctionCall\n\n                                                (used by\n                                                    elvisExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0rangeExpression\u00a0(simpleIdentifier\u00a0rangeExpression)*\n\u00a0\u00a0; \n\n\n\nrangeExpression\n\n                                                (used by\n                                                    infixFunctionCall)\n                                            \n\n\n\u00a0\u00a0:\u00a0additiveExpression\u00a0('..'\u00a0additiveExpression)*\n\u00a0\u00a0; \n\n\n\nadditiveExpression\n\n                                                (used by\n                                                    rangeExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0multiplicativeExpression\u00a0(additiveOperator\u00a0multiplicativeExpression)*\n\u00a0\u00a0; \n\n\n\nmultiplicativeExpression\n\n                                                (used by\n                                                    additiveExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0asExpression\u00a0(multiplicativeOperator\u00a0asExpression)*\n\u00a0\u00a0; \n\n\n\nasExpression\n\n                                                (used by\n                                                    multiplicativeExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0comparisonWithLiteralRightSide\u00a0(asOperator\u00a0type)?\n\u00a0\u00a0; \n\n\n\ncomparisonWithLiteralRightSide\n\n                                                (used by\n                                                    asExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0prefixUnaryExpression\n\u00a0\u00a0\u00a0\u00a0('<'\u00a0literalConstant\u00a0'>'\u00a0(expression\u00a0|\u00a0parenthesizedExpression))*\n\u00a0\u00a0; \n\n\n\nprefixUnaryExpression\n\n                                                (used by\n                                                    comparisonWithLiteralRightSide,                                                     assignableExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0unaryPrefix*\u00a0postfixUnaryExpression\n\u00a0\u00a0; \n\n\n\nunaryPrefix\n\n                                                (used by\n                                                    prefixUnaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation\n\u00a0\u00a0|\u00a0label\n\u00a0\u00a0|\u00a0prefixUnaryOperator\n\u00a0\u00a0; \n\n\n\npostfixUnaryExpression\n\n                                                (used by\n                                                    prefixUnaryExpression,                                                     directlyAssignableExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0primaryExpression\n\u00a0\u00a0|\u00a0primaryExpression\u00a0postfixUnarySuffix+\n\u00a0\u00a0; \n\n\n\npostfixUnarySuffix\n\n                                                (used by\n                                                    postfixUnaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0postfixUnaryOperator\n\u00a0\u00a0|\u00a0typeArguments\n\u00a0\u00a0|\u00a0callSuffix\n\u00a0\u00a0|\u00a0indexingSuffix\n\u00a0\u00a0|\u00a0navigationSuffix\n\u00a0\u00a0; \n\n\n\ndirectlyAssignableExpression\n\n                                                (used by\n                                                    assignment,                                                     parenthesizedDirectlyAssignableExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0postfixUnaryExpression\u00a0assignableSuffix\n\u00a0\u00a0|\u00a0simpleIdentifier\n\u00a0\u00a0|\u00a0parenthesizedDirectlyAssignableExpression\n\u00a0\u00a0; \n\n\n\nparenthesizedDirectlyAssignableExpression\n\n                                                (used by\n                                                    directlyAssignableExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0directlyAssignableExpression\u00a0')'\n\u00a0\u00a0; \n\n\n\nassignableExpression\n\n                                                (used by\n                                                    assignment,                                                     parenthesizedAssignableExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0prefixUnaryExpression\n\u00a0\u00a0|\u00a0parenthesizedAssignableExpression\n\u00a0\u00a0; \n\n\n\nparenthesizedAssignableExpression\n\n                                                (used by\n                                                    assignableExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0assignableExpression\u00a0')'\n\u00a0\u00a0; \n\n\n\nassignableSuffix\n\n                                                (used by\n                                                    directlyAssignableExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeArguments\n\u00a0\u00a0|\u00a0indexingSuffix\n\u00a0\u00a0|\u00a0navigationSuffix\n\u00a0\u00a0; \n\n\n\nindexingSuffix\n\n                                                (used by\n                                                    postfixUnarySuffix,                                                     assignableSuffix)\n                                            \n\n\n\u00a0\u00a0:\u00a0'['\u00a0expression\u00a0(','\u00a0expression)*\u00a0','?\u00a0']'\n\u00a0\u00a0; \n\n\n\nnavigationSuffix\n\n                                                (used by\n                                                    postfixUnarySuffix,                                                     assignableSuffix)\n                                            \n\n\n\u00a0\u00a0:\u00a0memberAccessOperator\u00a0(simpleIdentifier\u00a0|\u00a0parenthesizedExpression\u00a0|\u00a0'class')\n\u00a0\u00a0; \n\n\n\ncallSuffix\n\n                                                (used by\n                                                    postfixUnarySuffix)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeArguments?\u00a0valueArguments?\u00a0annotatedLambda\n\u00a0\u00a0|\u00a0typeArguments?\u00a0valueArguments\n\u00a0\u00a0; \n\n\n\nannotatedLambda\n\n                                                (used by\n                                                    callSuffix)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation*\u00a0label?\u00a0lambdaLiteral\n\u00a0\u00a0; \n\n\n\ntypeArguments\n\n                                                (used by\n                                                    simpleUserType,                                                     postfixUnarySuffix,                                                     assignableSuffix,                                                     callSuffix)\n                                            \n\n\n\u00a0\u00a0:\u00a0'<'\u00a0typeProjection\u00a0(','\u00a0typeProjection)*\u00a0','?\u00a0'>'\n\u00a0\u00a0; \n\n\n\nvalueArguments\n\n                                                (used by\n                                                    constructorInvocation,                                                     constructorDelegationCall,                                                     enumEntry,                                                     callSuffix)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0')'\n\u00a0\u00a0|\u00a0'('\u00a0valueArgument\u00a0(','\u00a0valueArgument)*\u00a0','?\u00a0')'\n\u00a0\u00a0; \n\n\n\nvalueArgument\n\n                                                (used by\n                                                    valueArguments)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation?\u00a0(simpleIdentifier\u00a0'=')?\u00a0'*'?\u00a0expression\n\u00a0\u00a0; \n\n\n\nprimaryExpression\n\n                                                (used by\n                                                    postfixUnaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0parenthesizedExpression\n\u00a0\u00a0|\u00a0simpleIdentifier\n\u00a0\u00a0|\u00a0literalConstant\n\u00a0\u00a0|\u00a0stringLiteral\n\u00a0\u00a0|\u00a0callableReference\n\u00a0\u00a0|\u00a0functionLiteral\n\u00a0\u00a0|\u00a0objectLiteral\n\u00a0\u00a0|\u00a0collectionLiteral\n\u00a0\u00a0|\u00a0thisExpression\n\u00a0\u00a0|\u00a0superExpression\n\u00a0\u00a0|\u00a0ifExpression\n\u00a0\u00a0|\u00a0whenExpression\n\u00a0\u00a0|\u00a0tryExpression\n\u00a0\u00a0|\u00a0jumpExpression\n\u00a0\u00a0; \n\n\n\nparenthesizedExpression\n\n                                                (used by\n                                                    comparisonWithLiteralRightSide,                                                     navigationSuffix,                                                     primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0expression\u00a0')'\n\u00a0\u00a0; \n\n\n\ncollectionLiteral\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'['\u00a0expression\u00a0(','\u00a0expression)*\u00a0','?\u00a0']'\n\u00a0\u00a0|\u00a0'['\u00a0']'\n\u00a0\u00a0; \n\n\n\nliteralConstant\n\n                                                (used by\n                                                    comparisonWithLiteralRightSide,                                                     primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0BooleanLiteral\n\u00a0\u00a0|\u00a0IntegerLiteral\n\u00a0\u00a0|\u00a0HexLiteral\n\u00a0\u00a0|\u00a0BinLiteral\n\u00a0\u00a0|\u00a0CharacterLiteral\n\u00a0\u00a0|\u00a0RealLiteral\n\u00a0\u00a0|\u00a0'null'\n\u00a0\u00a0|\u00a0LongLiteral\n\u00a0\u00a0|\u00a0UnsignedLiteral\n\u00a0\u00a0; \n\n\n\nstringLiteral\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0lineStringLiteral\n\u00a0\u00a0|\u00a0multiLineStringLiteral\n\u00a0\u00a0; \n\n\n\nlineStringLiteral\n\n                                                (used by\n                                                    stringLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'\"'\u00a0(lineStringContent\u00a0|\u00a0lineStringExpression)*\u00a0'\"'\n\u00a0\u00a0; \n\n\n\nmultiLineStringLiteral\n\n                                                (used by\n                                                    stringLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'\"\"\"'\u00a0(multiLineStringContent\u00a0|\u00a0multiLineStringExpression\u00a0|\u00a0'\"')*\n\u00a0\u00a0\u00a0\u00a0TRIPLE_QUOTE_CLOSE\n\u00a0\u00a0; \n\n\n\nlineStringContent\n\n                                                (used by\n                                                    lineStringLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0LineStrText\n\u00a0\u00a0|\u00a0LineStrEscapedChar\n\u00a0\u00a0|\u00a0LineStrRef\n\u00a0\u00a0; \n\n\n\nlineStringExpression\n\n                                                (used by\n                                                    lineStringLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'${'\u00a0expression\u00a0'}'\n\u00a0\u00a0; \n\n\n\nmultiLineStringContent\n\n                                                (used by\n                                                    multiLineStringLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0MultiLineStrText\n\u00a0\u00a0|\u00a0'\"'\n\u00a0\u00a0|\u00a0MultiLineStrRef\n\u00a0\u00a0; \n\n\n\nmultiLineStringExpression\n\n                                                (used by\n                                                    multiLineStringLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'${'\u00a0expression\u00a0'}'\n\u00a0\u00a0; \n\n\n\nlambdaLiteral\n\n                                                (used by\n                                                    annotatedLambda,                                                     functionLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'{'\u00a0statements\u00a0'}'\n\u00a0\u00a0|\u00a0'{'\u00a0lambdaParameters?\u00a0'->'\u00a0statements\u00a0'}'\n\u00a0\u00a0; \n\n\n\nlambdaParameters\n\n                                                (used by\n                                                    lambdaLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0lambdaParameter\u00a0(','\u00a0lambdaParameter)*\u00a0','?\n\u00a0\u00a0; \n\n\n\nlambdaParameter\n\n                                                (used by\n                                                    lambdaParameters)\n                                            \n\n\n\u00a0\u00a0:\u00a0variableDeclaration\n\u00a0\u00a0|\u00a0multiVariableDeclaration\u00a0(':'\u00a0type)?\n\u00a0\u00a0; \n\n\n\nanonymousFunction\n\n                                                (used by\n                                                    functionLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'fun'\u00a0(type\u00a0'.')?\u00a0parametersWithOptionalType\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0type)?\u00a0typeConstraints?\n\u00a0\u00a0\u00a0\u00a0functionBody?\n\u00a0\u00a0; \n\n\n\nfunctionLiteral\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0lambdaLiteral\n\u00a0\u00a0|\u00a0anonymousFunction\n\u00a0\u00a0; \n\n\n\nobjectLiteral\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'object'\u00a0':'\u00a0delegationSpecifiers\u00a0classBody\n\u00a0\u00a0|\u00a0'object'\u00a0classBody\n\u00a0\u00a0; \n\n\n\nthisExpression\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'this'\n\u00a0\u00a0|\u00a0THIS_AT\n\u00a0\u00a0; \n\n\n\nsuperExpression\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'super'\u00a0('<'\u00a0type\u00a0'>')?\u00a0('@'\u00a0simpleIdentifier)?\n\u00a0\u00a0|\u00a0SUPER_AT\n\u00a0\u00a0; \n\n\n\nifExpression\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'if'\u00a0'('\u00a0expression\u00a0')'\n\u00a0\u00a0\u00a0\u00a0(controlStructureBody\u00a0|\u00a0';')\n\u00a0\u00a0|\u00a0'if'\u00a0'('\u00a0expression\u00a0')'\n\u00a0\u00a0\u00a0\u00a0controlStructureBody?\u00a0';'?\u00a0'else'\u00a0(controlStructureBody\u00a0|\u00a0';')\n\u00a0\u00a0; \n\n\n\nwhenSubject\n\n                                                (used by\n                                                    whenExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0(annotation*\u00a0'val'\u00a0variableDeclaration\u00a0'=')?\u00a0expression\u00a0')'\n\u00a0\u00a0; \n\n\n\nwhenExpression\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'when'\u00a0whenSubject?\u00a0'{'\u00a0whenEntry*\u00a0'}'\n\u00a0\u00a0; \n\n\n\nwhenEntry\n\n                                                (used by\n                                                    whenExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0whenCondition\u00a0(','\u00a0whenCondition)*\u00a0','?\u00a0'->'\u00a0controlStructureBody\u00a0semi?\n\u00a0\u00a0|\u00a0'else'\u00a0'->'\u00a0controlStructureBody\u00a0semi?\n\u00a0\u00a0; \n\n\n\nwhenCondition\n\n                                                (used by\n                                                    whenEntry)\n                                            \n\n\n\u00a0\u00a0:\u00a0expression\n\u00a0\u00a0|\u00a0rangeTest\n\u00a0\u00a0|\u00a0typeTest\n\u00a0\u00a0; \n\n\n\nrangeTest\n\n                                                (used by\n                                                    whenCondition)\n                                            \n\n\n\u00a0\u00a0:\u00a0inOperator\u00a0expression\n\u00a0\u00a0; \n\n\n\ntypeTest\n\n                                                (used by\n                                                    whenCondition)\n                                            \n\n\n\u00a0\u00a0:\u00a0isOperator\u00a0type\n\u00a0\u00a0; \n\n\n\ntryExpression\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'try'\u00a0block\u00a0((catchBlock+\u00a0finallyBlock?)\u00a0|\u00a0finallyBlock)\n\u00a0\u00a0; \n\n\n\ncatchBlock\n\n                                                (used by\n                                                    tryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'catch'\u00a0'('\u00a0annotation*\u00a0simpleIdentifier\u00a0':'\u00a0type\u00a0','?\u00a0')'\u00a0block\n\u00a0\u00a0; \n\n\n\nfinallyBlock\n\n                                                (used by\n                                                    tryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'finally'\u00a0block\n\u00a0\u00a0; \n\n\n\njumpExpression\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'throw'\u00a0expression\n\u00a0\u00a0|\u00a0('return'\u00a0|\u00a0RETURN_AT)\u00a0expression?\n\u00a0\u00a0|\u00a0'continue'\n\u00a0\u00a0|\u00a0CONTINUE_AT\n\u00a0\u00a0|\u00a0'break'\n\u00a0\u00a0|\u00a0BREAK_AT\n\u00a0\u00a0; \n\n\n\ncallableReference\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0(receiverType?\u00a0'::'\u00a0(simpleIdentifier\u00a0|\u00a0'class'))\n\u00a0\u00a0; \n\n\n\nassignmentAndOperator\n\n                                                (used by\n                                                    assignment)\n                                            \n\n\n\u00a0\u00a0:\u00a0'+='\n\u00a0\u00a0|\u00a0'-='\n\u00a0\u00a0|\u00a0'*='\n\u00a0\u00a0|\u00a0'/='\n\u00a0\u00a0|\u00a0'%='\n\u00a0\u00a0; \n\n\n\nequalityOperator\n\n                                                (used by\n                                                    equality)\n                                            \n\n\n\u00a0\u00a0:\u00a0'!='\n\u00a0\u00a0|\u00a0'!=='\n\u00a0\u00a0|\u00a0'=='\n\u00a0\u00a0|\u00a0'==='\n\u00a0\u00a0; \n\n\n\ncomparisonOperator\n\n                                                (used by\n                                                    comparison)\n                                            \n\n\n\u00a0\u00a0:\u00a0'<'\n\u00a0\u00a0|\u00a0'>'\n\u00a0\u00a0|\u00a0'<='\n\u00a0\u00a0|\u00a0'>='\n\u00a0\u00a0; \n\n\n\ninOperator\n\n                                                (used by\n                                                    infixOperation,                                                     rangeTest)\n                                            \n\n\n\u00a0\u00a0:\u00a0'in'\n\u00a0\u00a0|\u00a0NOT_IN\n\u00a0\u00a0; \n\n\n\nisOperator\n\n                                                (used by\n                                                    infixOperation,                                                     typeTest)\n                                            \n\n\n\u00a0\u00a0:\u00a0'is'\n\u00a0\u00a0|\u00a0NOT_IS\n\u00a0\u00a0; \n\n\n\nadditiveOperator\n\n                                                (used by\n                                                    additiveExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'+'\n\u00a0\u00a0|\u00a0'-'\n\u00a0\u00a0; \n\n\n\nmultiplicativeOperator\n\n                                                (used by\n                                                    multiplicativeExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'*'\n\u00a0\u00a0|\u00a0'/'\n\u00a0\u00a0|\u00a0'%'\n\u00a0\u00a0; \n\n\n\nasOperator\n\n                                                (used by\n                                                    asExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'as'\n\u00a0\u00a0|\u00a0'as?'\n\u00a0\u00a0; \n\n\n\nprefixUnaryOperator\n\n                                                (used by\n                                                    unaryPrefix)\n                                            \n\n\n\u00a0\u00a0:\u00a0'++'\n\u00a0\u00a0|\u00a0'--'\n\u00a0\u00a0|\u00a0'-'\n\u00a0\u00a0|\u00a0'+'\n\u00a0\u00a0|\u00a0excl\n\u00a0\u00a0; \n\n\n\npostfixUnaryOperator\n\n                                                (used by\n                                                    postfixUnarySuffix)\n                                            \n\n\n\u00a0\u00a0:\u00a0'++'\n\u00a0\u00a0|\u00a0'--'\n\u00a0\u00a0|\u00a0'!'\u00a0excl\n\u00a0\u00a0; \n\n\n\nexcl\n\n                                                (used by\n                                                    prefixUnaryOperator,                                                     postfixUnaryOperator)\n                                            \n\n\n\u00a0\u00a0:\u00a0'!'\n\u00a0\u00a0|\u00a0EXCL_WS\n\u00a0\u00a0; \n\n\n\nmemberAccessOperator\n\n                                                (used by\n                                                    navigationSuffix)\n                                            \n\n\n\u00a0\u00a0:\u00a0'.'\n\u00a0\u00a0|\u00a0safeNav\n\u00a0\u00a0|\u00a0'::'\n\u00a0\u00a0; \n\n\n\nsafeNav\n\n                                                (used by\n                                                    memberAccessOperator)\n                                            \n\n\n\u00a0\u00a0:\u00a0'?'\u00a0'.'\n\u00a0\u00a0; \n\n\n\n\nModifiers\n\n\n\nmodifiers\n\n                                                (used by\n                                                    typeAlias,                                                     classDeclaration,                                                     primaryConstructor,                                                     classParameter,                                                     companionObject,                                                     functionDeclaration,                                                     propertyDeclaration,                                                     getter,                                                     setter,                                                     objectDeclaration,                                                     secondaryConstructor,                                                     enumEntry)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation\n\u00a0\u00a0|\u00a0modifier+\n\u00a0\u00a0; \n\n\n\nparameterModifiers\n\n                                                (used by\n                                                    functionValueParameter,                                                     parameterWithOptionalType)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation\n\u00a0\u00a0|\u00a0parameterModifier+\n\u00a0\u00a0; \n\n\n\nmodifier\n\n                                                (used by\n                                                    modifiers)\n                                            \n\n\n\u00a0\u00a0:\u00a0classModifier\n\u00a0\u00a0|\u00a0memberModifier\n\u00a0\u00a0|\u00a0visibilityModifier\n\u00a0\u00a0|\u00a0functionModifier\n\u00a0\u00a0|\u00a0propertyModifier\n\u00a0\u00a0|\u00a0inheritanceModifier\n\u00a0\u00a0|\u00a0parameterModifier\n\u00a0\u00a0|\u00a0platformModifier\n\u00a0\u00a0; \n\n\n\ntypeModifiers\n\n                                                (used by\n                                                    type,                                                     receiverType)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeModifier+\n\u00a0\u00a0; \n\n\n\ntypeModifier\n\n                                                (used by\n                                                    typeModifiers)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation\n\u00a0\u00a0|\u00a0'suspend'\n\u00a0\u00a0; \n\n\n\nclassModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'enum'\n\u00a0\u00a0|\u00a0'sealed'\n\u00a0\u00a0|\u00a0'annotation'\n\u00a0\u00a0|\u00a0'data'\n\u00a0\u00a0|\u00a0'inner'\n\u00a0\u00a0; \n\n\n\nmemberModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'override'\n\u00a0\u00a0|\u00a0'lateinit'\n\u00a0\u00a0; \n\n\n\nvisibilityModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'public'\n\u00a0\u00a0|\u00a0'private'\n\u00a0\u00a0|\u00a0'internal'\n\u00a0\u00a0|\u00a0'protected'\n\u00a0\u00a0; \n\n\n\nvarianceModifier\n\n                                                (used by\n                                                    typeProjectionModifier,                                                     typeParameterModifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'in'\n\u00a0\u00a0|\u00a0'out'\n\u00a0\u00a0; \n\n\n\ntypeParameterModifiers\n\n                                                (used by\n                                                    typeParameter)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeParameterModifier+\n\u00a0\u00a0; \n\n\n\ntypeParameterModifier\n\n                                                (used by\n                                                    typeParameterModifiers)\n                                            \n\n\n\u00a0\u00a0:\u00a0reificationModifier\n\u00a0\u00a0|\u00a0varianceModifier\n\u00a0\u00a0|\u00a0annotation\n\u00a0\u00a0; \n\n\n\nfunctionModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'tailrec'\n\u00a0\u00a0|\u00a0'operator'\n\u00a0\u00a0|\u00a0'infix'\n\u00a0\u00a0|\u00a0'inline'\n\u00a0\u00a0|\u00a0'external'\n\u00a0\u00a0|\u00a0'suspend'\n\u00a0\u00a0; \n\n\n\npropertyModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'const'\n\u00a0\u00a0; \n\n\n\ninheritanceModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'abstract'\n\u00a0\u00a0|\u00a0'final'\n\u00a0\u00a0|\u00a0'open'\n\u00a0\u00a0; \n\n\n\nparameterModifier\n\n                                                (used by\n                                                    parameterModifiers,                                                     modifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'vararg'\n\u00a0\u00a0|\u00a0'noinline'\n\u00a0\u00a0|\u00a0'crossinline'\n\u00a0\u00a0; \n\n\n\nreificationModifier\n\n                                                (used by\n                                                    typeParameterModifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'reified'\n\u00a0\u00a0; \n\n\n\nplatformModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'expect'\n\u00a0\u00a0|\u00a0'actual'\n\u00a0\u00a0; \n\n\n\n\nAnnotations\n\n\n\nannotation\n\n                                                (used by\n                                                    annotatedDelegationSpecifier,                                                     typeConstraint,                                                     variableDeclaration,                                                     typeProjectionModifier,                                                     statement,                                                     forStatement,                                                     unaryPrefix,                                                     annotatedLambda,                                                     valueArgument,                                                     whenSubject,                                                     catchBlock,                                                     modifiers,                                                     parameterModifiers,                                                     typeModifier,                                                     typeParameterModifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0singleAnnotation\n\u00a0\u00a0|\u00a0multiAnnotation\n\u00a0\u00a0; \n\n\n\nsingleAnnotation\n\n                                                (used by\n                                                    annotation)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotationUseSiteTarget\u00a0unescapedAnnotation\n\u00a0\u00a0|\u00a0('@'\u00a0|\u00a0AT_PRE_WS)\u00a0unescapedAnnotation\n\u00a0\u00a0; \n\n\n\nmultiAnnotation\n\n                                                (used by\n                                                    annotation)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotationUseSiteTarget\u00a0'['\u00a0unescapedAnnotation+\u00a0']'\n\u00a0\u00a0|\u00a0('@'\u00a0|\u00a0AT_PRE_WS)\u00a0'['\u00a0unescapedAnnotation+\u00a0']'\n\u00a0\u00a0; \n\n\n\nannotationUseSiteTarget\n\n                                                (used by\n                                                    singleAnnotation,                                                     multiAnnotation)\n                                            \n\n\n\u00a0\u00a0:\u00a0('@'\u00a0|\u00a0AT_PRE_WS)\n\u00a0\u00a0\u00a0\u00a0('field'\u00a0|\u00a0'property'\u00a0|\u00a0'get'\u00a0|\u00a0'set'\u00a0|\u00a0'receiver'\u00a0|\u00a0'param'\u00a0|\u00a0'setparam'\u00a0|\u00a0'delegate')\u00a0':'\n\u00a0\u00a0; \n\n\n\nunescapedAnnotation\n\n                                                (used by\n                                                    fileAnnotation,                                                     singleAnnotation,                                                     multiAnnotation)\n                                            \n\n\n\u00a0\u00a0:\u00a0constructorInvocation\n\u00a0\u00a0|\u00a0userType\n\u00a0\u00a0; \n\n\n\n\nIdentifiers\n\n\n\nsimpleIdentifier\n\n                                                (used by\n                                                    importAlias,                                                     typeAlias,                                                     classDeclaration,                                                     classParameter,                                                     typeParameter,                                                     typeConstraint,                                                     companionObject,                                                     functionDeclaration,                                                     variableDeclaration,                                                     parameterWithOptionalType,                                                     parameter,                                                     objectDeclaration,                                                     enumEntry,                                                     simpleUserType,                                                     label,                                                     infixFunctionCall,                                                     directlyAssignableExpression,                                                     navigationSuffix,                                                     valueArgument,                                                     primaryExpression,                                                     superExpression,                                                     catchBlock,                                                     callableReference,                                                     identifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0Identifier\n\u00a0\u00a0|\u00a0'abstract'\n\u00a0\u00a0|\u00a0'annotation'\n\u00a0\u00a0|\u00a0'by'\n\u00a0\u00a0|\u00a0'catch'\n\u00a0\u00a0|\u00a0'companion'\n\u00a0\u00a0|\u00a0'constructor'\n\u00a0\u00a0|\u00a0'crossinline'\n\u00a0\u00a0|\u00a0'data'\n\u00a0\u00a0|\u00a0'dynamic'\n\u00a0\u00a0|\u00a0'enum'\n\u00a0\u00a0|\u00a0'external'\n\u00a0\u00a0|\u00a0'final'\n\u00a0\u00a0|\u00a0'finally'\n\u00a0\u00a0|\u00a0'get'\n\u00a0\u00a0|\u00a0'import'\n\u00a0\u00a0|\u00a0'infix'\n\u00a0\u00a0|\u00a0'init'\n\u00a0\u00a0|\u00a0'inline'\n\u00a0\u00a0|\u00a0'inner'\n\u00a0\u00a0|\u00a0'internal'\n\u00a0\u00a0|\u00a0'lateinit'\n\u00a0\u00a0|\u00a0'noinline'\n\u00a0\u00a0|\u00a0'open'\n\u00a0\u00a0|\u00a0'operator'\n\u00a0\u00a0|\u00a0'out'\n\u00a0\u00a0|\u00a0'override'\n\u00a0\u00a0|\u00a0'private'\n\u00a0\u00a0|\u00a0'protected'\n\u00a0\u00a0|\u00a0'public'\n\u00a0\u00a0|\u00a0'reified'\n\u00a0\u00a0|\u00a0'sealed'\n\u00a0\u00a0|\u00a0'tailrec'\n\u00a0\u00a0|\u00a0'set'\n\u00a0\u00a0|\u00a0'vararg'\n\u00a0\u00a0|\u00a0'where'\n\u00a0\u00a0|\u00a0'field'\n\u00a0\u00a0|\u00a0'property'\n\u00a0\u00a0|\u00a0'receiver'\n\u00a0\u00a0|\u00a0'param'\n\u00a0\u00a0|\u00a0'setparam'\n\u00a0\u00a0|\u00a0'delegate'\n\u00a0\u00a0|\u00a0'file'\n\u00a0\u00a0|\u00a0'expect'\n\u00a0\u00a0|\u00a0'actual'\n\u00a0\u00a0|\u00a0'const'\n\u00a0\u00a0|\u00a0'suspend'\n\u00a0\u00a0; \n\n\n\nidentifier\n\n                                                (used by\n                                                    packageHeader,                                                     importHeader)\n                                            \n\n\n\u00a0\u00a0:\u00a0simpleIdentifier\u00a0('.'\u00a0simpleIdentifier)*\n\u00a0\u00a0; \n\n\n\n\nLexical grammar\nGeneral\n\n\n\nShebangLine\n\n                                                (used by\n                                                    shebangLine)\n                                            \n\n\n\u00a0\u00a0:\u00a0'#!'\u00a0~[\\r\\n]*\n\u00a0\u00a0; \n\n\n\nDelimitedComment\n\n                                                (used by\n                                                    DelimitedComment,                                                     Hidden)\n                                            \n\n\n\u00a0\u00a0:\u00a0('/*'\u00a0(DelimitedComment\u00a0|\u00a0.)*?\u00a0'*/')\u00a0\n\u00a0\u00a0; \n\n\n\nLineComment\n\n                                                (used by\n                                                    Hidden)\n                                            \n\n\n\u00a0\u00a0:\u00a0('//'\u00a0~[\\r\\n]*)\u00a0\n\u00a0\u00a0; \n\n\n\nWS\n\n                                                (used by\n                                                    Hidden)\n                                            \n\n\n\u00a0\u00a0:\u00a0[\\u0020\\u0009\\u000C]\u00a0\n\u00a0\u00a0; \n\n\nhelper\n\nHidden\n\n                                                (used by\n                                                    EXCL_WS,                                                     AT_POST_WS,                                                     AT_PRE_WS,                                                     AT_BOTH_WS,                                                     QUEST_WS,                                                     NOT_IS,                                                     NOT_IN)\n                                            \n\n\n\u00a0\u00a0:\u00a0DelimitedComment\n\u00a0\u00a0|\u00a0LineComment\n\u00a0\u00a0|\u00a0WS\n\u00a0\u00a0; \n\n\n\n\nSeparators and operations\n\n\n\nRESERVED\n\n\n\u00a0\u00a0:\u00a0'...'\n\u00a0\u00a0; \n\n\n\nEXCL_WS\n\n                                                (used by\n                                                    excl)\n                                            \n\n\n\u00a0\u00a0:\u00a0'!'\u00a0Hidden\n\u00a0\u00a0; \n\n\n\nDOUBLE_ARROW\n\n\n\u00a0\u00a0:\u00a0'=>'\n\u00a0\u00a0; \n\n\n\nDOUBLE_SEMICOLON\n\n\n\u00a0\u00a0:\u00a0';;'\n\u00a0\u00a0; \n\n\n\nHASH\n\n\n\u00a0\u00a0:\u00a0'#'\n\u00a0\u00a0; \n\n\n\nAT_POST_WS\n\n                                                (used by\n                                                    label)\n                                            \n\n\n\u00a0\u00a0:\u00a0'@'\u00a0Hidden\n\u00a0\u00a0; \n\n\n\nAT_PRE_WS\n\n                                                (used by\n                                                    fileAnnotation,                                                     singleAnnotation,                                                     multiAnnotation,                                                     annotationUseSiteTarget)\n                                            \n\n\n\u00a0\u00a0:\u00a0Hidden\u00a0'@'\n\u00a0\u00a0; \n\n\n\nAT_BOTH_WS\n\n\n\u00a0\u00a0:\u00a0Hidden\u00a0'@'\u00a0Hidden\n\u00a0\u00a0; \n\n\n\nQUEST_WS\n\n                                                (used by\n                                                    quest)\n                                            \n\n\n\u00a0\u00a0:\u00a0'?'\u00a0Hidden\n\u00a0\u00a0; \n\n\n\nSINGLE_QUOTE\n\n\n\u00a0\u00a0:\u00a0'\\''\n\u00a0\u00a0; \n\n\n\n\nKeywords\n\n\n\nRETURN_AT\n\n                                                (used by\n                                                    jumpExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'return@'\u00a0Identifier\n\u00a0\u00a0; \n\n\n\nCONTINUE_AT\n\n                                                (used by\n                                                    jumpExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'continue@'\u00a0Identifier\n\u00a0\u00a0; \n\n\n\nBREAK_AT\n\n                                                (used by\n                                                    jumpExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'break@'\u00a0Identifier\n\u00a0\u00a0; \n\n\n\nTHIS_AT\n\n                                                (used by\n                                                    thisExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'this@'\u00a0Identifier\n\u00a0\u00a0; \n\n\n\nSUPER_AT\n\n                                                (used by\n                                                    superExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'super@'\u00a0Identifier\n\u00a0\u00a0; \n\n\n\nTYPEOF\n\n\n\u00a0\u00a0:\u00a0'typeof'\n\u00a0\u00a0; \n\n\n\nNOT_IS\n\n                                                (used by\n                                                    isOperator)\n                                            \n\n\n\u00a0\u00a0:\u00a0'!is'\u00a0Hidden\n\u00a0\u00a0; \n\n\n\nNOT_IN\n\n                                                (used by\n                                                    inOperator)\n                                            \n\n\n\u00a0\u00a0:\u00a0'!in'\u00a0Hidden\n\u00a0\u00a0; \n\n\n\n\n\n\nLiterals\n\n\nhelper\n\nDecDigit\n\n                                                (used by\n                                                    DecDigitOrSeparator,                                                     DecDigits,                                                     IntegerLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'0'..'9'\n\u00a0\u00a0; \n\n\nhelper\n\nDecDigitNoZero\n\n                                                (used by\n                                                    IntegerLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'1'..'9'\n\u00a0\u00a0; \n\n\nhelper\n\nDecDigitOrSeparator\n\n                                                (used by\n                                                    DecDigits,                                                     IntegerLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0DecDigit\n\u00a0\u00a0|\u00a0'_'\n\u00a0\u00a0; \n\n\nhelper\n\nDecDigits\n\n                                                (used by\n                                                    DoubleExponent,                                                     FloatLiteral,                                                     DoubleLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0DecDigit\u00a0DecDigitOrSeparator*\u00a0DecDigit\n\u00a0\u00a0|\u00a0DecDigit\n\u00a0\u00a0; \n\n\nhelper\n\nDoubleExponent\n\n                                                (used by\n                                                    DoubleLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0[eE]\u00a0[+-]?\u00a0DecDigits\n\u00a0\u00a0; \n\n\n\nRealLiteral\n\n                                                (used by\n                                                    literalConstant)\n                                            \n\n\n\u00a0\u00a0:\u00a0FloatLiteral\n\u00a0\u00a0|\u00a0DoubleLiteral\n\u00a0\u00a0; \n\n\n\nFloatLiteral\n\n                                                (used by\n                                                    RealLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0DoubleLiteral\u00a0[fF]\n\u00a0\u00a0|\u00a0DecDigits\u00a0[fF]\n\u00a0\u00a0; \n\n\n\nDoubleLiteral\n\n                                                (used by\n                                                    RealLiteral,                                                     FloatLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0DecDigits?\u00a0'.'\u00a0DecDigits\u00a0DoubleExponent?\n\u00a0\u00a0|\u00a0DecDigits\u00a0DoubleExponent\n\u00a0\u00a0; \n\n\n\nIntegerLiteral\n\n                                                (used by\n                                                    literalConstant,                                                     UnsignedLiteral,                                                     LongLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0DecDigitNoZero\u00a0DecDigitOrSeparator*\u00a0DecDigit\n\u00a0\u00a0|\u00a0DecDigit\n\u00a0\u00a0; \n\n\nhelper\n\nHexDigit\n\n                                                (used by\n                                                    HexDigitOrSeparator,                                                     HexLiteral,                                                     UniCharacterLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0[0-9a-fA-F]\n\u00a0\u00a0; \n\n\nhelper\n\nHexDigitOrSeparator\n\n                                                (used by\n                                                    HexLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0HexDigit\n\u00a0\u00a0|\u00a0'_'\n\u00a0\u00a0; \n\n\n\nHexLiteral\n\n                                                (used by\n                                                    literalConstant,                                                     UnsignedLiteral,                                                     LongLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'0'\u00a0[xX]\u00a0HexDigit\u00a0HexDigitOrSeparator*\u00a0HexDigit\n\u00a0\u00a0|\u00a0'0'\u00a0[xX]\u00a0HexDigit\n\u00a0\u00a0; \n\n\nhelper\n\nBinDigit\n\n                                                (used by\n                                                    BinDigitOrSeparator,                                                     BinLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0[01]\n\u00a0\u00a0; \n\n\nhelper\n\nBinDigitOrSeparator\n\n                                                (used by\n                                                    BinLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0BinDigit\n\u00a0\u00a0|\u00a0'_'\n\u00a0\u00a0; \n\n\n\nBinLiteral\n\n                                                (used by\n                                                    literalConstant,                                                     UnsignedLiteral,                                                     LongLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'0'\u00a0[bB]\u00a0BinDigit\u00a0BinDigitOrSeparator*\u00a0BinDigit\n\u00a0\u00a0|\u00a0'0'\u00a0[bB]\u00a0BinDigit\n\u00a0\u00a0; \n\n\n\nUnsignedLiteral\n\n                                                (used by\n                                                    literalConstant)\n                                            \n\n\n\u00a0\u00a0:\u00a0(IntegerLiteral\u00a0|\u00a0HexLiteral\u00a0|\u00a0BinLiteral)\u00a0[uU]\u00a0'L'?\n\u00a0\u00a0; \n\n\n\nLongLiteral\n\n                                                (used by\n                                                    literalConstant)\n                                            \n\n\n\u00a0\u00a0:\u00a0(IntegerLiteral\u00a0|\u00a0HexLiteral\u00a0|\u00a0BinLiteral)\u00a0'L'\n\u00a0\u00a0; \n\n\n\nBooleanLiteral\n\n                                                (used by\n                                                    literalConstant)\n                                            \n\n\n\u00a0\u00a0:\u00a0'true'\n\u00a0\u00a0|\u00a0'false'\n\u00a0\u00a0; \n\n\n\nCharacterLiteral\n\n                                                (used by\n                                                    literalConstant)\n                                            \n\n\n\u00a0\u00a0:\u00a0'\\''\u00a0(EscapeSeq\u00a0|\u00a0~[\\n\\r'\\\\])\u00a0'\\''\n\u00a0\u00a0; \n\n\n\n\nIdentifiers\n\n\nhelper\n\nUnicodeDigit\n\n                                                (used by\n                                                    Identifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0UNICODE_CLASS_ND\n\u00a0\u00a0; \n\n\n\nIdentifier\n\n                                                (used by\n                                                    simpleIdentifier,                                                     RETURN_AT,                                                     CONTINUE_AT,                                                     BREAK_AT,                                                     THIS_AT,                                                     SUPER_AT,                                                     IdentifierOrSoftKey)\n                                            \n\n\n\u00a0\u00a0:\u00a0(Letter\u00a0|\u00a0'_')\u00a0(Letter\u00a0|\u00a0'_'\u00a0|\u00a0UnicodeDigit)*\n\u00a0\u00a0|\u00a0'`'\u00a0~([\\r\\n]\u00a0|\u00a0'`')+\u00a0'`'\n\u00a0\u00a0; \n\n\nDepending on the target and publicity of the declaration, the set of allowed symbols in identifiers is different.\nThis rule contains the union of allowed symbols from all targets.\nThus, the code for any target can be parsed using the grammar.\nThe allowed symbols in identifiers corresponding to the target and publicity of the declaration are given below.\nKotlin/JVM (any declaration publicity)\n\n~\n(\n[\\r\\n]\n|\n'`'\n|\n'.'\n|\n';'\n|\n':'\n|\n'\\'\n|\n'/'\n|\n'['\n|\n']'\n|\n'<'\n|\n'>'\n)\n\nKotlin/Android (any declaration publicity)\nThe allowed symbols are different from allowed symbols for Kotlin/JVM and correspond to the Dalvik Executable format.\nKotlin/JS (private declarations)\n\n~\n(\n[\\r\\n]\n|\n'`'\n)\n\nKotlin/JS (public declarations)\nThe allowed symbols for public declarations correspond to the ECMA specification (section 7.6) except that ECMA reserved words is allowed.\nKotlin/Native (any declaration publicity)\n\n~\n(\n[\\r\\n]\n|\n'`'\n)\n\n\n\n\n\nIdentifierOrSoftKey\n\n                                                (used by\n                                                    FieldIdentifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0Identifier\n\u00a0\u00a0|\u00a0'abstract'\n\u00a0\u00a0|\u00a0'annotation'\n\u00a0\u00a0|\u00a0'by'\n\u00a0\u00a0|\u00a0'catch'\n\u00a0\u00a0|\u00a0'companion'\n\u00a0\u00a0|\u00a0'constructor'\n\u00a0\u00a0|\u00a0'crossinline'\n\u00a0\u00a0|\u00a0'data'\n\u00a0\u00a0|\u00a0'dynamic'\n\u00a0\u00a0|\u00a0'enum'\n\u00a0\u00a0|\u00a0'external'\n\u00a0\u00a0|\u00a0'final'\n\u00a0\u00a0|\u00a0'finally'\n\u00a0\u00a0|\u00a0'import'\n\u00a0\u00a0|\u00a0'infix'\n\u00a0\u00a0|\u00a0'init'\n\u00a0\u00a0|\u00a0'inline'\n\u00a0\u00a0|\u00a0'inner'\n\u00a0\u00a0|\u00a0'internal'\n\u00a0\u00a0|\u00a0'lateinit'\n\u00a0\u00a0|\u00a0'noinline'\n\u00a0\u00a0|\u00a0'open'\n\u00a0\u00a0|\u00a0'operator'\n\u00a0\u00a0|\u00a0'out'\n\u00a0\u00a0|\u00a0'override'\n\u00a0\u00a0|\u00a0'private'\n\u00a0\u00a0|\u00a0'protected'\n\u00a0\u00a0|\u00a0'public'\n\u00a0\u00a0|\u00a0'reified'\n\u00a0\u00a0|\u00a0'sealed'\n\u00a0\u00a0|\u00a0'tailrec'\n\u00a0\u00a0|\u00a0'vararg'\n\u00a0\u00a0|\u00a0'where'\n\u00a0\u00a0|\u00a0'get'\n\u00a0\u00a0|\u00a0'set'\n\u00a0\u00a0|\u00a0'field'\n\u00a0\u00a0|\u00a0'property'\n\u00a0\u00a0|\u00a0'receiver'\n\u00a0\u00a0|\u00a0'param'\n\u00a0\u00a0|\u00a0'setparam'\n\u00a0\u00a0|\u00a0'delegate'\n\u00a0\u00a0|\u00a0'file'\n\u00a0\u00a0|\u00a0'expect'\n\u00a0\u00a0|\u00a0'actual'\n\u00a0\u00a0|\u00a0'const'\n\u00a0\u00a0|\u00a0'suspend'\n\u00a0\u00a0; \n\n\n\nFieldIdentifier\n\n                                                (used by\n                                                    LineStrRef,                                                     MultiLineStrRef)\n                                            \n\n\n\u00a0\u00a0:\u00a0'$'\u00a0IdentifierOrSoftKey\n\u00a0\u00a0; \n\n\nhelper\n\nUniCharacterLiteral\n\n                                                (used by\n                                                    EscapeSeq,                                                     LineStrEscapedChar)\n                                            \n\n\n\u00a0\u00a0:\u00a0'\\\\'\u00a0'u'\u00a0HexDigit\u00a0HexDigit\u00a0HexDigit\u00a0HexDigit\n\u00a0\u00a0; \n\n\nhelper\n\nEscapedIdentifier\n\n                                                (used by\n                                                    EscapeSeq,                                                     LineStrEscapedChar)\n                                            \n\n\n\u00a0\u00a0:\u00a0'\\\\'\u00a0('t'\u00a0|\u00a0'b'\u00a0|\u00a0'r'\u00a0|\u00a0'n'\u00a0|\u00a0'\\''\u00a0|\u00a0'\"'\u00a0|\u00a0'\\\\'\u00a0|\u00a0'$')\n\u00a0\u00a0; \n\n\nhelper\n\nEscapeSeq\n\n                                                (used by\n                                                    CharacterLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0UniCharacterLiteral\n\u00a0\u00a0|\u00a0EscapedIdentifier\n\u00a0\u00a0; \n\n\n\n\nCharacters\n\n\nhelper\n\nLetter\n\n                                                (used by\n                                                    Identifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0UNICODE_CLASS_LL\n\u00a0\u00a0|\u00a0UNICODE_CLASS_LM\n\u00a0\u00a0|\u00a0UNICODE_CLASS_LO\n\u00a0\u00a0|\u00a0UNICODE_CLASS_LT\n\u00a0\u00a0|\u00a0UNICODE_CLASS_LU\n\u00a0\u00a0|\u00a0UNICODE_CLASS_NL\n\u00a0\u00a0; \n\n\n\n\nStrings\n\n\n\nLineStrRef\n\n                                                (used by\n                                                    lineStringContent)\n                                            \n\n\n\u00a0\u00a0:\u00a0FieldIdentifier\n\u00a0\u00a0; \n\n\nSee String templates\n\n\n\nLineStrText\n\n                                                (used by\n                                                    lineStringContent)\n                                            \n\n\n\u00a0\u00a0:\u00a0~('\\\\'\u00a0|\u00a0'\"'\u00a0|\u00a0'$')+\n\u00a0\u00a0|\u00a0'$'\n\u00a0\u00a0; \n\n\n\nLineStrEscapedChar\n\n                                                (used by\n                                                    lineStringContent)\n                                            \n\n\n\u00a0\u00a0:\u00a0EscapedIdentifier\n\u00a0\u00a0|\u00a0UniCharacterLiteral\n\u00a0\u00a0; \n\n\n\nTRIPLE_QUOTE_CLOSE\n\n                                                (used by\n                                                    multiLineStringLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0('\"'?\u00a0'\"\"\"')\u00a0\n\u00a0\u00a0; \n\n\n\nMultiLineStrRef\n\n                                                (used by\n                                                    multiLineStringContent)\n                                            \n\n\n\u00a0\u00a0:\u00a0FieldIdentifier\n\u00a0\u00a0; \n\n\n\nMultiLineStrText\n\n                                                (used by\n                                                    multiLineStringContent)\n                                            \n\n\n\u00a0\u00a0:\u00a0~('\"'\u00a0|\u00a0'$')+\n\u00a0\u00a0|\u00a0'$'\n\u00a0\u00a0; \n\n\n\nErrorCharacter\n\n\n\u00a0\u00a0:\u00a0.\n\u00a0\u00a0; \n\n\n"}, {"type": "h1", "text": "Grammar"}, {"type": "div", "text": "\n\nDescription\nNotation\nThe notation used on this page corresponds to the ANTLR 4 notation with a few exceptions for better readability:\n\nomitted lexer rule actions and commands,\nomitted lexical modes.\n\nShort description:\n\noperator | denotes alternative,\noperator * denotes iteration (zero or more),\noperator + denotes iteration (one or more),\noperator ? denotes option (zero or one),\noperator .. denotes range (from left to right),\noperator ~ denotes negation.\n\nGrammar source files\nKotlin grammar source files (in ANTLR format) are located in the Kotlin specification repository:\n\nKotlinLexer.g4 describes lexical structure;\nUnicodeClasses.g4 describes the characters that can be used in identifiers (these rules are omitted on this page for better readability);\nKotlinParser.g4 describes syntax.\n\nThe grammar on this page corresponds to the grammar files above.\nSymbols and naming\nTerminal symbol names start with an uppercase letter, e.g. Identifier.\nNon-terminal symbol names start with a lowercase letter, e.g. kotlinFile.\nSymbol definitions may be documented with attributes:\n\nstart attribute denotes a symbol that represents the whole source file (see kotlinFile and script),\nhelper attribute denotes a lexer fragment rule (used only inside other terminal symbols).\n\nAlso for better readability some simplifications are made:\n\nlexer rules consisting of one string literal element are inlined to the use site,\nnew line tokens are excluded (new lines are not allowed in some places, see source grammar files for details).\n\nScope\nThe grammar corresponds to the latest stable version of the Kotlin compiler excluding lexer and parser rules for experimental features that are disabled by default.\n\n"}, {"type": "div", "text": "\nDescription\nNotation\nThe notation used on this page corresponds to the ANTLR 4 notation with a few exceptions for better readability:\n\nomitted lexer rule actions and commands,\nomitted lexical modes.\n\nShort description:\n\noperator | denotes alternative,\noperator * denotes iteration (zero or more),\noperator + denotes iteration (one or more),\noperator ? denotes option (zero or one),\noperator .. denotes range (from left to right),\noperator ~ denotes negation.\n\nGrammar source files\nKotlin grammar source files (in ANTLR format) are located in the Kotlin specification repository:\n\nKotlinLexer.g4 describes lexical structure;\nUnicodeClasses.g4 describes the characters that can be used in identifiers (these rules are omitted on this page for better readability);\nKotlinParser.g4 describes syntax.\n\nThe grammar on this page corresponds to the grammar files above.\nSymbols and naming\nTerminal symbol names start with an uppercase letter, e.g. Identifier.\nNon-terminal symbol names start with a lowercase letter, e.g. kotlinFile.\nSymbol definitions may be documented with attributes:\n\nstart attribute denotes a symbol that represents the whole source file (see kotlinFile and script),\nhelper attribute denotes a lexer fragment rule (used only inside other terminal symbols).\n\nAlso for better readability some simplifications are made:\n\nlexer rules consisting of one string literal element are inlined to the use site,\nnew line tokens are excluded (new lines are not allowed in some places, see source grammar files for details).\n\nScope\nThe grammar corresponds to the latest stable version of the Kotlin compiler excluding lexer and parser rules for experimental features that are disabled by default.\n"}, {"type": "h2", "text": "Description"}, {"type": "h3", "text": "Notation"}, {"type": "p", "text": "The notation used on this page corresponds to the ANTLR 4 notation with a few exceptions for better readability:"}, {"type": "ul", "text": "\nomitted lexer rule actions and commands,\nomitted lexical modes.\n"}, {"type": "li", "text": "omitted lexer rule actions and commands,"}, {"type": "li", "text": "omitted lexical modes."}, {"type": "p", "text": "Short description:"}, {"type": "ul", "text": "\noperator | denotes alternative,\noperator * denotes iteration (zero or more),\noperator + denotes iteration (one or more),\noperator ? denotes option (zero or one),\noperator .. denotes range (from left to right),\noperator ~ denotes negation.\n"}, {"type": "li", "text": "operator | denotes alternative,"}, {"type": "code", "text": "|"}, {"type": "em", "text": "alternative"}, {"type": "li", "text": "operator * denotes iteration (zero or more),"}, {"type": "code", "text": "*"}, {"type": "em", "text": "iteration"}, {"type": "li", "text": "operator + denotes iteration (one or more),"}, {"type": "code", "text": "+"}, {"type": "em", "text": "iteration"}, {"type": "li", "text": "operator ? denotes option (zero or one),"}, {"type": "code", "text": "?"}, {"type": "em", "text": "option"}, {"type": "li", "text": "operator .. denotes range (from left to right),"}, {"type": "code", "text": ".."}, {"type": "em", "text": "range"}, {"type": "li", "text": "operator ~ denotes negation."}, {"type": "code", "text": "~"}, {"type": "em", "text": "negation"}, {"type": "h3", "text": "Grammar source files"}, {"type": "p", "text": "Kotlin grammar source files (in ANTLR format) are located in the Kotlin specification repository:"}, {"type": "a", "text": "Kotlin specification repository"}, {"type": "ul", "text": "\nKotlinLexer.g4 describes lexical structure;\nUnicodeClasses.g4 describes the characters that can be used in identifiers (these rules are omitted on this page for better readability);\nKotlinParser.g4 describes syntax.\n"}, {"type": "li", "text": "KotlinLexer.g4 describes lexical structure;"}, {"type": "strong", "text": "KotlinLexer.g4"}, {"type": "a", "text": "KotlinLexer.g4"}, {"type": "a", "text": "lexical structure"}, {"type": "li", "text": "UnicodeClasses.g4 describes the characters that can be used in identifiers (these rules are omitted on this page for better readability);"}, {"type": "strong", "text": "UnicodeClasses.g4"}, {"type": "a", "text": "UnicodeClasses.g4"}, {"type": "li", "text": "KotlinParser.g4 describes syntax."}, {"type": "strong", "text": "KotlinParser.g4"}, {"type": "a", "text": "KotlinParser.g4"}, {"type": "a", "text": "syntax"}, {"type": "p", "text": "The grammar on this page corresponds to the grammar files above."}, {"type": "h3", "text": "Symbols and naming"}, {"type": "p", "text": "Terminal symbol names start with an uppercase letter, e.g. Identifier.\nNon-terminal symbol names start with a lowercase letter, e.g. kotlinFile."}, {"type": "em", "text": "Terminal symbol"}, {"type": "a", "text": "Identifier"}, {"type": "br", "text": ""}, {"type": "em", "text": "Non-terminal symbol"}, {"type": "a", "text": "kotlinFile"}, {"type": "br", "text": ""}, {"type": "p", "text": "Symbol definitions may be documented with attributes:"}, {"type": "em", "text": "attributes"}, {"type": "ul", "text": "\nstart attribute denotes a symbol that represents the whole source file (see kotlinFile and script),\nhelper attribute denotes a lexer fragment rule (used only inside other terminal symbols).\n"}, {"type": "li", "text": "start attribute denotes a symbol that represents the whole source file (see kotlinFile and script),"}, {"type": "code", "text": "start"}, {"type": "a", "text": "kotlinFile"}, {"type": "a", "text": "script"}, {"type": "li", "text": "helper attribute denotes a lexer fragment rule (used only inside other terminal symbols)."}, {"type": "code", "text": "helper"}, {"type": "p", "text": "Also for better readability some simplifications are made:"}, {"type": "ul", "text": "\nlexer rules consisting of one string literal element are inlined to the use site,\nnew line tokens are excluded (new lines are not allowed in some places, see source grammar files for details).\n"}, {"type": "li", "text": "lexer rules consisting of one string literal element are inlined to the use site,"}, {"type": "li", "text": "new line tokens are excluded (new lines are not allowed in some places, see source grammar files for details)."}, {"type": "h3", "text": "Scope"}, {"type": "p", "text": "The grammar corresponds to the latest stable version of the Kotlin compiler excluding lexer and parser rules for experimental features that are disabled by default."}, {"type": "div", "text": "\n\nSyntax grammar\nGeneral\nRelevant pages: Packages\n\n\nstart\n\nkotlinFile\n\n\n\u00a0\u00a0:\u00a0shebangLine?\u00a0fileAnnotation*\u00a0packageHeader\u00a0importList\u00a0topLevelObject*\u00a0EOF\n\u00a0\u00a0; \n\n\nstart\n\nscript\n\n\n\u00a0\u00a0:\u00a0shebangLine?\u00a0fileAnnotation*\u00a0packageHeader\u00a0importList\u00a0(statement\u00a0semi)*\u00a0EOF\n\u00a0\u00a0; \n\n\n\nshebangLine\n\n                                                (used by\n                                                    kotlinFile,                                                     script)\n                                            \n\n\n\u00a0\u00a0:\u00a0ShebangLine\n\u00a0\u00a0; \n\n\n\nfileAnnotation\n\n                                                (used by\n                                                    kotlinFile,                                                     script)\n                                            \n\n\n\u00a0\u00a0:\u00a0('@'\u00a0|\u00a0AT_PRE_WS)\u00a0'file'\u00a0':'\u00a0(('['\u00a0unescapedAnnotation+\u00a0']')\u00a0|\u00a0unescapedAnnotation)\n\u00a0\u00a0; \n\n\nSee Packages\n\n\n\npackageHeader\n\n                                                (used by\n                                                    kotlinFile,                                                     script)\n                                            \n\n\n\u00a0\u00a0:\u00a0('package'\u00a0identifier\u00a0semi?)?\n\u00a0\u00a0; \n\n\nSee Imports\n\n\n\nimportList\n\n                                                (used by\n                                                    kotlinFile,                                                     script)\n                                            \n\n\n\u00a0\u00a0:\u00a0importHeader*\n\u00a0\u00a0; \n\n\n\nimportHeader\n\n                                                (used by\n                                                    importList)\n                                            \n\n\n\u00a0\u00a0:\u00a0'import'\u00a0identifier\u00a0(('.'\u00a0'*')\u00a0|\u00a0importAlias)?\u00a0semi?\n\u00a0\u00a0; \n\n\n\nimportAlias\n\n                                                (used by\n                                                    importHeader)\n                                            \n\n\n\u00a0\u00a0:\u00a0'as'\u00a0simpleIdentifier\n\u00a0\u00a0; \n\n\n\ntopLevelObject\n\n                                                (used by\n                                                    kotlinFile)\n                                            \n\n\n\u00a0\u00a0:\u00a0declaration\u00a0semis?\n\u00a0\u00a0; \n\n\n\ntypeAlias\n\n                                                (used by\n                                                    declaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0'typealias'\u00a0simpleIdentifier\u00a0typeParameters?\u00a0'='\u00a0type\n\u00a0\u00a0; \n\n\n\ndeclaration\n\n                                                (used by\n                                                    topLevelObject,                                                     classMemberDeclaration,                                                     statement)\n                                            \n\n\n\u00a0\u00a0:\u00a0classDeclaration\n\u00a0\u00a0|\u00a0objectDeclaration\n\u00a0\u00a0|\u00a0functionDeclaration\n\u00a0\u00a0|\u00a0propertyDeclaration\n\u00a0\u00a0|\u00a0typeAlias\n\u00a0\u00a0; \n\n"}, {"type": "div", "text": "\nSyntax grammar\nGeneral\nRelevant pages: Packages\n"}, {"type": "h2", "text": "Syntax grammar"}, {"type": "h3", "text": "General"}, {"type": "p", "text": "Relevant pages: Packages"}, {"type": "a", "text": "Packages"}, {"type": "div", "text": "\nstart\n\nkotlinFile\n\n\n\u00a0\u00a0:\u00a0shebangLine?\u00a0fileAnnotation*\u00a0packageHeader\u00a0importList\u00a0topLevelObject*\u00a0EOF\n\u00a0\u00a0; \n"}, {"type": "div", "text": "start"}, {"type": "div", "text": "\nkotlinFile\n"}, {"type": "div", "text": "kotlinFile"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0shebangLine?\u00a0fileAnnotation*\u00a0packageHeader\u00a0importList\u00a0topLevelObject*\u00a0EOF\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "shebangLine"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "fileAnnotation"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "packageHeader"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "importList"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "topLevelObject"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "EOF"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\nstart\n\nscript\n\n\n\u00a0\u00a0:\u00a0shebangLine?\u00a0fileAnnotation*\u00a0packageHeader\u00a0importList\u00a0(statement\u00a0semi)*\u00a0EOF\n\u00a0\u00a0; \n"}, {"type": "div", "text": "start"}, {"type": "div", "text": "\nscript\n"}, {"type": "div", "text": "script"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0shebangLine?\u00a0fileAnnotation*\u00a0packageHeader\u00a0importList\u00a0(statement\u00a0semi)*\u00a0EOF\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "shebangLine"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "fileAnnotation"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "packageHeader"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "importList"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "statement"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "semi"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "EOF"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nshebangLine\n\n                                                (used by\n                                                    kotlinFile,                                                     script)\n                                            \n\n\n\u00a0\u00a0:\u00a0ShebangLine\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nshebangLine\n\n                                                (used by\n                                                    kotlinFile,                                                     script)\n                                            \n"}, {"type": "div", "text": "shebangLine"}, {"type": "div", "text": "\n                                                (used by\n                                                    kotlinFile,                                                     script)\n                                            "}, {"type": "a", "text": "kotlinFile"}, {"type": "a", "text": "script"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0ShebangLine\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "ShebangLine"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nfileAnnotation\n\n                                                (used by\n                                                    kotlinFile,                                                     script)\n                                            \n\n\n\u00a0\u00a0:\u00a0('@'\u00a0|\u00a0AT_PRE_WS)\u00a0'file'\u00a0':'\u00a0(('['\u00a0unescapedAnnotation+\u00a0']')\u00a0|\u00a0unescapedAnnotation)\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nfileAnnotation\n\n                                                (used by\n                                                    kotlinFile,                                                     script)\n                                            \n"}, {"type": "div", "text": "fileAnnotation"}, {"type": "div", "text": "\n                                                (used by\n                                                    kotlinFile,                                                     script)\n                                            "}, {"type": "a", "text": "kotlinFile"}, {"type": "a", "text": "script"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0('@'\u00a0|\u00a0AT_PRE_WS)\u00a0'file'\u00a0':'\u00a0(('['\u00a0unescapedAnnotation+\u00a0']')\u00a0|\u00a0unescapedAnnotation)\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'@'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "AT_PRE_WS"}, {"type": "span", "text": ")"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'file'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "':'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "("}, {"type": "span", "text": "'['"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "unescapedAnnotation"}, {"type": "span", "text": "+"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "']'"}, {"type": "span", "text": ")"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "unescapedAnnotation"}, {"type": "span", "text": ")"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\nSee Packages\n"}, {"type": "p", "text": "See Packages"}, {"type": "a", "text": "Packages"}, {"type": "div", "text": "\n\npackageHeader\n\n                                                (used by\n                                                    kotlinFile,                                                     script)\n                                            \n\n\n\u00a0\u00a0:\u00a0('package'\u00a0identifier\u00a0semi?)?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\npackageHeader\n\n                                                (used by\n                                                    kotlinFile,                                                     script)\n                                            \n"}, {"type": "div", "text": "packageHeader"}, {"type": "div", "text": "\n                                                (used by\n                                                    kotlinFile,                                                     script)\n                                            "}, {"type": "a", "text": "kotlinFile"}, {"type": "a", "text": "script"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0('package'\u00a0identifier\u00a0semi?)?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'package'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "identifier"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "semi"}, {"type": "span", "text": "?"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\nSee Imports\n"}, {"type": "p", "text": "See Imports"}, {"type": "a", "text": "Imports"}, {"type": "div", "text": "\n\nimportList\n\n                                                (used by\n                                                    kotlinFile,                                                     script)\n                                            \n\n\n\u00a0\u00a0:\u00a0importHeader*\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nimportList\n\n                                                (used by\n                                                    kotlinFile,                                                     script)\n                                            \n"}, {"type": "div", "text": "importList"}, {"type": "div", "text": "\n                                                (used by\n                                                    kotlinFile,                                                     script)\n                                            "}, {"type": "a", "text": "kotlinFile"}, {"type": "a", "text": "script"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0importHeader*\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "importHeader"}, {"type": "span", "text": "*"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nimportHeader\n\n                                                (used by\n                                                    importList)\n                                            \n\n\n\u00a0\u00a0:\u00a0'import'\u00a0identifier\u00a0(('.'\u00a0'*')\u00a0|\u00a0importAlias)?\u00a0semi?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nimportHeader\n\n                                                (used by\n                                                    importList)\n                                            \n"}, {"type": "div", "text": "importHeader"}, {"type": "div", "text": "\n                                                (used by\n                                                    importList)\n                                            "}, {"type": "a", "text": "importList"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'import'\u00a0identifier\u00a0(('.'\u00a0'*')\u00a0|\u00a0importAlias)?\u00a0semi?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'import'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "identifier"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "("}, {"type": "span", "text": "'.'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'*'"}, {"type": "span", "text": ")"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "importAlias"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "semi"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nimportAlias\n\n                                                (used by\n                                                    importHeader)\n                                            \n\n\n\u00a0\u00a0:\u00a0'as'\u00a0simpleIdentifier\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nimportAlias\n\n                                                (used by\n                                                    importHeader)\n                                            \n"}, {"type": "div", "text": "importAlias"}, {"type": "div", "text": "\n                                                (used by\n                                                    importHeader)\n                                            "}, {"type": "a", "text": "importHeader"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'as'\u00a0simpleIdentifier\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'as'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "simpleIdentifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ntopLevelObject\n\n                                                (used by\n                                                    kotlinFile)\n                                            \n\n\n\u00a0\u00a0:\u00a0declaration\u00a0semis?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ntopLevelObject\n\n                                                (used by\n                                                    kotlinFile)\n                                            \n"}, {"type": "div", "text": "topLevelObject"}, {"type": "div", "text": "\n                                                (used by\n                                                    kotlinFile)\n                                            "}, {"type": "a", "text": "kotlinFile"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0declaration\u00a0semis?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "declaration"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "semis"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ntypeAlias\n\n                                                (used by\n                                                    declaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0'typealias'\u00a0simpleIdentifier\u00a0typeParameters?\u00a0'='\u00a0type\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ntypeAlias\n\n                                                (used by\n                                                    declaration)\n                                            \n"}, {"type": "div", "text": "typeAlias"}, {"type": "div", "text": "\n                                                (used by\n                                                    declaration)\n                                            "}, {"type": "a", "text": "declaration"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0modifiers?\u00a0'typealias'\u00a0simpleIdentifier\u00a0typeParameters?\u00a0'='\u00a0type\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "modifiers"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'typealias'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "simpleIdentifier"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeParameters"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'='"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "type"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ndeclaration\n\n                                                (used by\n                                                    topLevelObject,                                                     classMemberDeclaration,                                                     statement)\n                                            \n\n\n\u00a0\u00a0:\u00a0classDeclaration\n\u00a0\u00a0|\u00a0objectDeclaration\n\u00a0\u00a0|\u00a0functionDeclaration\n\u00a0\u00a0|\u00a0propertyDeclaration\n\u00a0\u00a0|\u00a0typeAlias\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ndeclaration\n\n                                                (used by\n                                                    topLevelObject,                                                     classMemberDeclaration,                                                     statement)\n                                            \n"}, {"type": "div", "text": "declaration"}, {"type": "div", "text": "\n                                                (used by\n                                                    topLevelObject,                                                     classMemberDeclaration,                                                     statement)\n                                            "}, {"type": "a", "text": "topLevelObject"}, {"type": "a", "text": "classMemberDeclaration"}, {"type": "a", "text": "statement"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0classDeclaration\n\u00a0\u00a0|\u00a0objectDeclaration\n\u00a0\u00a0|\u00a0functionDeclaration\n\u00a0\u00a0|\u00a0propertyDeclaration\n\u00a0\u00a0|\u00a0typeAlias\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "classDeclaration"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "objectDeclaration"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "functionDeclaration"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "propertyDeclaration"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeAlias"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nClasses\nSee Classes and Inheritance\n\n\n\nclassDeclaration\n\n                                                (used by\n                                                    declaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0('class'\u00a0|\u00a0('fun'?\u00a0'interface'))\n\u00a0\u00a0\u00a0\u00a0simpleIdentifier\u00a0typeParameters?\n\u00a0\u00a0\u00a0\u00a0primaryConstructor?\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0delegationSpecifiers)?\n\u00a0\u00a0\u00a0\u00a0typeConstraints?\n\u00a0\u00a0\u00a0\u00a0(classBody\u00a0|\u00a0enumClassBody)?\n\u00a0\u00a0; \n\n\n\nprimaryConstructor\n\n                                                (used by\n                                                    classDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0(modifiers?\u00a0'constructor')?\u00a0classParameters\n\u00a0\u00a0; \n\n\n\nclassBody\n\n                                                (used by\n                                                    classDeclaration,                                                     companionObject,                                                     objectDeclaration,                                                     enumEntry,                                                     objectLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'{'\u00a0classMemberDeclarations\u00a0'}'\n\u00a0\u00a0; \n\n\n\nclassParameters\n\n                                                (used by\n                                                    primaryConstructor)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0(classParameter\u00a0(','\u00a0classParameter)*\u00a0','?)?\u00a0')'\n\u00a0\u00a0; \n\n\n\nclassParameter\n\n                                                (used by\n                                                    classParameters)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0('val'\u00a0|\u00a0'var')?\u00a0simpleIdentifier\u00a0':'\u00a0type\u00a0('='\u00a0expression)?\n\u00a0\u00a0; \n\n\n\ndelegationSpecifiers\n\n                                                (used by\n                                                    classDeclaration,                                                     companionObject,                                                     objectDeclaration,                                                     objectLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotatedDelegationSpecifier\u00a0(','\u00a0annotatedDelegationSpecifier)*\n\u00a0\u00a0; \n\n\n\ndelegationSpecifier\n\n                                                (used by\n                                                    annotatedDelegationSpecifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0constructorInvocation\n\u00a0\u00a0|\u00a0explicitDelegation\n\u00a0\u00a0|\u00a0userType\n\u00a0\u00a0|\u00a0functionType\n\u00a0\u00a0; \n\n\n\nconstructorInvocation\n\n                                                (used by\n                                                    delegationSpecifier,                                                     unescapedAnnotation)\n                                            \n\n\n\u00a0\u00a0:\u00a0userType\u00a0valueArguments\n\u00a0\u00a0; \n\n\n\nannotatedDelegationSpecifier\n\n                                                (used by\n                                                    delegationSpecifiers)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation*\u00a0delegationSpecifier\n\u00a0\u00a0; \n\n\n\nexplicitDelegation\n\n                                                (used by\n                                                    delegationSpecifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0(userType\u00a0|\u00a0functionType)\u00a0'by'\u00a0expression\n\u00a0\u00a0; \n\n\nSee Generic classes\n\n\n\ntypeParameters\n\n                                                (used by\n                                                    typeAlias,                                                     classDeclaration,                                                     functionDeclaration,                                                     propertyDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0'<'\u00a0typeParameter\u00a0(','\u00a0typeParameter)*\u00a0','?\u00a0'>'\n\u00a0\u00a0; \n\n\n\ntypeParameter\n\n                                                (used by\n                                                    typeParameters)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeParameterModifiers?\u00a0simpleIdentifier\u00a0(':'\u00a0type)?\n\u00a0\u00a0; \n\n\nSee Generic constraints\n\n\n\ntypeConstraints\n\n                                                (used by\n                                                    classDeclaration,                                                     functionDeclaration,                                                     propertyDeclaration,                                                     anonymousFunction)\n                                            \n\n\n\u00a0\u00a0:\u00a0'where'\u00a0typeConstraint\u00a0(','\u00a0typeConstraint)*\n\u00a0\u00a0; \n\n\n\ntypeConstraint\n\n                                                (used by\n                                                    typeConstraints)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation*\u00a0simpleIdentifier\u00a0':'\u00a0type\n\u00a0\u00a0; \n\n"}, {"type": "div", "text": "\nClasses\nSee Classes and Inheritance\n"}, {"type": "h3", "text": "Classes"}, {"type": "p", "text": "See Classes and Inheritance"}, {"type": "a", "text": "Classes and Inheritance"}, {"type": "div", "text": "\n\nclassDeclaration\n\n                                                (used by\n                                                    declaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0('class'\u00a0|\u00a0('fun'?\u00a0'interface'))\n\u00a0\u00a0\u00a0\u00a0simpleIdentifier\u00a0typeParameters?\n\u00a0\u00a0\u00a0\u00a0primaryConstructor?\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0delegationSpecifiers)?\n\u00a0\u00a0\u00a0\u00a0typeConstraints?\n\u00a0\u00a0\u00a0\u00a0(classBody\u00a0|\u00a0enumClassBody)?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nclassDeclaration\n\n                                                (used by\n                                                    declaration)\n                                            \n"}, {"type": "div", "text": "classDeclaration"}, {"type": "div", "text": "\n                                                (used by\n                                                    declaration)\n                                            "}, {"type": "a", "text": "declaration"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0modifiers?\u00a0('class'\u00a0|\u00a0('fun'?\u00a0'interface'))\n\u00a0\u00a0\u00a0\u00a0simpleIdentifier\u00a0typeParameters?\n\u00a0\u00a0\u00a0\u00a0primaryConstructor?\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0delegationSpecifiers)?\n\u00a0\u00a0\u00a0\u00a0typeConstraints?\n\u00a0\u00a0\u00a0\u00a0(classBody\u00a0|\u00a0enumClassBody)?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "modifiers"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'class'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'fun'"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'interface'"}, {"type": "span", "text": ")"}, {"type": "span", "text": ")"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "simpleIdentifier"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeParameters"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "primaryConstructor"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "':'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "delegationSpecifiers"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeConstraints"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "classBody"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "enumClassBody"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nprimaryConstructor\n\n                                                (used by\n                                                    classDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0(modifiers?\u00a0'constructor')?\u00a0classParameters\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nprimaryConstructor\n\n                                                (used by\n                                                    classDeclaration)\n                                            \n"}, {"type": "div", "text": "primaryConstructor"}, {"type": "div", "text": "\n                                                (used by\n                                                    classDeclaration)\n                                            "}, {"type": "a", "text": "classDeclaration"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0(modifiers?\u00a0'constructor')?\u00a0classParameters\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "modifiers"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'constructor'"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "classParameters"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nclassBody\n\n                                                (used by\n                                                    classDeclaration,                                                     companionObject,                                                     objectDeclaration,                                                     enumEntry,                                                     objectLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'{'\u00a0classMemberDeclarations\u00a0'}'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nclassBody\n\n                                                (used by\n                                                    classDeclaration,                                                     companionObject,                                                     objectDeclaration,                                                     enumEntry,                                                     objectLiteral)\n                                            \n"}, {"type": "div", "text": "classBody"}, {"type": "div", "text": "\n                                                (used by\n                                                    classDeclaration,                                                     companionObject,                                                     objectDeclaration,                                                     enumEntry,                                                     objectLiteral)\n                                            "}, {"type": "a", "text": "classDeclaration"}, {"type": "a", "text": "companionObject"}, {"type": "a", "text": "objectDeclaration"}, {"type": "a", "text": "enumEntry"}, {"type": "a", "text": "objectLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'{'\u00a0classMemberDeclarations\u00a0'}'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'{'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "classMemberDeclarations"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'}'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nclassParameters\n\n                                                (used by\n                                                    primaryConstructor)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0(classParameter\u00a0(','\u00a0classParameter)*\u00a0','?)?\u00a0')'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nclassParameters\n\n                                                (used by\n                                                    primaryConstructor)\n                                            \n"}, {"type": "div", "text": "classParameters"}, {"type": "div", "text": "\n                                                (used by\n                                                    primaryConstructor)\n                                            "}, {"type": "a", "text": "primaryConstructor"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'('\u00a0(classParameter\u00a0(','\u00a0classParameter)*\u00a0','?)?\u00a0')'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'('"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "classParameter"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "','"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "classParameter"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "','"}, {"type": "span", "text": "?"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "')'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nclassParameter\n\n                                                (used by\n                                                    classParameters)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0('val'\u00a0|\u00a0'var')?\u00a0simpleIdentifier\u00a0':'\u00a0type\u00a0('='\u00a0expression)?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nclassParameter\n\n                                                (used by\n                                                    classParameters)\n                                            \n"}, {"type": "div", "text": "classParameter"}, {"type": "div", "text": "\n                                                (used by\n                                                    classParameters)\n                                            "}, {"type": "a", "text": "classParameters"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0modifiers?\u00a0('val'\u00a0|\u00a0'var')?\u00a0simpleIdentifier\u00a0':'\u00a0type\u00a0('='\u00a0expression)?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "modifiers"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'val'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'var'"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "simpleIdentifier"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "':'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "type"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'='"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ndelegationSpecifiers\n\n                                                (used by\n                                                    classDeclaration,                                                     companionObject,                                                     objectDeclaration,                                                     objectLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotatedDelegationSpecifier\u00a0(','\u00a0annotatedDelegationSpecifier)*\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ndelegationSpecifiers\n\n                                                (used by\n                                                    classDeclaration,                                                     companionObject,                                                     objectDeclaration,                                                     objectLiteral)\n                                            \n"}, {"type": "div", "text": "delegationSpecifiers"}, {"type": "div", "text": "\n                                                (used by\n                                                    classDeclaration,                                                     companionObject,                                                     objectDeclaration,                                                     objectLiteral)\n                                            "}, {"type": "a", "text": "classDeclaration"}, {"type": "a", "text": "companionObject"}, {"type": "a", "text": "objectDeclaration"}, {"type": "a", "text": "objectLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0annotatedDelegationSpecifier\u00a0(','\u00a0annotatedDelegationSpecifier)*\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "annotatedDelegationSpecifier"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "','"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "annotatedDelegationSpecifier"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ndelegationSpecifier\n\n                                                (used by\n                                                    annotatedDelegationSpecifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0constructorInvocation\n\u00a0\u00a0|\u00a0explicitDelegation\n\u00a0\u00a0|\u00a0userType\n\u00a0\u00a0|\u00a0functionType\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ndelegationSpecifier\n\n                                                (used by\n                                                    annotatedDelegationSpecifier)\n                                            \n"}, {"type": "div", "text": "delegationSpecifier"}, {"type": "div", "text": "\n                                                (used by\n                                                    annotatedDelegationSpecifier)\n                                            "}, {"type": "a", "text": "annotatedDelegationSpecifier"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0constructorInvocation\n\u00a0\u00a0|\u00a0explicitDelegation\n\u00a0\u00a0|\u00a0userType\n\u00a0\u00a0|\u00a0functionType\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "constructorInvocation"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "explicitDelegation"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "userType"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "functionType"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nconstructorInvocation\n\n                                                (used by\n                                                    delegationSpecifier,                                                     unescapedAnnotation)\n                                            \n\n\n\u00a0\u00a0:\u00a0userType\u00a0valueArguments\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nconstructorInvocation\n\n                                                (used by\n                                                    delegationSpecifier,                                                     unescapedAnnotation)\n                                            \n"}, {"type": "div", "text": "constructorInvocation"}, {"type": "div", "text": "\n                                                (used by\n                                                    delegationSpecifier,                                                     unescapedAnnotation)\n                                            "}, {"type": "a", "text": "delegationSpecifier"}, {"type": "a", "text": "unescapedAnnotation"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0userType\u00a0valueArguments\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "userType"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "valueArguments"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nannotatedDelegationSpecifier\n\n                                                (used by\n                                                    delegationSpecifiers)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation*\u00a0delegationSpecifier\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nannotatedDelegationSpecifier\n\n                                                (used by\n                                                    delegationSpecifiers)\n                                            \n"}, {"type": "div", "text": "annotatedDelegationSpecifier"}, {"type": "div", "text": "\n                                                (used by\n                                                    delegationSpecifiers)\n                                            "}, {"type": "a", "text": "delegationSpecifiers"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0annotation*\u00a0delegationSpecifier\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "annotation"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "delegationSpecifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nexplicitDelegation\n\n                                                (used by\n                                                    delegationSpecifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0(userType\u00a0|\u00a0functionType)\u00a0'by'\u00a0expression\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nexplicitDelegation\n\n                                                (used by\n                                                    delegationSpecifier)\n                                            \n"}, {"type": "div", "text": "explicitDelegation"}, {"type": "div", "text": "\n                                                (used by\n                                                    delegationSpecifier)\n                                            "}, {"type": "a", "text": "delegationSpecifier"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0(userType\u00a0|\u00a0functionType)\u00a0'by'\u00a0expression\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "userType"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "functionType"}, {"type": "span", "text": ")"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'by'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\nSee Generic classes\n"}, {"type": "p", "text": "See Generic classes"}, {"type": "a", "text": "Generic classes"}, {"type": "div", "text": "\n\ntypeParameters\n\n                                                (used by\n                                                    typeAlias,                                                     classDeclaration,                                                     functionDeclaration,                                                     propertyDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0'<'\u00a0typeParameter\u00a0(','\u00a0typeParameter)*\u00a0','?\u00a0'>'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ntypeParameters\n\n                                                (used by\n                                                    typeAlias,                                                     classDeclaration,                                                     functionDeclaration,                                                     propertyDeclaration)\n                                            \n"}, {"type": "div", "text": "typeParameters"}, {"type": "div", "text": "\n                                                (used by\n                                                    typeAlias,                                                     classDeclaration,                                                     functionDeclaration,                                                     propertyDeclaration)\n                                            "}, {"type": "a", "text": "typeAlias"}, {"type": "a", "text": "classDeclaration"}, {"type": "a", "text": "functionDeclaration"}, {"type": "a", "text": "propertyDeclaration"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'<'\u00a0typeParameter\u00a0(','\u00a0typeParameter)*\u00a0','?\u00a0'>'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'<'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeParameter"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "','"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeParameter"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "','"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'>'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ntypeParameter\n\n                                                (used by\n                                                    typeParameters)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeParameterModifiers?\u00a0simpleIdentifier\u00a0(':'\u00a0type)?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ntypeParameter\n\n                                                (used by\n                                                    typeParameters)\n                                            \n"}, {"type": "div", "text": "typeParameter"}, {"type": "div", "text": "\n                                                (used by\n                                                    typeParameters)\n                                            "}, {"type": "a", "text": "typeParameters"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0typeParameterModifiers?\u00a0simpleIdentifier\u00a0(':'\u00a0type)?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeParameterModifiers"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "simpleIdentifier"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "':'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "type"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\nSee Generic constraints\n"}, {"type": "p", "text": "See Generic constraints"}, {"type": "a", "text": "Generic constraints"}, {"type": "div", "text": "\n\ntypeConstraints\n\n                                                (used by\n                                                    classDeclaration,                                                     functionDeclaration,                                                     propertyDeclaration,                                                     anonymousFunction)\n                                            \n\n\n\u00a0\u00a0:\u00a0'where'\u00a0typeConstraint\u00a0(','\u00a0typeConstraint)*\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ntypeConstraints\n\n                                                (used by\n                                                    classDeclaration,                                                     functionDeclaration,                                                     propertyDeclaration,                                                     anonymousFunction)\n                                            \n"}, {"type": "div", "text": "typeConstraints"}, {"type": "div", "text": "\n                                                (used by\n                                                    classDeclaration,                                                     functionDeclaration,                                                     propertyDeclaration,                                                     anonymousFunction)\n                                            "}, {"type": "a", "text": "classDeclaration"}, {"type": "a", "text": "functionDeclaration"}, {"type": "a", "text": "propertyDeclaration"}, {"type": "a", "text": "anonymousFunction"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'where'\u00a0typeConstraint\u00a0(','\u00a0typeConstraint)*\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'where'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeConstraint"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "','"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeConstraint"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ntypeConstraint\n\n                                                (used by\n                                                    typeConstraints)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation*\u00a0simpleIdentifier\u00a0':'\u00a0type\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ntypeConstraint\n\n                                                (used by\n                                                    typeConstraints)\n                                            \n"}, {"type": "div", "text": "typeConstraint"}, {"type": "div", "text": "\n                                                (used by\n                                                    typeConstraints)\n                                            "}, {"type": "a", "text": "typeConstraints"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0annotation*\u00a0simpleIdentifier\u00a0':'\u00a0type\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "annotation"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "simpleIdentifier"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "':'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "type"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nClass members\n\n\n\nclassMemberDeclarations\n\n                                                (used by\n                                                    classBody,                                                     enumClassBody)\n                                            \n\n\n\u00a0\u00a0:\u00a0(classMemberDeclaration\u00a0semis?)*\n\u00a0\u00a0; \n\n\n\nclassMemberDeclaration\n\n                                                (used by\n                                                    classMemberDeclarations)\n                                            \n\n\n\u00a0\u00a0:\u00a0declaration\n\u00a0\u00a0|\u00a0companionObject\n\u00a0\u00a0|\u00a0anonymousInitializer\n\u00a0\u00a0|\u00a0secondaryConstructor\n\u00a0\u00a0; \n\n\n\nanonymousInitializer\n\n                                                (used by\n                                                    classMemberDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0'init'\u00a0block\n\u00a0\u00a0; \n\n\n\ncompanionObject\n\n                                                (used by\n                                                    classMemberDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0'companion'\u00a0'object'\u00a0simpleIdentifier?\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0delegationSpecifiers)?\n\u00a0\u00a0\u00a0\u00a0classBody?\n\u00a0\u00a0; \n\n\n\nfunctionValueParameters\n\n                                                (used by\n                                                    functionDeclaration,                                                     secondaryConstructor)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0(functionValueParameter\u00a0(','\u00a0functionValueParameter)*\u00a0','?)?\u00a0')'\n\u00a0\u00a0; \n\n\n\nfunctionValueParameter\n\n                                                (used by\n                                                    functionValueParameters)\n                                            \n\n\n\u00a0\u00a0:\u00a0parameterModifiers?\u00a0parameter\u00a0('='\u00a0expression)?\n\u00a0\u00a0; \n\n\n\nfunctionDeclaration\n\n                                                (used by\n                                                    declaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0'fun'\u00a0typeParameters?\n\u00a0\u00a0\u00a0\u00a0(receiverType\u00a0'.')?\n\u00a0\u00a0\u00a0\u00a0simpleIdentifier\u00a0functionValueParameters\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0type)?\u00a0typeConstraints?\n\u00a0\u00a0\u00a0\u00a0functionBody?\n\u00a0\u00a0; \n\n\n\nfunctionBody\n\n                                                (used by\n                                                    functionDeclaration,                                                     getter,                                                     setter,                                                     anonymousFunction)\n                                            \n\n\n\u00a0\u00a0:\u00a0block\n\u00a0\u00a0|\u00a0'='\u00a0expression\n\u00a0\u00a0; \n\n\n\nvariableDeclaration\n\n                                                (used by\n                                                    multiVariableDeclaration,                                                     propertyDeclaration,                                                     forStatement,                                                     lambdaParameter,                                                     whenSubject)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation*\u00a0simpleIdentifier\u00a0(':'\u00a0type)?\n\u00a0\u00a0; \n\n\n\nmultiVariableDeclaration\n\n                                                (used by\n                                                    propertyDeclaration,                                                     forStatement,                                                     lambdaParameter)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0variableDeclaration\u00a0(','\u00a0variableDeclaration)*\u00a0','?\u00a0')'\n\u00a0\u00a0; \n\n\nSee Properties and Fields\n\n\n\npropertyDeclaration\n\n                                                (used by\n                                                    declaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0('val'\u00a0|\u00a0'var')\u00a0typeParameters?\n\u00a0\u00a0\u00a0\u00a0(receiverType\u00a0'.')?\n\u00a0\u00a0\u00a0\u00a0(multiVariableDeclaration\u00a0|\u00a0variableDeclaration)\n\u00a0\u00a0\u00a0\u00a0typeConstraints?\n\u00a0\u00a0\u00a0\u00a0(('='\u00a0expression)\u00a0|\u00a0propertyDelegate)?\u00a0';'?\n\u00a0\u00a0\u00a0\u00a0((getter?\u00a0(semi?\u00a0setter)?)\u00a0|\u00a0(setter?\u00a0(semi?\u00a0getter)?))\n\u00a0\u00a0; \n\n\n\npropertyDelegate\n\n                                                (used by\n                                                    propertyDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0'by'\u00a0expression\n\u00a0\u00a0; \n\n\n\ngetter\n\n                                                (used by\n                                                    propertyDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0'get'\n\u00a0\u00a0|\u00a0modifiers?\u00a0'get'\u00a0'('\u00a0')'\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0type)?\n\u00a0\u00a0\u00a0\u00a0functionBody\n\u00a0\u00a0; \n\n\n\nsetter\n\n                                                (used by\n                                                    propertyDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0'set'\n\u00a0\u00a0|\u00a0modifiers?\u00a0'set'\u00a0'('\u00a0parameterWithOptionalType\u00a0','?\u00a0')'\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0type)?\n\u00a0\u00a0\u00a0\u00a0functionBody\n\u00a0\u00a0; \n\n\n\nparametersWithOptionalType\n\n                                                (used by\n                                                    anonymousFunction)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\n\u00a0\u00a0\u00a0\u00a0(parameterWithOptionalType\u00a0(','\u00a0parameterWithOptionalType)*\u00a0','?)?\u00a0')'\n\u00a0\u00a0; \n\n\n\nparameterWithOptionalType\n\n                                                (used by\n                                                    setter,                                                     parametersWithOptionalType)\n                                            \n\n\n\u00a0\u00a0:\u00a0parameterModifiers?\u00a0simpleIdentifier\u00a0(':'\u00a0type)?\n\u00a0\u00a0; \n\n\n\nparameter\n\n                                                (used by\n                                                    functionValueParameter,                                                     functionTypeParameters)\n                                            \n\n\n\u00a0\u00a0:\u00a0simpleIdentifier\u00a0':'\u00a0type\n\u00a0\u00a0; \n\n\nSee Object expressions and Declarations\n\n\n\nobjectDeclaration\n\n                                                (used by\n                                                    declaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0'object'\u00a0simpleIdentifier\u00a0(':'\u00a0delegationSpecifiers)?\u00a0classBody?\n\u00a0\u00a0; \n\n\n\nsecondaryConstructor\n\n                                                (used by\n                                                    classMemberDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0'constructor'\u00a0functionValueParameters\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0constructorDelegationCall)?\u00a0block?\n\u00a0\u00a0; \n\n\n\nconstructorDelegationCall\n\n                                                (used by\n                                                    secondaryConstructor)\n                                            \n\n\n\u00a0\u00a0:\u00a0'this'\u00a0valueArguments\n\u00a0\u00a0|\u00a0'super'\u00a0valueArguments\n\u00a0\u00a0; \n\n"}, {"type": "div", "text": "\nClass members\n"}, {"type": "h3", "text": "Class members"}, {"type": "div", "text": "\n\nclassMemberDeclarations\n\n                                                (used by\n                                                    classBody,                                                     enumClassBody)\n                                            \n\n\n\u00a0\u00a0:\u00a0(classMemberDeclaration\u00a0semis?)*\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nclassMemberDeclarations\n\n                                                (used by\n                                                    classBody,                                                     enumClassBody)\n                                            \n"}, {"type": "div", "text": "classMemberDeclarations"}, {"type": "div", "text": "\n                                                (used by\n                                                    classBody,                                                     enumClassBody)\n                                            "}, {"type": "a", "text": "classBody"}, {"type": "a", "text": "enumClassBody"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0(classMemberDeclaration\u00a0semis?)*\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "classMemberDeclaration"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "semis"}, {"type": "span", "text": "?"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nclassMemberDeclaration\n\n                                                (used by\n                                                    classMemberDeclarations)\n                                            \n\n\n\u00a0\u00a0:\u00a0declaration\n\u00a0\u00a0|\u00a0companionObject\n\u00a0\u00a0|\u00a0anonymousInitializer\n\u00a0\u00a0|\u00a0secondaryConstructor\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nclassMemberDeclaration\n\n                                                (used by\n                                                    classMemberDeclarations)\n                                            \n"}, {"type": "div", "text": "classMemberDeclaration"}, {"type": "div", "text": "\n                                                (used by\n                                                    classMemberDeclarations)\n                                            "}, {"type": "a", "text": "classMemberDeclarations"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0declaration\n\u00a0\u00a0|\u00a0companionObject\n\u00a0\u00a0|\u00a0anonymousInitializer\n\u00a0\u00a0|\u00a0secondaryConstructor\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "declaration"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "companionObject"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "anonymousInitializer"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "secondaryConstructor"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nanonymousInitializer\n\n                                                (used by\n                                                    classMemberDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0'init'\u00a0block\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nanonymousInitializer\n\n                                                (used by\n                                                    classMemberDeclaration)\n                                            \n"}, {"type": "div", "text": "anonymousInitializer"}, {"type": "div", "text": "\n                                                (used by\n                                                    classMemberDeclaration)\n                                            "}, {"type": "a", "text": "classMemberDeclaration"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'init'\u00a0block\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'init'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "block"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ncompanionObject\n\n                                                (used by\n                                                    classMemberDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0'companion'\u00a0'object'\u00a0simpleIdentifier?\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0delegationSpecifiers)?\n\u00a0\u00a0\u00a0\u00a0classBody?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ncompanionObject\n\n                                                (used by\n                                                    classMemberDeclaration)\n                                            \n"}, {"type": "div", "text": "companionObject"}, {"type": "div", "text": "\n                                                (used by\n                                                    classMemberDeclaration)\n                                            "}, {"type": "a", "text": "classMemberDeclaration"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0modifiers?\u00a0'companion'\u00a0'object'\u00a0simpleIdentifier?\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0delegationSpecifiers)?\n\u00a0\u00a0\u00a0\u00a0classBody?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "modifiers"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'companion'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'object'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "simpleIdentifier"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "':'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "delegationSpecifiers"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "classBody"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nfunctionValueParameters\n\n                                                (used by\n                                                    functionDeclaration,                                                     secondaryConstructor)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0(functionValueParameter\u00a0(','\u00a0functionValueParameter)*\u00a0','?)?\u00a0')'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nfunctionValueParameters\n\n                                                (used by\n                                                    functionDeclaration,                                                     secondaryConstructor)\n                                            \n"}, {"type": "div", "text": "functionValueParameters"}, {"type": "div", "text": "\n                                                (used by\n                                                    functionDeclaration,                                                     secondaryConstructor)\n                                            "}, {"type": "a", "text": "functionDeclaration"}, {"type": "a", "text": "secondaryConstructor"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'('\u00a0(functionValueParameter\u00a0(','\u00a0functionValueParameter)*\u00a0','?)?\u00a0')'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'('"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "functionValueParameter"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "','"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "functionValueParameter"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "','"}, {"type": "span", "text": "?"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "')'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nfunctionValueParameter\n\n                                                (used by\n                                                    functionValueParameters)\n                                            \n\n\n\u00a0\u00a0:\u00a0parameterModifiers?\u00a0parameter\u00a0('='\u00a0expression)?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nfunctionValueParameter\n\n                                                (used by\n                                                    functionValueParameters)\n                                            \n"}, {"type": "div", "text": "functionValueParameter"}, {"type": "div", "text": "\n                                                (used by\n                                                    functionValueParameters)\n                                            "}, {"type": "a", "text": "functionValueParameters"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0parameterModifiers?\u00a0parameter\u00a0('='\u00a0expression)?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "parameterModifiers"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "parameter"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'='"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nfunctionDeclaration\n\n                                                (used by\n                                                    declaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0'fun'\u00a0typeParameters?\n\u00a0\u00a0\u00a0\u00a0(receiverType\u00a0'.')?\n\u00a0\u00a0\u00a0\u00a0simpleIdentifier\u00a0functionValueParameters\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0type)?\u00a0typeConstraints?\n\u00a0\u00a0\u00a0\u00a0functionBody?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nfunctionDeclaration\n\n                                                (used by\n                                                    declaration)\n                                            \n"}, {"type": "div", "text": "functionDeclaration"}, {"type": "div", "text": "\n                                                (used by\n                                                    declaration)\n                                            "}, {"type": "a", "text": "declaration"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0modifiers?\u00a0'fun'\u00a0typeParameters?\n\u00a0\u00a0\u00a0\u00a0(receiverType\u00a0'.')?\n\u00a0\u00a0\u00a0\u00a0simpleIdentifier\u00a0functionValueParameters\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0type)?\u00a0typeConstraints?\n\u00a0\u00a0\u00a0\u00a0functionBody?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "modifiers"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'fun'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeParameters"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "receiverType"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'.'"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "simpleIdentifier"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "functionValueParameters"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "':'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "type"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeConstraints"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "functionBody"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nfunctionBody\n\n                                                (used by\n                                                    functionDeclaration,                                                     getter,                                                     setter,                                                     anonymousFunction)\n                                            \n\n\n\u00a0\u00a0:\u00a0block\n\u00a0\u00a0|\u00a0'='\u00a0expression\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nfunctionBody\n\n                                                (used by\n                                                    functionDeclaration,                                                     getter,                                                     setter,                                                     anonymousFunction)\n                                            \n"}, {"type": "div", "text": "functionBody"}, {"type": "div", "text": "\n                                                (used by\n                                                    functionDeclaration,                                                     getter,                                                     setter,                                                     anonymousFunction)\n                                            "}, {"type": "a", "text": "functionDeclaration"}, {"type": "a", "text": "getter"}, {"type": "a", "text": "setter"}, {"type": "a", "text": "anonymousFunction"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0block\n\u00a0\u00a0|\u00a0'='\u00a0expression\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "block"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'='"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nvariableDeclaration\n\n                                                (used by\n                                                    multiVariableDeclaration,                                                     propertyDeclaration,                                                     forStatement,                                                     lambdaParameter,                                                     whenSubject)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation*\u00a0simpleIdentifier\u00a0(':'\u00a0type)?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nvariableDeclaration\n\n                                                (used by\n                                                    multiVariableDeclaration,                                                     propertyDeclaration,                                                     forStatement,                                                     lambdaParameter,                                                     whenSubject)\n                                            \n"}, {"type": "div", "text": "variableDeclaration"}, {"type": "div", "text": "\n                                                (used by\n                                                    multiVariableDeclaration,                                                     propertyDeclaration,                                                     forStatement,                                                     lambdaParameter,                                                     whenSubject)\n                                            "}, {"type": "a", "text": "multiVariableDeclaration"}, {"type": "a", "text": "propertyDeclaration"}, {"type": "a", "text": "forStatement"}, {"type": "a", "text": "lambdaParameter"}, {"type": "a", "text": "whenSubject"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0annotation*\u00a0simpleIdentifier\u00a0(':'\u00a0type)?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "annotation"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "simpleIdentifier"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "':'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "type"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nmultiVariableDeclaration\n\n                                                (used by\n                                                    propertyDeclaration,                                                     forStatement,                                                     lambdaParameter)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0variableDeclaration\u00a0(','\u00a0variableDeclaration)*\u00a0','?\u00a0')'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nmultiVariableDeclaration\n\n                                                (used by\n                                                    propertyDeclaration,                                                     forStatement,                                                     lambdaParameter)\n                                            \n"}, {"type": "div", "text": "multiVariableDeclaration"}, {"type": "div", "text": "\n                                                (used by\n                                                    propertyDeclaration,                                                     forStatement,                                                     lambdaParameter)\n                                            "}, {"type": "a", "text": "propertyDeclaration"}, {"type": "a", "text": "forStatement"}, {"type": "a", "text": "lambdaParameter"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'('\u00a0variableDeclaration\u00a0(','\u00a0variableDeclaration)*\u00a0','?\u00a0')'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'('"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "variableDeclaration"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "','"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "variableDeclaration"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "','"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "')'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\nSee Properties and Fields\n"}, {"type": "p", "text": "See Properties and Fields"}, {"type": "a", "text": "Properties and Fields"}, {"type": "div", "text": "\n\npropertyDeclaration\n\n                                                (used by\n                                                    declaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0('val'\u00a0|\u00a0'var')\u00a0typeParameters?\n\u00a0\u00a0\u00a0\u00a0(receiverType\u00a0'.')?\n\u00a0\u00a0\u00a0\u00a0(multiVariableDeclaration\u00a0|\u00a0variableDeclaration)\n\u00a0\u00a0\u00a0\u00a0typeConstraints?\n\u00a0\u00a0\u00a0\u00a0(('='\u00a0expression)\u00a0|\u00a0propertyDelegate)?\u00a0';'?\n\u00a0\u00a0\u00a0\u00a0((getter?\u00a0(semi?\u00a0setter)?)\u00a0|\u00a0(setter?\u00a0(semi?\u00a0getter)?))\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\npropertyDeclaration\n\n                                                (used by\n                                                    declaration)\n                                            \n"}, {"type": "div", "text": "propertyDeclaration"}, {"type": "div", "text": "\n                                                (used by\n                                                    declaration)\n                                            "}, {"type": "a", "text": "declaration"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0modifiers?\u00a0('val'\u00a0|\u00a0'var')\u00a0typeParameters?\n\u00a0\u00a0\u00a0\u00a0(receiverType\u00a0'.')?\n\u00a0\u00a0\u00a0\u00a0(multiVariableDeclaration\u00a0|\u00a0variableDeclaration)\n\u00a0\u00a0\u00a0\u00a0typeConstraints?\n\u00a0\u00a0\u00a0\u00a0(('='\u00a0expression)\u00a0|\u00a0propertyDelegate)?\u00a0';'?\n\u00a0\u00a0\u00a0\u00a0((getter?\u00a0(semi?\u00a0setter)?)\u00a0|\u00a0(setter?\u00a0(semi?\u00a0getter)?))\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "modifiers"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'val'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'var'"}, {"type": "span", "text": ")"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeParameters"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "receiverType"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'.'"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "multiVariableDeclaration"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "variableDeclaration"}, {"type": "span", "text": ")"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeConstraints"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "("}, {"type": "span", "text": "'='"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "span", "text": ")"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "propertyDelegate"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "';'"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "("}, {"type": "a", "text": "getter"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "semi"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "setter"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "span", "text": ")"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "setter"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "semi"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "getter"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "span", "text": ")"}, {"type": "span", "text": ")"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\npropertyDelegate\n\n                                                (used by\n                                                    propertyDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0'by'\u00a0expression\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\npropertyDelegate\n\n                                                (used by\n                                                    propertyDeclaration)\n                                            \n"}, {"type": "div", "text": "propertyDelegate"}, {"type": "div", "text": "\n                                                (used by\n                                                    propertyDeclaration)\n                                            "}, {"type": "a", "text": "propertyDeclaration"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'by'\u00a0expression\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'by'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ngetter\n\n                                                (used by\n                                                    propertyDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0'get'\n\u00a0\u00a0|\u00a0modifiers?\u00a0'get'\u00a0'('\u00a0')'\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0type)?\n\u00a0\u00a0\u00a0\u00a0functionBody\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ngetter\n\n                                                (used by\n                                                    propertyDeclaration)\n                                            \n"}, {"type": "div", "text": "getter"}, {"type": "div", "text": "\n                                                (used by\n                                                    propertyDeclaration)\n                                            "}, {"type": "a", "text": "propertyDeclaration"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0modifiers?\u00a0'get'\n\u00a0\u00a0|\u00a0modifiers?\u00a0'get'\u00a0'('\u00a0')'\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0type)?\n\u00a0\u00a0\u00a0\u00a0functionBody\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "modifiers"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'get'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "modifiers"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'get'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'('"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "')'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "':'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "type"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "functionBody"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nsetter\n\n                                                (used by\n                                                    propertyDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0'set'\n\u00a0\u00a0|\u00a0modifiers?\u00a0'set'\u00a0'('\u00a0parameterWithOptionalType\u00a0','?\u00a0')'\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0type)?\n\u00a0\u00a0\u00a0\u00a0functionBody\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nsetter\n\n                                                (used by\n                                                    propertyDeclaration)\n                                            \n"}, {"type": "div", "text": "setter"}, {"type": "div", "text": "\n                                                (used by\n                                                    propertyDeclaration)\n                                            "}, {"type": "a", "text": "propertyDeclaration"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0modifiers?\u00a0'set'\n\u00a0\u00a0|\u00a0modifiers?\u00a0'set'\u00a0'('\u00a0parameterWithOptionalType\u00a0','?\u00a0')'\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0type)?\n\u00a0\u00a0\u00a0\u00a0functionBody\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "modifiers"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'set'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "modifiers"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'set'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'('"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "parameterWithOptionalType"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "','"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "')'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "':'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "type"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "functionBody"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nparametersWithOptionalType\n\n                                                (used by\n                                                    anonymousFunction)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\n\u00a0\u00a0\u00a0\u00a0(parameterWithOptionalType\u00a0(','\u00a0parameterWithOptionalType)*\u00a0','?)?\u00a0')'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nparametersWithOptionalType\n\n                                                (used by\n                                                    anonymousFunction)\n                                            \n"}, {"type": "div", "text": "parametersWithOptionalType"}, {"type": "div", "text": "\n                                                (used by\n                                                    anonymousFunction)\n                                            "}, {"type": "a", "text": "anonymousFunction"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'('\n\u00a0\u00a0\u00a0\u00a0(parameterWithOptionalType\u00a0(','\u00a0parameterWithOptionalType)*\u00a0','?)?\u00a0')'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'('"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "parameterWithOptionalType"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "','"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "parameterWithOptionalType"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "','"}, {"type": "span", "text": "?"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "')'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nparameterWithOptionalType\n\n                                                (used by\n                                                    setter,                                                     parametersWithOptionalType)\n                                            \n\n\n\u00a0\u00a0:\u00a0parameterModifiers?\u00a0simpleIdentifier\u00a0(':'\u00a0type)?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nparameterWithOptionalType\n\n                                                (used by\n                                                    setter,                                                     parametersWithOptionalType)\n                                            \n"}, {"type": "div", "text": "parameterWithOptionalType"}, {"type": "div", "text": "\n                                                (used by\n                                                    setter,                                                     parametersWithOptionalType)\n                                            "}, {"type": "a", "text": "setter"}, {"type": "a", "text": "parametersWithOptionalType"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0parameterModifiers?\u00a0simpleIdentifier\u00a0(':'\u00a0type)?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "parameterModifiers"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "simpleIdentifier"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "':'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "type"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nparameter\n\n                                                (used by\n                                                    functionValueParameter,                                                     functionTypeParameters)\n                                            \n\n\n\u00a0\u00a0:\u00a0simpleIdentifier\u00a0':'\u00a0type\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nparameter\n\n                                                (used by\n                                                    functionValueParameter,                                                     functionTypeParameters)\n                                            \n"}, {"type": "div", "text": "parameter"}, {"type": "div", "text": "\n                                                (used by\n                                                    functionValueParameter,                                                     functionTypeParameters)\n                                            "}, {"type": "a", "text": "functionValueParameter"}, {"type": "a", "text": "functionTypeParameters"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0simpleIdentifier\u00a0':'\u00a0type\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "simpleIdentifier"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "':'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "type"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\nSee Object expressions and Declarations\n"}, {"type": "p", "text": "See Object expressions and Declarations"}, {"type": "a", "text": "Object expressions and Declarations"}, {"type": "div", "text": "\n\nobjectDeclaration\n\n                                                (used by\n                                                    declaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0'object'\u00a0simpleIdentifier\u00a0(':'\u00a0delegationSpecifiers)?\u00a0classBody?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nobjectDeclaration\n\n                                                (used by\n                                                    declaration)\n                                            \n"}, {"type": "div", "text": "objectDeclaration"}, {"type": "div", "text": "\n                                                (used by\n                                                    declaration)\n                                            "}, {"type": "a", "text": "declaration"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0modifiers?\u00a0'object'\u00a0simpleIdentifier\u00a0(':'\u00a0delegationSpecifiers)?\u00a0classBody?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "modifiers"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'object'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "simpleIdentifier"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "':'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "delegationSpecifiers"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "classBody"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nsecondaryConstructor\n\n                                                (used by\n                                                    classMemberDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0'constructor'\u00a0functionValueParameters\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0constructorDelegationCall)?\u00a0block?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nsecondaryConstructor\n\n                                                (used by\n                                                    classMemberDeclaration)\n                                            \n"}, {"type": "div", "text": "secondaryConstructor"}, {"type": "div", "text": "\n                                                (used by\n                                                    classMemberDeclaration)\n                                            "}, {"type": "a", "text": "classMemberDeclaration"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0modifiers?\u00a0'constructor'\u00a0functionValueParameters\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0constructorDelegationCall)?\u00a0block?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "modifiers"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'constructor'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "functionValueParameters"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "':'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "constructorDelegationCall"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "block"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nconstructorDelegationCall\n\n                                                (used by\n                                                    secondaryConstructor)\n                                            \n\n\n\u00a0\u00a0:\u00a0'this'\u00a0valueArguments\n\u00a0\u00a0|\u00a0'super'\u00a0valueArguments\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nconstructorDelegationCall\n\n                                                (used by\n                                                    secondaryConstructor)\n                                            \n"}, {"type": "div", "text": "constructorDelegationCall"}, {"type": "div", "text": "\n                                                (used by\n                                                    secondaryConstructor)\n                                            "}, {"type": "a", "text": "secondaryConstructor"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'this'\u00a0valueArguments\n\u00a0\u00a0|\u00a0'super'\u00a0valueArguments\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'this'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "valueArguments"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'super'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "valueArguments"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nEnum classes\nSee Enum classes\n\n\n\nenumClassBody\n\n                                                (used by\n                                                    classDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0'{'\u00a0enumEntries?\u00a0(';'\u00a0classMemberDeclarations)?\u00a0'}'\n\u00a0\u00a0; \n\n\n\nenumEntries\n\n                                                (used by\n                                                    enumClassBody)\n                                            \n\n\n\u00a0\u00a0:\u00a0enumEntry\u00a0(','\u00a0enumEntry)*\u00a0','?\n\u00a0\u00a0; \n\n\n\nenumEntry\n\n                                                (used by\n                                                    enumEntries)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0simpleIdentifier\u00a0valueArguments?\u00a0classBody?\n\u00a0\u00a0; \n\n"}, {"type": "div", "text": "\nEnum classes\nSee Enum classes\n"}, {"type": "h3", "text": "Enum classes"}, {"type": "p", "text": "See Enum classes"}, {"type": "a", "text": "Enum classes"}, {"type": "div", "text": "\n\nenumClassBody\n\n                                                (used by\n                                                    classDeclaration)\n                                            \n\n\n\u00a0\u00a0:\u00a0'{'\u00a0enumEntries?\u00a0(';'\u00a0classMemberDeclarations)?\u00a0'}'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nenumClassBody\n\n                                                (used by\n                                                    classDeclaration)\n                                            \n"}, {"type": "div", "text": "enumClassBody"}, {"type": "div", "text": "\n                                                (used by\n                                                    classDeclaration)\n                                            "}, {"type": "a", "text": "classDeclaration"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'{'\u00a0enumEntries?\u00a0(';'\u00a0classMemberDeclarations)?\u00a0'}'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'{'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "enumEntries"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "';'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "classMemberDeclarations"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'}'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nenumEntries\n\n                                                (used by\n                                                    enumClassBody)\n                                            \n\n\n\u00a0\u00a0:\u00a0enumEntry\u00a0(','\u00a0enumEntry)*\u00a0','?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nenumEntries\n\n                                                (used by\n                                                    enumClassBody)\n                                            \n"}, {"type": "div", "text": "enumEntries"}, {"type": "div", "text": "\n                                                (used by\n                                                    enumClassBody)\n                                            "}, {"type": "a", "text": "enumClassBody"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0enumEntry\u00a0(','\u00a0enumEntry)*\u00a0','?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "enumEntry"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "','"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "enumEntry"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "','"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nenumEntry\n\n                                                (used by\n                                                    enumEntries)\n                                            \n\n\n\u00a0\u00a0:\u00a0modifiers?\u00a0simpleIdentifier\u00a0valueArguments?\u00a0classBody?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nenumEntry\n\n                                                (used by\n                                                    enumEntries)\n                                            \n"}, {"type": "div", "text": "enumEntry"}, {"type": "div", "text": "\n                                                (used by\n                                                    enumEntries)\n                                            "}, {"type": "a", "text": "enumEntries"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0modifiers?\u00a0simpleIdentifier\u00a0valueArguments?\u00a0classBody?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "modifiers"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "simpleIdentifier"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "valueArguments"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "classBody"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nTypes\nSee Types\n\n\n\ntype\n\n                                                (used by\n                                                    typeAlias,                                                     classParameter,                                                     typeParameter,                                                     typeConstraint,                                                     functionDeclaration,                                                     variableDeclaration,                                                     getter,                                                     setter,                                                     parameterWithOptionalType,                                                     parameter,                                                     typeProjection,                                                     functionType,                                                     functionTypeParameters,                                                     parenthesizedType,                                                     infixOperation,                                                     asExpression,                                                     lambdaParameter,                                                     anonymousFunction,                                                     superExpression,                                                     typeTest,                                                     catchBlock)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeModifiers?\u00a0(parenthesizedType\u00a0|\u00a0nullableType\u00a0|\u00a0typeReference\u00a0|\u00a0functionType)\n\u00a0\u00a0; \n\n\n\ntypeReference\n\n                                                (used by\n                                                    type,                                                     nullableType,                                                     receiverType)\n                                            \n\n\n\u00a0\u00a0:\u00a0userType\n\u00a0\u00a0|\u00a0'dynamic'\n\u00a0\u00a0; \n\n\n\nnullableType\n\n                                                (used by\n                                                    type,                                                     receiverType)\n                                            \n\n\n\u00a0\u00a0:\u00a0(typeReference\u00a0|\u00a0parenthesizedType)\u00a0quest+\n\u00a0\u00a0; \n\n\n\nquest\n\n                                                (used by\n                                                    nullableType)\n                                            \n\n\n\u00a0\u00a0:\u00a0'?'\n\u00a0\u00a0|\u00a0QUEST_WS\n\u00a0\u00a0; \n\n\n\nuserType\n\n                                                (used by\n                                                    delegationSpecifier,                                                     constructorInvocation,                                                     explicitDelegation,                                                     typeReference,                                                     parenthesizedUserType,                                                     unescapedAnnotation)\n                                            \n\n\n\u00a0\u00a0:\u00a0simpleUserType\u00a0('.'\u00a0simpleUserType)*\n\u00a0\u00a0; \n\n\n\nsimpleUserType\n\n                                                (used by\n                                                    userType)\n                                            \n\n\n\u00a0\u00a0:\u00a0simpleIdentifier\u00a0typeArguments?\n\u00a0\u00a0; \n\n\n\ntypeProjection\n\n                                                (used by\n                                                    typeArguments)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeProjectionModifiers?\u00a0type\n\u00a0\u00a0|\u00a0'*'\n\u00a0\u00a0; \n\n\n\ntypeProjectionModifiers\n\n                                                (used by\n                                                    typeProjection)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeProjectionModifier+\n\u00a0\u00a0; \n\n\n\ntypeProjectionModifier\n\n                                                (used by\n                                                    typeProjectionModifiers)\n                                            \n\n\n\u00a0\u00a0:\u00a0varianceModifier\n\u00a0\u00a0|\u00a0annotation\n\u00a0\u00a0; \n\n\n\nfunctionType\n\n                                                (used by\n                                                    delegationSpecifier,                                                     explicitDelegation,                                                     type)\n                                            \n\n\n\u00a0\u00a0:\u00a0(receiverType\u00a0'.')?\u00a0functionTypeParameters\u00a0'->'\u00a0type\n\u00a0\u00a0; \n\n\n\nfunctionTypeParameters\n\n                                                (used by\n                                                    functionType)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0(parameter\u00a0|\u00a0type)?\u00a0(','\u00a0(parameter\u00a0|\u00a0type))*\u00a0','?\u00a0')'\n\u00a0\u00a0; \n\n\n\nparenthesizedType\n\n                                                (used by\n                                                    type,                                                     nullableType,                                                     receiverType)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0type\u00a0')'\n\u00a0\u00a0; \n\n\n\nreceiverType\n\n                                                (used by\n                                                    functionDeclaration,                                                     propertyDeclaration,                                                     functionType,                                                     callableReference)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeModifiers?\u00a0(parenthesizedType\u00a0|\u00a0nullableType\u00a0|\u00a0typeReference)\n\u00a0\u00a0; \n\n\n\nparenthesizedUserType\n\n                                                (used by\n                                                    parenthesizedUserType)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0userType\u00a0')'\n\u00a0\u00a0|\u00a0'('\u00a0parenthesizedUserType\u00a0')'\n\u00a0\u00a0; \n\n"}, {"type": "div", "text": "\nTypes\nSee Types\n"}, {"type": "h3", "text": "Types"}, {"type": "p", "text": "See Types"}, {"type": "a", "text": "Types"}, {"type": "div", "text": "\n\ntype\n\n                                                (used by\n                                                    typeAlias,                                                     classParameter,                                                     typeParameter,                                                     typeConstraint,                                                     functionDeclaration,                                                     variableDeclaration,                                                     getter,                                                     setter,                                                     parameterWithOptionalType,                                                     parameter,                                                     typeProjection,                                                     functionType,                                                     functionTypeParameters,                                                     parenthesizedType,                                                     infixOperation,                                                     asExpression,                                                     lambdaParameter,                                                     anonymousFunction,                                                     superExpression,                                                     typeTest,                                                     catchBlock)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeModifiers?\u00a0(parenthesizedType\u00a0|\u00a0nullableType\u00a0|\u00a0typeReference\u00a0|\u00a0functionType)\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ntype\n\n                                                (used by\n                                                    typeAlias,                                                     classParameter,                                                     typeParameter,                                                     typeConstraint,                                                     functionDeclaration,                                                     variableDeclaration,                                                     getter,                                                     setter,                                                     parameterWithOptionalType,                                                     parameter,                                                     typeProjection,                                                     functionType,                                                     functionTypeParameters,                                                     parenthesizedType,                                                     infixOperation,                                                     asExpression,                                                     lambdaParameter,                                                     anonymousFunction,                                                     superExpression,                                                     typeTest,                                                     catchBlock)\n                                            \n"}, {"type": "div", "text": "type"}, {"type": "div", "text": "\n                                                (used by\n                                                    typeAlias,                                                     classParameter,                                                     typeParameter,                                                     typeConstraint,                                                     functionDeclaration,                                                     variableDeclaration,                                                     getter,                                                     setter,                                                     parameterWithOptionalType,                                                     parameter,                                                     typeProjection,                                                     functionType,                                                     functionTypeParameters,                                                     parenthesizedType,                                                     infixOperation,                                                     asExpression,                                                     lambdaParameter,                                                     anonymousFunction,                                                     superExpression,                                                     typeTest,                                                     catchBlock)\n                                            "}, {"type": "a", "text": "typeAlias"}, {"type": "a", "text": "classParameter"}, {"type": "a", "text": "typeParameter"}, {"type": "a", "text": "typeConstraint"}, {"type": "a", "text": "functionDeclaration"}, {"type": "a", "text": "variableDeclaration"}, {"type": "a", "text": "getter"}, {"type": "a", "text": "setter"}, {"type": "a", "text": "parameterWithOptionalType"}, {"type": "a", "text": "parameter"}, {"type": "a", "text": "typeProjection"}, {"type": "a", "text": "functionType"}, {"type": "a", "text": "functionTypeParameters"}, {"type": "a", "text": "parenthesizedType"}, {"type": "a", "text": "infixOperation"}, {"type": "a", "text": "asExpression"}, {"type": "a", "text": "lambdaParameter"}, {"type": "a", "text": "anonymousFunction"}, {"type": "a", "text": "superExpression"}, {"type": "a", "text": "typeTest"}, {"type": "a", "text": "catchBlock"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0typeModifiers?\u00a0(parenthesizedType\u00a0|\u00a0nullableType\u00a0|\u00a0typeReference\u00a0|\u00a0functionType)\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeModifiers"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "parenthesizedType"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "nullableType"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeReference"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "functionType"}, {"type": "span", "text": ")"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ntypeReference\n\n                                                (used by\n                                                    type,                                                     nullableType,                                                     receiverType)\n                                            \n\n\n\u00a0\u00a0:\u00a0userType\n\u00a0\u00a0|\u00a0'dynamic'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ntypeReference\n\n                                                (used by\n                                                    type,                                                     nullableType,                                                     receiverType)\n                                            \n"}, {"type": "div", "text": "typeReference"}, {"type": "div", "text": "\n                                                (used by\n                                                    type,                                                     nullableType,                                                     receiverType)\n                                            "}, {"type": "a", "text": "type"}, {"type": "a", "text": "nullableType"}, {"type": "a", "text": "receiverType"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0userType\n\u00a0\u00a0|\u00a0'dynamic'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "userType"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'dynamic'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nnullableType\n\n                                                (used by\n                                                    type,                                                     receiverType)\n                                            \n\n\n\u00a0\u00a0:\u00a0(typeReference\u00a0|\u00a0parenthesizedType)\u00a0quest+\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nnullableType\n\n                                                (used by\n                                                    type,                                                     receiverType)\n                                            \n"}, {"type": "div", "text": "nullableType"}, {"type": "div", "text": "\n                                                (used by\n                                                    type,                                                     receiverType)\n                                            "}, {"type": "a", "text": "type"}, {"type": "a", "text": "receiverType"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0(typeReference\u00a0|\u00a0parenthesizedType)\u00a0quest+\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "typeReference"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "parenthesizedType"}, {"type": "span", "text": ")"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "quest"}, {"type": "span", "text": "+"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nquest\n\n                                                (used by\n                                                    nullableType)\n                                            \n\n\n\u00a0\u00a0:\u00a0'?'\n\u00a0\u00a0|\u00a0QUEST_WS\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nquest\n\n                                                (used by\n                                                    nullableType)\n                                            \n"}, {"type": "div", "text": "quest"}, {"type": "div", "text": "\n                                                (used by\n                                                    nullableType)\n                                            "}, {"type": "a", "text": "nullableType"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'?'\n\u00a0\u00a0|\u00a0QUEST_WS\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'?'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "QUEST_WS"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nuserType\n\n                                                (used by\n                                                    delegationSpecifier,                                                     constructorInvocation,                                                     explicitDelegation,                                                     typeReference,                                                     parenthesizedUserType,                                                     unescapedAnnotation)\n                                            \n\n\n\u00a0\u00a0:\u00a0simpleUserType\u00a0('.'\u00a0simpleUserType)*\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nuserType\n\n                                                (used by\n                                                    delegationSpecifier,                                                     constructorInvocation,                                                     explicitDelegation,                                                     typeReference,                                                     parenthesizedUserType,                                                     unescapedAnnotation)\n                                            \n"}, {"type": "div", "text": "userType"}, {"type": "div", "text": "\n                                                (used by\n                                                    delegationSpecifier,                                                     constructorInvocation,                                                     explicitDelegation,                                                     typeReference,                                                     parenthesizedUserType,                                                     unescapedAnnotation)\n                                            "}, {"type": "a", "text": "delegationSpecifier"}, {"type": "a", "text": "constructorInvocation"}, {"type": "a", "text": "explicitDelegation"}, {"type": "a", "text": "typeReference"}, {"type": "a", "text": "parenthesizedUserType"}, {"type": "a", "text": "unescapedAnnotation"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0simpleUserType\u00a0('.'\u00a0simpleUserType)*\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "simpleUserType"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'.'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "simpleUserType"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nsimpleUserType\n\n                                                (used by\n                                                    userType)\n                                            \n\n\n\u00a0\u00a0:\u00a0simpleIdentifier\u00a0typeArguments?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nsimpleUserType\n\n                                                (used by\n                                                    userType)\n                                            \n"}, {"type": "div", "text": "simpleUserType"}, {"type": "div", "text": "\n                                                (used by\n                                                    userType)\n                                            "}, {"type": "a", "text": "userType"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0simpleIdentifier\u00a0typeArguments?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "simpleIdentifier"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeArguments"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ntypeProjection\n\n                                                (used by\n                                                    typeArguments)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeProjectionModifiers?\u00a0type\n\u00a0\u00a0|\u00a0'*'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ntypeProjection\n\n                                                (used by\n                                                    typeArguments)\n                                            \n"}, {"type": "div", "text": "typeProjection"}, {"type": "div", "text": "\n                                                (used by\n                                                    typeArguments)\n                                            "}, {"type": "a", "text": "typeArguments"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0typeProjectionModifiers?\u00a0type\n\u00a0\u00a0|\u00a0'*'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeProjectionModifiers"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "type"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'*'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ntypeProjectionModifiers\n\n                                                (used by\n                                                    typeProjection)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeProjectionModifier+\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ntypeProjectionModifiers\n\n                                                (used by\n                                                    typeProjection)\n                                            \n"}, {"type": "div", "text": "typeProjectionModifiers"}, {"type": "div", "text": "\n                                                (used by\n                                                    typeProjection)\n                                            "}, {"type": "a", "text": "typeProjection"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0typeProjectionModifier+\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeProjectionModifier"}, {"type": "span", "text": "+"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ntypeProjectionModifier\n\n                                                (used by\n                                                    typeProjectionModifiers)\n                                            \n\n\n\u00a0\u00a0:\u00a0varianceModifier\n\u00a0\u00a0|\u00a0annotation\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ntypeProjectionModifier\n\n                                                (used by\n                                                    typeProjectionModifiers)\n                                            \n"}, {"type": "div", "text": "typeProjectionModifier"}, {"type": "div", "text": "\n                                                (used by\n                                                    typeProjectionModifiers)\n                                            "}, {"type": "a", "text": "typeProjectionModifiers"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0varianceModifier\n\u00a0\u00a0|\u00a0annotation\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "varianceModifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "annotation"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nfunctionType\n\n                                                (used by\n                                                    delegationSpecifier,                                                     explicitDelegation,                                                     type)\n                                            \n\n\n\u00a0\u00a0:\u00a0(receiverType\u00a0'.')?\u00a0functionTypeParameters\u00a0'->'\u00a0type\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nfunctionType\n\n                                                (used by\n                                                    delegationSpecifier,                                                     explicitDelegation,                                                     type)\n                                            \n"}, {"type": "div", "text": "functionType"}, {"type": "div", "text": "\n                                                (used by\n                                                    delegationSpecifier,                                                     explicitDelegation,                                                     type)\n                                            "}, {"type": "a", "text": "delegationSpecifier"}, {"type": "a", "text": "explicitDelegation"}, {"type": "a", "text": "type"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0(receiverType\u00a0'.')?\u00a0functionTypeParameters\u00a0'->'\u00a0type\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "receiverType"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'.'"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "functionTypeParameters"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'->'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "type"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nfunctionTypeParameters\n\n                                                (used by\n                                                    functionType)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0(parameter\u00a0|\u00a0type)?\u00a0(','\u00a0(parameter\u00a0|\u00a0type))*\u00a0','?\u00a0')'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nfunctionTypeParameters\n\n                                                (used by\n                                                    functionType)\n                                            \n"}, {"type": "div", "text": "functionTypeParameters"}, {"type": "div", "text": "\n                                                (used by\n                                                    functionType)\n                                            "}, {"type": "a", "text": "functionType"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'('\u00a0(parameter\u00a0|\u00a0type)?\u00a0(','\u00a0(parameter\u00a0|\u00a0type))*\u00a0','?\u00a0')'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'('"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "parameter"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "type"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "','"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "parameter"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "type"}, {"type": "span", "text": ")"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "','"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "')'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nparenthesizedType\n\n                                                (used by\n                                                    type,                                                     nullableType,                                                     receiverType)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0type\u00a0')'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nparenthesizedType\n\n                                                (used by\n                                                    type,                                                     nullableType,                                                     receiverType)\n                                            \n"}, {"type": "div", "text": "parenthesizedType"}, {"type": "div", "text": "\n                                                (used by\n                                                    type,                                                     nullableType,                                                     receiverType)\n                                            "}, {"type": "a", "text": "type"}, {"type": "a", "text": "nullableType"}, {"type": "a", "text": "receiverType"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'('\u00a0type\u00a0')'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'('"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "type"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "')'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nreceiverType\n\n                                                (used by\n                                                    functionDeclaration,                                                     propertyDeclaration,                                                     functionType,                                                     callableReference)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeModifiers?\u00a0(parenthesizedType\u00a0|\u00a0nullableType\u00a0|\u00a0typeReference)\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nreceiverType\n\n                                                (used by\n                                                    functionDeclaration,                                                     propertyDeclaration,                                                     functionType,                                                     callableReference)\n                                            \n"}, {"type": "div", "text": "receiverType"}, {"type": "div", "text": "\n                                                (used by\n                                                    functionDeclaration,                                                     propertyDeclaration,                                                     functionType,                                                     callableReference)\n                                            "}, {"type": "a", "text": "functionDeclaration"}, {"type": "a", "text": "propertyDeclaration"}, {"type": "a", "text": "functionType"}, {"type": "a", "text": "callableReference"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0typeModifiers?\u00a0(parenthesizedType\u00a0|\u00a0nullableType\u00a0|\u00a0typeReference)\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeModifiers"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "parenthesizedType"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "nullableType"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeReference"}, {"type": "span", "text": ")"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nparenthesizedUserType\n\n                                                (used by\n                                                    parenthesizedUserType)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0userType\u00a0')'\n\u00a0\u00a0|\u00a0'('\u00a0parenthesizedUserType\u00a0')'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nparenthesizedUserType\n\n                                                (used by\n                                                    parenthesizedUserType)\n                                            \n"}, {"type": "div", "text": "parenthesizedUserType"}, {"type": "div", "text": "\n                                                (used by\n                                                    parenthesizedUserType)\n                                            "}, {"type": "a", "text": "parenthesizedUserType"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'('\u00a0userType\u00a0')'\n\u00a0\u00a0|\u00a0'('\u00a0parenthesizedUserType\u00a0')'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'('"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "userType"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "')'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'('"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "parenthesizedUserType"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "')'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nStatements\n\n\n\nstatements\n\n                                                (used by\n                                                    block,                                                     lambdaLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0(statement\u00a0(semis\u00a0statement)*)?\u00a0semis?\n\u00a0\u00a0; \n\n\n\nstatement\n\n                                                (used by\n                                                    script,                                                     statements,                                                     controlStructureBody)\n                                            \n\n\n\u00a0\u00a0:\u00a0(label\u00a0|\u00a0annotation)*\u00a0(declaration\u00a0|\u00a0assignment\u00a0|\u00a0loopStatement\u00a0|\u00a0expression)\n\u00a0\u00a0; \n\n\nSee Returns and jumps\n\n\n\nlabel\n\n                                                (used by\n                                                    statement,                                                     unaryPrefix,                                                     annotatedLambda)\n                                            \n\n\n\u00a0\u00a0:\u00a0simpleIdentifier\u00a0('@'\u00a0|\u00a0AT_POST_WS)\n\u00a0\u00a0; \n\n\n\ncontrolStructureBody\n\n                                                (used by\n                                                    forStatement,                                                     whileStatement,                                                     doWhileStatement,                                                     ifExpression,                                                     whenEntry)\n                                            \n\n\n\u00a0\u00a0:\u00a0block\n\u00a0\u00a0|\u00a0statement\n\u00a0\u00a0; \n\n\n\nblock\n\n                                                (used by\n                                                    anonymousInitializer,                                                     functionBody,                                                     secondaryConstructor,                                                     controlStructureBody,                                                     tryExpression,                                                     catchBlock,                                                     finallyBlock)\n                                            \n\n\n\u00a0\u00a0:\u00a0'{'\u00a0statements\u00a0'}'\n\u00a0\u00a0; \n\n\n\nloopStatement\n\n                                                (used by\n                                                    statement)\n                                            \n\n\n\u00a0\u00a0:\u00a0forStatement\n\u00a0\u00a0|\u00a0whileStatement\n\u00a0\u00a0|\u00a0doWhileStatement\n\u00a0\u00a0; \n\n\n\nforStatement\n\n                                                (used by\n                                                    loopStatement)\n                                            \n\n\n\u00a0\u00a0:\u00a0'for'\n\u00a0\u00a0\u00a0\u00a0'('\u00a0annotation*\u00a0(variableDeclaration\u00a0|\u00a0multiVariableDeclaration)\u00a0'in'\u00a0expression\u00a0')'\n\u00a0\u00a0\u00a0\u00a0controlStructureBody?\n\u00a0\u00a0; \n\n\n\nwhileStatement\n\n                                                (used by\n                                                    loopStatement)\n                                            \n\n\n\u00a0\u00a0:\u00a0'while'\u00a0'('\u00a0expression\u00a0')'\u00a0controlStructureBody\n\u00a0\u00a0|\u00a0'while'\u00a0'('\u00a0expression\u00a0')'\u00a0';'\n\u00a0\u00a0; \n\n\n\ndoWhileStatement\n\n                                                (used by\n                                                    loopStatement)\n                                            \n\n\n\u00a0\u00a0:\u00a0'do'\u00a0controlStructureBody?\u00a0'while'\u00a0'('\u00a0expression\u00a0')'\n\u00a0\u00a0; \n\n\n\nassignment\n\n                                                (used by\n                                                    statement)\n                                            \n\n\n\u00a0\u00a0:\u00a0directlyAssignableExpression\u00a0'='\u00a0expression\n\u00a0\u00a0|\u00a0assignableExpression\u00a0assignmentAndOperator\u00a0expression\n\u00a0\u00a0; \n\n\n\nsemi\n\n                                                (used by\n                                                    script,                                                     packageHeader,                                                     importHeader,                                                     propertyDeclaration,                                                     whenEntry)\n                                            \n\n\n\u00a0\u00a0:\u00a0EOF\n\u00a0\u00a0; \n\n\n\nsemis\n\n                                                (used by\n                                                    topLevelObject,                                                     classMemberDeclarations,                                                     statements)\n                                            \n\n\n\u00a0\u00a0:\u00a0EOF\n\u00a0\u00a0; \n\n"}, {"type": "div", "text": "\nStatements\n"}, {"type": "h3", "text": "Statements"}, {"type": "div", "text": "\n\nstatements\n\n                                                (used by\n                                                    block,                                                     lambdaLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0(statement\u00a0(semis\u00a0statement)*)?\u00a0semis?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nstatements\n\n                                                (used by\n                                                    block,                                                     lambdaLiteral)\n                                            \n"}, {"type": "div", "text": "statements"}, {"type": "div", "text": "\n                                                (used by\n                                                    block,                                                     lambdaLiteral)\n                                            "}, {"type": "a", "text": "block"}, {"type": "a", "text": "lambdaLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0(statement\u00a0(semis\u00a0statement)*)?\u00a0semis?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "statement"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "semis"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "statement"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "semis"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nstatement\n\n                                                (used by\n                                                    script,                                                     statements,                                                     controlStructureBody)\n                                            \n\n\n\u00a0\u00a0:\u00a0(label\u00a0|\u00a0annotation)*\u00a0(declaration\u00a0|\u00a0assignment\u00a0|\u00a0loopStatement\u00a0|\u00a0expression)\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nstatement\n\n                                                (used by\n                                                    script,                                                     statements,                                                     controlStructureBody)\n                                            \n"}, {"type": "div", "text": "statement"}, {"type": "div", "text": "\n                                                (used by\n                                                    script,                                                     statements,                                                     controlStructureBody)\n                                            "}, {"type": "a", "text": "script"}, {"type": "a", "text": "statements"}, {"type": "a", "text": "controlStructureBody"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0(label\u00a0|\u00a0annotation)*\u00a0(declaration\u00a0|\u00a0assignment\u00a0|\u00a0loopStatement\u00a0|\u00a0expression)\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "label"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "annotation"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "declaration"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "assignment"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "loopStatement"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "span", "text": ")"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\nSee Returns and jumps\n"}, {"type": "p", "text": "See Returns and jumps"}, {"type": "a", "text": "Returns and jumps"}, {"type": "div", "text": "\n\nlabel\n\n                                                (used by\n                                                    statement,                                                     unaryPrefix,                                                     annotatedLambda)\n                                            \n\n\n\u00a0\u00a0:\u00a0simpleIdentifier\u00a0('@'\u00a0|\u00a0AT_POST_WS)\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nlabel\n\n                                                (used by\n                                                    statement,                                                     unaryPrefix,                                                     annotatedLambda)\n                                            \n"}, {"type": "div", "text": "label"}, {"type": "div", "text": "\n                                                (used by\n                                                    statement,                                                     unaryPrefix,                                                     annotatedLambda)\n                                            "}, {"type": "a", "text": "statement"}, {"type": "a", "text": "unaryPrefix"}, {"type": "a", "text": "annotatedLambda"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0simpleIdentifier\u00a0('@'\u00a0|\u00a0AT_POST_WS)\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "simpleIdentifier"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'@'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "AT_POST_WS"}, {"type": "span", "text": ")"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ncontrolStructureBody\n\n                                                (used by\n                                                    forStatement,                                                     whileStatement,                                                     doWhileStatement,                                                     ifExpression,                                                     whenEntry)\n                                            \n\n\n\u00a0\u00a0:\u00a0block\n\u00a0\u00a0|\u00a0statement\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ncontrolStructureBody\n\n                                                (used by\n                                                    forStatement,                                                     whileStatement,                                                     doWhileStatement,                                                     ifExpression,                                                     whenEntry)\n                                            \n"}, {"type": "div", "text": "controlStructureBody"}, {"type": "div", "text": "\n                                                (used by\n                                                    forStatement,                                                     whileStatement,                                                     doWhileStatement,                                                     ifExpression,                                                     whenEntry)\n                                            "}, {"type": "a", "text": "forStatement"}, {"type": "a", "text": "whileStatement"}, {"type": "a", "text": "doWhileStatement"}, {"type": "a", "text": "ifExpression"}, {"type": "a", "text": "whenEntry"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0block\n\u00a0\u00a0|\u00a0statement\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "block"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "statement"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nblock\n\n                                                (used by\n                                                    anonymousInitializer,                                                     functionBody,                                                     secondaryConstructor,                                                     controlStructureBody,                                                     tryExpression,                                                     catchBlock,                                                     finallyBlock)\n                                            \n\n\n\u00a0\u00a0:\u00a0'{'\u00a0statements\u00a0'}'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nblock\n\n                                                (used by\n                                                    anonymousInitializer,                                                     functionBody,                                                     secondaryConstructor,                                                     controlStructureBody,                                                     tryExpression,                                                     catchBlock,                                                     finallyBlock)\n                                            \n"}, {"type": "div", "text": "block"}, {"type": "div", "text": "\n                                                (used by\n                                                    anonymousInitializer,                                                     functionBody,                                                     secondaryConstructor,                                                     controlStructureBody,                                                     tryExpression,                                                     catchBlock,                                                     finallyBlock)\n                                            "}, {"type": "a", "text": "anonymousInitializer"}, {"type": "a", "text": "functionBody"}, {"type": "a", "text": "secondaryConstructor"}, {"type": "a", "text": "controlStructureBody"}, {"type": "a", "text": "tryExpression"}, {"type": "a", "text": "catchBlock"}, {"type": "a", "text": "finallyBlock"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'{'\u00a0statements\u00a0'}'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'{'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "statements"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'}'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nloopStatement\n\n                                                (used by\n                                                    statement)\n                                            \n\n\n\u00a0\u00a0:\u00a0forStatement\n\u00a0\u00a0|\u00a0whileStatement\n\u00a0\u00a0|\u00a0doWhileStatement\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nloopStatement\n\n                                                (used by\n                                                    statement)\n                                            \n"}, {"type": "div", "text": "loopStatement"}, {"type": "div", "text": "\n                                                (used by\n                                                    statement)\n                                            "}, {"type": "a", "text": "statement"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0forStatement\n\u00a0\u00a0|\u00a0whileStatement\n\u00a0\u00a0|\u00a0doWhileStatement\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "forStatement"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "whileStatement"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "doWhileStatement"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nforStatement\n\n                                                (used by\n                                                    loopStatement)\n                                            \n\n\n\u00a0\u00a0:\u00a0'for'\n\u00a0\u00a0\u00a0\u00a0'('\u00a0annotation*\u00a0(variableDeclaration\u00a0|\u00a0multiVariableDeclaration)\u00a0'in'\u00a0expression\u00a0')'\n\u00a0\u00a0\u00a0\u00a0controlStructureBody?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nforStatement\n\n                                                (used by\n                                                    loopStatement)\n                                            \n"}, {"type": "div", "text": "forStatement"}, {"type": "div", "text": "\n                                                (used by\n                                                    loopStatement)\n                                            "}, {"type": "a", "text": "loopStatement"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'for'\n\u00a0\u00a0\u00a0\u00a0'('\u00a0annotation*\u00a0(variableDeclaration\u00a0|\u00a0multiVariableDeclaration)\u00a0'in'\u00a0expression\u00a0')'\n\u00a0\u00a0\u00a0\u00a0controlStructureBody?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'for'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'('"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "annotation"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "variableDeclaration"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "multiVariableDeclaration"}, {"type": "span", "text": ")"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'in'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "')'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "controlStructureBody"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nwhileStatement\n\n                                                (used by\n                                                    loopStatement)\n                                            \n\n\n\u00a0\u00a0:\u00a0'while'\u00a0'('\u00a0expression\u00a0')'\u00a0controlStructureBody\n\u00a0\u00a0|\u00a0'while'\u00a0'('\u00a0expression\u00a0')'\u00a0';'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nwhileStatement\n\n                                                (used by\n                                                    loopStatement)\n                                            \n"}, {"type": "div", "text": "whileStatement"}, {"type": "div", "text": "\n                                                (used by\n                                                    loopStatement)\n                                            "}, {"type": "a", "text": "loopStatement"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'while'\u00a0'('\u00a0expression\u00a0')'\u00a0controlStructureBody\n\u00a0\u00a0|\u00a0'while'\u00a0'('\u00a0expression\u00a0')'\u00a0';'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'while'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'('"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "')'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "controlStructureBody"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'while'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'('"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "')'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "';'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ndoWhileStatement\n\n                                                (used by\n                                                    loopStatement)\n                                            \n\n\n\u00a0\u00a0:\u00a0'do'\u00a0controlStructureBody?\u00a0'while'\u00a0'('\u00a0expression\u00a0')'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ndoWhileStatement\n\n                                                (used by\n                                                    loopStatement)\n                                            \n"}, {"type": "div", "text": "doWhileStatement"}, {"type": "div", "text": "\n                                                (used by\n                                                    loopStatement)\n                                            "}, {"type": "a", "text": "loopStatement"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'do'\u00a0controlStructureBody?\u00a0'while'\u00a0'('\u00a0expression\u00a0')'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'do'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "controlStructureBody"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'while'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'('"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "')'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nassignment\n\n                                                (used by\n                                                    statement)\n                                            \n\n\n\u00a0\u00a0:\u00a0directlyAssignableExpression\u00a0'='\u00a0expression\n\u00a0\u00a0|\u00a0assignableExpression\u00a0assignmentAndOperator\u00a0expression\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nassignment\n\n                                                (used by\n                                                    statement)\n                                            \n"}, {"type": "div", "text": "assignment"}, {"type": "div", "text": "\n                                                (used by\n                                                    statement)\n                                            "}, {"type": "a", "text": "statement"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0directlyAssignableExpression\u00a0'='\u00a0expression\n\u00a0\u00a0|\u00a0assignableExpression\u00a0assignmentAndOperator\u00a0expression\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "directlyAssignableExpression"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'='"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "assignableExpression"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "assignmentAndOperator"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nsemi\n\n                                                (used by\n                                                    script,                                                     packageHeader,                                                     importHeader,                                                     propertyDeclaration,                                                     whenEntry)\n                                            \n\n\n\u00a0\u00a0:\u00a0EOF\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nsemi\n\n                                                (used by\n                                                    script,                                                     packageHeader,                                                     importHeader,                                                     propertyDeclaration,                                                     whenEntry)\n                                            \n"}, {"type": "div", "text": "semi"}, {"type": "div", "text": "\n                                                (used by\n                                                    script,                                                     packageHeader,                                                     importHeader,                                                     propertyDeclaration,                                                     whenEntry)\n                                            "}, {"type": "a", "text": "script"}, {"type": "a", "text": "packageHeader"}, {"type": "a", "text": "importHeader"}, {"type": "a", "text": "propertyDeclaration"}, {"type": "a", "text": "whenEntry"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0EOF\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "EOF"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nsemis\n\n                                                (used by\n                                                    topLevelObject,                                                     classMemberDeclarations,                                                     statements)\n                                            \n\n\n\u00a0\u00a0:\u00a0EOF\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nsemis\n\n                                                (used by\n                                                    topLevelObject,                                                     classMemberDeclarations,                                                     statements)\n                                            \n"}, {"type": "div", "text": "semis"}, {"type": "div", "text": "\n                                                (used by\n                                                    topLevelObject,                                                     classMemberDeclarations,                                                     statements)\n                                            "}, {"type": "a", "text": "topLevelObject"}, {"type": "a", "text": "classMemberDeclarations"}, {"type": "a", "text": "statements"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0EOF\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "EOF"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nExpressions\n\n\n\nPrecedence\nTitle\nSymbols\n\n\n\n\nHighest\nPostfix\n++, --, ., ?., ?\n\n\n\u00a0\nPrefix\n-, +, ++, --, !, label\n\n\n\u00a0\nType RHS\n:, as, as?\n\n\n\u00a0\nMultiplicative\n*, /, %\n\n\n\u00a0\nAdditive\n+, -\n\n\n\u00a0\nRange\n..\n\n\n\u00a0\nInfix function\nsimpleIdentifier\n\n\n\u00a0\nElvis\n?:\n\n\n\u00a0\nNamed checks\nin, !in, is, !is\n\n\n\u00a0\nComparison\n<, >, <=, >=\n\n\n\u00a0\nEquality\n==, !==\n\n\n\u00a0\nConjunction\n&&\n\n\n\u00a0\nDisjunction\n||\n\n\n\u00a0\nSpread operator\n*\n\n\nLowest\nAssignment\n=, +=, -=, *=, /=, %=\n\n\n\n\n\n\nexpression\n\n                                                (used by\n                                                    classParameter,                                                     explicitDelegation,                                                     functionValueParameter,                                                     functionBody,                                                     propertyDeclaration,                                                     propertyDelegate,                                                     statement,                                                     forStatement,                                                     whileStatement,                                                     doWhileStatement,                                                     assignment,                                                     comparisonWithLiteralRightSide,                                                     indexingSuffix,                                                     valueArgument,                                                     parenthesizedExpression,                                                     collectionLiteral,                                                     lineStringExpression,                                                     multiLineStringExpression,                                                     ifExpression,                                                     whenSubject,                                                     whenCondition,                                                     rangeTest,                                                     jumpExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0disjunction\n\u00a0\u00a0; \n\n\n\ndisjunction\n\n                                                (used by\n                                                    expression)\n                                            \n\n\n\u00a0\u00a0:\u00a0conjunction\u00a0('||'\u00a0conjunction)*\n\u00a0\u00a0; \n\n\n\nconjunction\n\n                                                (used by\n                                                    disjunction)\n                                            \n\n\n\u00a0\u00a0:\u00a0equality\u00a0('&&'\u00a0equality)*\n\u00a0\u00a0; \n\n\n\nequality\n\n                                                (used by\n                                                    conjunction)\n                                            \n\n\n\u00a0\u00a0:\u00a0comparison\u00a0(equalityOperator\u00a0comparison)*\n\u00a0\u00a0; \n\n\n\ncomparison\n\n                                                (used by\n                                                    equality)\n                                            \n\n\n\u00a0\u00a0:\u00a0infixOperation\u00a0(comparisonOperator\u00a0infixOperation)?\n\u00a0\u00a0; \n\n\n\ninfixOperation\n\n                                                (used by\n                                                    comparison)\n                                            \n\n\n\u00a0\u00a0:\u00a0elvisExpression\u00a0((inOperator\u00a0elvisExpression)\u00a0|\u00a0(isOperator\u00a0type))*\n\u00a0\u00a0; \n\n\n\nelvisExpression\n\n                                                (used by\n                                                    infixOperation)\n                                            \n\n\n\u00a0\u00a0:\u00a0infixFunctionCall\u00a0(elvis\u00a0infixFunctionCall)*\n\u00a0\u00a0; \n\n\n\nelvis\n\n                                                (used by\n                                                    elvisExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'?'\u00a0':'\n\u00a0\u00a0; \n\n\n\ninfixFunctionCall\n\n                                                (used by\n                                                    elvisExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0rangeExpression\u00a0(simpleIdentifier\u00a0rangeExpression)*\n\u00a0\u00a0; \n\n\n\nrangeExpression\n\n                                                (used by\n                                                    infixFunctionCall)\n                                            \n\n\n\u00a0\u00a0:\u00a0additiveExpression\u00a0('..'\u00a0additiveExpression)*\n\u00a0\u00a0; \n\n\n\nadditiveExpression\n\n                                                (used by\n                                                    rangeExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0multiplicativeExpression\u00a0(additiveOperator\u00a0multiplicativeExpression)*\n\u00a0\u00a0; \n\n\n\nmultiplicativeExpression\n\n                                                (used by\n                                                    additiveExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0asExpression\u00a0(multiplicativeOperator\u00a0asExpression)*\n\u00a0\u00a0; \n\n\n\nasExpression\n\n                                                (used by\n                                                    multiplicativeExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0comparisonWithLiteralRightSide\u00a0(asOperator\u00a0type)?\n\u00a0\u00a0; \n\n\n\ncomparisonWithLiteralRightSide\n\n                                                (used by\n                                                    asExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0prefixUnaryExpression\n\u00a0\u00a0\u00a0\u00a0('<'\u00a0literalConstant\u00a0'>'\u00a0(expression\u00a0|\u00a0parenthesizedExpression))*\n\u00a0\u00a0; \n\n\n\nprefixUnaryExpression\n\n                                                (used by\n                                                    comparisonWithLiteralRightSide,                                                     assignableExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0unaryPrefix*\u00a0postfixUnaryExpression\n\u00a0\u00a0; \n\n\n\nunaryPrefix\n\n                                                (used by\n                                                    prefixUnaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation\n\u00a0\u00a0|\u00a0label\n\u00a0\u00a0|\u00a0prefixUnaryOperator\n\u00a0\u00a0; \n\n\n\npostfixUnaryExpression\n\n                                                (used by\n                                                    prefixUnaryExpression,                                                     directlyAssignableExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0primaryExpression\n\u00a0\u00a0|\u00a0primaryExpression\u00a0postfixUnarySuffix+\n\u00a0\u00a0; \n\n\n\npostfixUnarySuffix\n\n                                                (used by\n                                                    postfixUnaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0postfixUnaryOperator\n\u00a0\u00a0|\u00a0typeArguments\n\u00a0\u00a0|\u00a0callSuffix\n\u00a0\u00a0|\u00a0indexingSuffix\n\u00a0\u00a0|\u00a0navigationSuffix\n\u00a0\u00a0; \n\n\n\ndirectlyAssignableExpression\n\n                                                (used by\n                                                    assignment,                                                     parenthesizedDirectlyAssignableExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0postfixUnaryExpression\u00a0assignableSuffix\n\u00a0\u00a0|\u00a0simpleIdentifier\n\u00a0\u00a0|\u00a0parenthesizedDirectlyAssignableExpression\n\u00a0\u00a0; \n\n\n\nparenthesizedDirectlyAssignableExpression\n\n                                                (used by\n                                                    directlyAssignableExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0directlyAssignableExpression\u00a0')'\n\u00a0\u00a0; \n\n\n\nassignableExpression\n\n                                                (used by\n                                                    assignment,                                                     parenthesizedAssignableExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0prefixUnaryExpression\n\u00a0\u00a0|\u00a0parenthesizedAssignableExpression\n\u00a0\u00a0; \n\n\n\nparenthesizedAssignableExpression\n\n                                                (used by\n                                                    assignableExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0assignableExpression\u00a0')'\n\u00a0\u00a0; \n\n\n\nassignableSuffix\n\n                                                (used by\n                                                    directlyAssignableExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeArguments\n\u00a0\u00a0|\u00a0indexingSuffix\n\u00a0\u00a0|\u00a0navigationSuffix\n\u00a0\u00a0; \n\n\n\nindexingSuffix\n\n                                                (used by\n                                                    postfixUnarySuffix,                                                     assignableSuffix)\n                                            \n\n\n\u00a0\u00a0:\u00a0'['\u00a0expression\u00a0(','\u00a0expression)*\u00a0','?\u00a0']'\n\u00a0\u00a0; \n\n\n\nnavigationSuffix\n\n                                                (used by\n                                                    postfixUnarySuffix,                                                     assignableSuffix)\n                                            \n\n\n\u00a0\u00a0:\u00a0memberAccessOperator\u00a0(simpleIdentifier\u00a0|\u00a0parenthesizedExpression\u00a0|\u00a0'class')\n\u00a0\u00a0; \n\n\n\ncallSuffix\n\n                                                (used by\n                                                    postfixUnarySuffix)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeArguments?\u00a0valueArguments?\u00a0annotatedLambda\n\u00a0\u00a0|\u00a0typeArguments?\u00a0valueArguments\n\u00a0\u00a0; \n\n\n\nannotatedLambda\n\n                                                (used by\n                                                    callSuffix)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation*\u00a0label?\u00a0lambdaLiteral\n\u00a0\u00a0; \n\n\n\ntypeArguments\n\n                                                (used by\n                                                    simpleUserType,                                                     postfixUnarySuffix,                                                     assignableSuffix,                                                     callSuffix)\n                                            \n\n\n\u00a0\u00a0:\u00a0'<'\u00a0typeProjection\u00a0(','\u00a0typeProjection)*\u00a0','?\u00a0'>'\n\u00a0\u00a0; \n\n\n\nvalueArguments\n\n                                                (used by\n                                                    constructorInvocation,                                                     constructorDelegationCall,                                                     enumEntry,                                                     callSuffix)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0')'\n\u00a0\u00a0|\u00a0'('\u00a0valueArgument\u00a0(','\u00a0valueArgument)*\u00a0','?\u00a0')'\n\u00a0\u00a0; \n\n\n\nvalueArgument\n\n                                                (used by\n                                                    valueArguments)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation?\u00a0(simpleIdentifier\u00a0'=')?\u00a0'*'?\u00a0expression\n\u00a0\u00a0; \n\n\n\nprimaryExpression\n\n                                                (used by\n                                                    postfixUnaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0parenthesizedExpression\n\u00a0\u00a0|\u00a0simpleIdentifier\n\u00a0\u00a0|\u00a0literalConstant\n\u00a0\u00a0|\u00a0stringLiteral\n\u00a0\u00a0|\u00a0callableReference\n\u00a0\u00a0|\u00a0functionLiteral\n\u00a0\u00a0|\u00a0objectLiteral\n\u00a0\u00a0|\u00a0collectionLiteral\n\u00a0\u00a0|\u00a0thisExpression\n\u00a0\u00a0|\u00a0superExpression\n\u00a0\u00a0|\u00a0ifExpression\n\u00a0\u00a0|\u00a0whenExpression\n\u00a0\u00a0|\u00a0tryExpression\n\u00a0\u00a0|\u00a0jumpExpression\n\u00a0\u00a0; \n\n\n\nparenthesizedExpression\n\n                                                (used by\n                                                    comparisonWithLiteralRightSide,                                                     navigationSuffix,                                                     primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0expression\u00a0')'\n\u00a0\u00a0; \n\n\n\ncollectionLiteral\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'['\u00a0expression\u00a0(','\u00a0expression)*\u00a0','?\u00a0']'\n\u00a0\u00a0|\u00a0'['\u00a0']'\n\u00a0\u00a0; \n\n\n\nliteralConstant\n\n                                                (used by\n                                                    comparisonWithLiteralRightSide,                                                     primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0BooleanLiteral\n\u00a0\u00a0|\u00a0IntegerLiteral\n\u00a0\u00a0|\u00a0HexLiteral\n\u00a0\u00a0|\u00a0BinLiteral\n\u00a0\u00a0|\u00a0CharacterLiteral\n\u00a0\u00a0|\u00a0RealLiteral\n\u00a0\u00a0|\u00a0'null'\n\u00a0\u00a0|\u00a0LongLiteral\n\u00a0\u00a0|\u00a0UnsignedLiteral\n\u00a0\u00a0; \n\n\n\nstringLiteral\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0lineStringLiteral\n\u00a0\u00a0|\u00a0multiLineStringLiteral\n\u00a0\u00a0; \n\n\n\nlineStringLiteral\n\n                                                (used by\n                                                    stringLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'\"'\u00a0(lineStringContent\u00a0|\u00a0lineStringExpression)*\u00a0'\"'\n\u00a0\u00a0; \n\n\n\nmultiLineStringLiteral\n\n                                                (used by\n                                                    stringLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'\"\"\"'\u00a0(multiLineStringContent\u00a0|\u00a0multiLineStringExpression\u00a0|\u00a0'\"')*\n\u00a0\u00a0\u00a0\u00a0TRIPLE_QUOTE_CLOSE\n\u00a0\u00a0; \n\n\n\nlineStringContent\n\n                                                (used by\n                                                    lineStringLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0LineStrText\n\u00a0\u00a0|\u00a0LineStrEscapedChar\n\u00a0\u00a0|\u00a0LineStrRef\n\u00a0\u00a0; \n\n\n\nlineStringExpression\n\n                                                (used by\n                                                    lineStringLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'${'\u00a0expression\u00a0'}'\n\u00a0\u00a0; \n\n\n\nmultiLineStringContent\n\n                                                (used by\n                                                    multiLineStringLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0MultiLineStrText\n\u00a0\u00a0|\u00a0'\"'\n\u00a0\u00a0|\u00a0MultiLineStrRef\n\u00a0\u00a0; \n\n\n\nmultiLineStringExpression\n\n                                                (used by\n                                                    multiLineStringLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'${'\u00a0expression\u00a0'}'\n\u00a0\u00a0; \n\n\n\nlambdaLiteral\n\n                                                (used by\n                                                    annotatedLambda,                                                     functionLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'{'\u00a0statements\u00a0'}'\n\u00a0\u00a0|\u00a0'{'\u00a0lambdaParameters?\u00a0'->'\u00a0statements\u00a0'}'\n\u00a0\u00a0; \n\n\n\nlambdaParameters\n\n                                                (used by\n                                                    lambdaLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0lambdaParameter\u00a0(','\u00a0lambdaParameter)*\u00a0','?\n\u00a0\u00a0; \n\n\n\nlambdaParameter\n\n                                                (used by\n                                                    lambdaParameters)\n                                            \n\n\n\u00a0\u00a0:\u00a0variableDeclaration\n\u00a0\u00a0|\u00a0multiVariableDeclaration\u00a0(':'\u00a0type)?\n\u00a0\u00a0; \n\n\n\nanonymousFunction\n\n                                                (used by\n                                                    functionLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'fun'\u00a0(type\u00a0'.')?\u00a0parametersWithOptionalType\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0type)?\u00a0typeConstraints?\n\u00a0\u00a0\u00a0\u00a0functionBody?\n\u00a0\u00a0; \n\n\n\nfunctionLiteral\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0lambdaLiteral\n\u00a0\u00a0|\u00a0anonymousFunction\n\u00a0\u00a0; \n\n\n\nobjectLiteral\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'object'\u00a0':'\u00a0delegationSpecifiers\u00a0classBody\n\u00a0\u00a0|\u00a0'object'\u00a0classBody\n\u00a0\u00a0; \n\n\n\nthisExpression\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'this'\n\u00a0\u00a0|\u00a0THIS_AT\n\u00a0\u00a0; \n\n\n\nsuperExpression\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'super'\u00a0('<'\u00a0type\u00a0'>')?\u00a0('@'\u00a0simpleIdentifier)?\n\u00a0\u00a0|\u00a0SUPER_AT\n\u00a0\u00a0; \n\n\n\nifExpression\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'if'\u00a0'('\u00a0expression\u00a0')'\n\u00a0\u00a0\u00a0\u00a0(controlStructureBody\u00a0|\u00a0';')\n\u00a0\u00a0|\u00a0'if'\u00a0'('\u00a0expression\u00a0')'\n\u00a0\u00a0\u00a0\u00a0controlStructureBody?\u00a0';'?\u00a0'else'\u00a0(controlStructureBody\u00a0|\u00a0';')\n\u00a0\u00a0; \n\n\n\nwhenSubject\n\n                                                (used by\n                                                    whenExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0(annotation*\u00a0'val'\u00a0variableDeclaration\u00a0'=')?\u00a0expression\u00a0')'\n\u00a0\u00a0; \n\n\n\nwhenExpression\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'when'\u00a0whenSubject?\u00a0'{'\u00a0whenEntry*\u00a0'}'\n\u00a0\u00a0; \n\n\n\nwhenEntry\n\n                                                (used by\n                                                    whenExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0whenCondition\u00a0(','\u00a0whenCondition)*\u00a0','?\u00a0'->'\u00a0controlStructureBody\u00a0semi?\n\u00a0\u00a0|\u00a0'else'\u00a0'->'\u00a0controlStructureBody\u00a0semi?\n\u00a0\u00a0; \n\n\n\nwhenCondition\n\n                                                (used by\n                                                    whenEntry)\n                                            \n\n\n\u00a0\u00a0:\u00a0expression\n\u00a0\u00a0|\u00a0rangeTest\n\u00a0\u00a0|\u00a0typeTest\n\u00a0\u00a0; \n\n\n\nrangeTest\n\n                                                (used by\n                                                    whenCondition)\n                                            \n\n\n\u00a0\u00a0:\u00a0inOperator\u00a0expression\n\u00a0\u00a0; \n\n\n\ntypeTest\n\n                                                (used by\n                                                    whenCondition)\n                                            \n\n\n\u00a0\u00a0:\u00a0isOperator\u00a0type\n\u00a0\u00a0; \n\n\n\ntryExpression\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'try'\u00a0block\u00a0((catchBlock+\u00a0finallyBlock?)\u00a0|\u00a0finallyBlock)\n\u00a0\u00a0; \n\n\n\ncatchBlock\n\n                                                (used by\n                                                    tryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'catch'\u00a0'('\u00a0annotation*\u00a0simpleIdentifier\u00a0':'\u00a0type\u00a0','?\u00a0')'\u00a0block\n\u00a0\u00a0; \n\n\n\nfinallyBlock\n\n                                                (used by\n                                                    tryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'finally'\u00a0block\n\u00a0\u00a0; \n\n\n\njumpExpression\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'throw'\u00a0expression\n\u00a0\u00a0|\u00a0('return'\u00a0|\u00a0RETURN_AT)\u00a0expression?\n\u00a0\u00a0|\u00a0'continue'\n\u00a0\u00a0|\u00a0CONTINUE_AT\n\u00a0\u00a0|\u00a0'break'\n\u00a0\u00a0|\u00a0BREAK_AT\n\u00a0\u00a0; \n\n\n\ncallableReference\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0(receiverType?\u00a0'::'\u00a0(simpleIdentifier\u00a0|\u00a0'class'))\n\u00a0\u00a0; \n\n\n\nassignmentAndOperator\n\n                                                (used by\n                                                    assignment)\n                                            \n\n\n\u00a0\u00a0:\u00a0'+='\n\u00a0\u00a0|\u00a0'-='\n\u00a0\u00a0|\u00a0'*='\n\u00a0\u00a0|\u00a0'/='\n\u00a0\u00a0|\u00a0'%='\n\u00a0\u00a0; \n\n\n\nequalityOperator\n\n                                                (used by\n                                                    equality)\n                                            \n\n\n\u00a0\u00a0:\u00a0'!='\n\u00a0\u00a0|\u00a0'!=='\n\u00a0\u00a0|\u00a0'=='\n\u00a0\u00a0|\u00a0'==='\n\u00a0\u00a0; \n\n\n\ncomparisonOperator\n\n                                                (used by\n                                                    comparison)\n                                            \n\n\n\u00a0\u00a0:\u00a0'<'\n\u00a0\u00a0|\u00a0'>'\n\u00a0\u00a0|\u00a0'<='\n\u00a0\u00a0|\u00a0'>='\n\u00a0\u00a0; \n\n\n\ninOperator\n\n                                                (used by\n                                                    infixOperation,                                                     rangeTest)\n                                            \n\n\n\u00a0\u00a0:\u00a0'in'\n\u00a0\u00a0|\u00a0NOT_IN\n\u00a0\u00a0; \n\n\n\nisOperator\n\n                                                (used by\n                                                    infixOperation,                                                     typeTest)\n                                            \n\n\n\u00a0\u00a0:\u00a0'is'\n\u00a0\u00a0|\u00a0NOT_IS\n\u00a0\u00a0; \n\n\n\nadditiveOperator\n\n                                                (used by\n                                                    additiveExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'+'\n\u00a0\u00a0|\u00a0'-'\n\u00a0\u00a0; \n\n\n\nmultiplicativeOperator\n\n                                                (used by\n                                                    multiplicativeExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'*'\n\u00a0\u00a0|\u00a0'/'\n\u00a0\u00a0|\u00a0'%'\n\u00a0\u00a0; \n\n\n\nasOperator\n\n                                                (used by\n                                                    asExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'as'\n\u00a0\u00a0|\u00a0'as?'\n\u00a0\u00a0; \n\n\n\nprefixUnaryOperator\n\n                                                (used by\n                                                    unaryPrefix)\n                                            \n\n\n\u00a0\u00a0:\u00a0'++'\n\u00a0\u00a0|\u00a0'--'\n\u00a0\u00a0|\u00a0'-'\n\u00a0\u00a0|\u00a0'+'\n\u00a0\u00a0|\u00a0excl\n\u00a0\u00a0; \n\n\n\npostfixUnaryOperator\n\n                                                (used by\n                                                    postfixUnarySuffix)\n                                            \n\n\n\u00a0\u00a0:\u00a0'++'\n\u00a0\u00a0|\u00a0'--'\n\u00a0\u00a0|\u00a0'!'\u00a0excl\n\u00a0\u00a0; \n\n\n\nexcl\n\n                                                (used by\n                                                    prefixUnaryOperator,                                                     postfixUnaryOperator)\n                                            \n\n\n\u00a0\u00a0:\u00a0'!'\n\u00a0\u00a0|\u00a0EXCL_WS\n\u00a0\u00a0; \n\n\n\nmemberAccessOperator\n\n                                                (used by\n                                                    navigationSuffix)\n                                            \n\n\n\u00a0\u00a0:\u00a0'.'\n\u00a0\u00a0|\u00a0safeNav\n\u00a0\u00a0|\u00a0'::'\n\u00a0\u00a0; \n\n\n\nsafeNav\n\n                                                (used by\n                                                    memberAccessOperator)\n                                            \n\n\n\u00a0\u00a0:\u00a0'?'\u00a0'.'\n\u00a0\u00a0; \n\n"}, {"type": "div", "text": "\nExpressions\n\n\n\nPrecedence\nTitle\nSymbols\n\n\n\n\nHighest\nPostfix\n++, --, ., ?., ?\n\n\n\u00a0\nPrefix\n-, +, ++, --, !, label\n\n\n\u00a0\nType RHS\n:, as, as?\n\n\n\u00a0\nMultiplicative\n*, /, %\n\n\n\u00a0\nAdditive\n+, -\n\n\n\u00a0\nRange\n..\n\n\n\u00a0\nInfix function\nsimpleIdentifier\n\n\n\u00a0\nElvis\n?:\n\n\n\u00a0\nNamed checks\nin, !in, is, !is\n\n\n\u00a0\nComparison\n<, >, <=, >=\n\n\n\u00a0\nEquality\n==, !==\n\n\n\u00a0\nConjunction\n&&\n\n\n\u00a0\nDisjunction\n||\n\n\n\u00a0\nSpread operator\n*\n\n\nLowest\nAssignment\n=, +=, -=, *=, /=, %=\n\n\n\n"}, {"type": "h3", "text": "Expressions"}, {"type": "table", "text": "\n\n\nPrecedence\nTitle\nSymbols\n\n\n\n\nHighest\nPostfix\n++, --, ., ?., ?\n\n\n\u00a0\nPrefix\n-, +, ++, --, !, label\n\n\n\u00a0\nType RHS\n:, as, as?\n\n\n\u00a0\nMultiplicative\n*, /, %\n\n\n\u00a0\nAdditive\n+, -\n\n\n\u00a0\nRange\n..\n\n\n\u00a0\nInfix function\nsimpleIdentifier\n\n\n\u00a0\nElvis\n?:\n\n\n\u00a0\nNamed checks\nin, !in, is, !is\n\n\n\u00a0\nComparison\n<, >, <=, >=\n\n\n\u00a0\nEquality\n==, !==\n\n\n\u00a0\nConjunction\n&&\n\n\n\u00a0\nDisjunction\n||\n\n\n\u00a0\nSpread operator\n*\n\n\nLowest\nAssignment\n=, +=, -=, *=, /=, %=\n\n\n"}, {"type": "thead", "text": "\n\nPrecedence\nTitle\nSymbols\n\n"}, {"type": "tr", "text": "\nPrecedence\nTitle\nSymbols\n"}, {"type": "th", "text": "Precedence"}, {"type": "th", "text": "Title"}, {"type": "th", "text": "Symbols"}, {"type": "tbody", "text": "\n\nHighest\nPostfix\n++, --, ., ?., ?\n\n\n\u00a0\nPrefix\n-, +, ++, --, !, label\n\n\n\u00a0\nType RHS\n:, as, as?\n\n\n\u00a0\nMultiplicative\n*, /, %\n\n\n\u00a0\nAdditive\n+, -\n\n\n\u00a0\nRange\n..\n\n\n\u00a0\nInfix function\nsimpleIdentifier\n\n\n\u00a0\nElvis\n?:\n\n\n\u00a0\nNamed checks\nin, !in, is, !is\n\n\n\u00a0\nComparison\n<, >, <=, >=\n\n\n\u00a0\nEquality\n==, !==\n\n\n\u00a0\nConjunction\n&&\n\n\n\u00a0\nDisjunction\n||\n\n\n\u00a0\nSpread operator\n*\n\n\nLowest\nAssignment\n=, +=, -=, *=, /=, %=\n\n"}, {"type": "tr", "text": "\nHighest\nPostfix\n++, --, ., ?., ?\n"}, {"type": "td", "text": "Highest"}, {"type": "td", "text": "Postfix"}, {"type": "td", "text": "++, --, ., ?., ?"}, {"type": "code", "text": "++"}, {"type": "code", "text": "--"}, {"type": "code", "text": "."}, {"type": "code", "text": "?."}, {"type": "code", "text": "?"}, {"type": "tr", "text": "\n\u00a0\nPrefix\n-, +, ++, --, !, label\n"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "Prefix"}, {"type": "td", "text": "-, +, ++, --, !, label"}, {"type": "code", "text": "-"}, {"type": "code", "text": "+"}, {"type": "code", "text": "++"}, {"type": "code", "text": "--"}, {"type": "code", "text": "!"}, {"type": "a", "text": "label"}, {"type": "code", "text": "label"}, {"type": "tr", "text": "\n\u00a0\nType RHS\n:, as, as?\n"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "Type RHS"}, {"type": "td", "text": ":, as, as?"}, {"type": "code", "text": ":"}, {"type": "code", "text": "as"}, {"type": "code", "text": "as?"}, {"type": "tr", "text": "\n\u00a0\nMultiplicative\n*, /, %\n"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "Multiplicative"}, {"type": "td", "text": "*, /, %"}, {"type": "code", "text": "*"}, {"type": "code", "text": "/"}, {"type": "code", "text": "%"}, {"type": "tr", "text": "\n\u00a0\nAdditive\n+, -\n"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "Additive"}, {"type": "td", "text": "+, -"}, {"type": "code", "text": "+"}, {"type": "code", "text": "-"}, {"type": "tr", "text": "\n\u00a0\nRange\n..\n"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "Range"}, {"type": "td", "text": ".."}, {"type": "code", "text": ".."}, {"type": "tr", "text": "\n\u00a0\nInfix function\nsimpleIdentifier\n"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "Infix function"}, {"type": "td", "text": "simpleIdentifier"}, {"type": "a", "text": "simpleIdentifier"}, {"type": "code", "text": "simpleIdentifier"}, {"type": "tr", "text": "\n\u00a0\nElvis\n?:\n"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "Elvis"}, {"type": "td", "text": "?:"}, {"type": "code", "text": "?:"}, {"type": "tr", "text": "\n\u00a0\nNamed checks\nin, !in, is, !is\n"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "Named checks"}, {"type": "td", "text": "in, !in, is, !is"}, {"type": "code", "text": "in"}, {"type": "code", "text": "!in"}, {"type": "code", "text": "is"}, {"type": "code", "text": "!is"}, {"type": "tr", "text": "\n\u00a0\nComparison\n<, >, <=, >=\n"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "Comparison"}, {"type": "td", "text": "<, >, <=, >="}, {"type": "code", "text": "<"}, {"type": "code", "text": ">"}, {"type": "code", "text": "<="}, {"type": "code", "text": ">="}, {"type": "tr", "text": "\n\u00a0\nEquality\n==, !==\n"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "Equality"}, {"type": "td", "text": "==, !=="}, {"type": "code", "text": "=="}, {"type": "code", "text": "!=="}, {"type": "tr", "text": "\n\u00a0\nConjunction\n&&\n"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "Conjunction"}, {"type": "td", "text": "&&"}, {"type": "code", "text": "&&"}, {"type": "tr", "text": "\n\u00a0\nDisjunction\n||\n"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "Disjunction"}, {"type": "td", "text": "||"}, {"type": "code", "text": "||"}, {"type": "tr", "text": "\n\u00a0\nSpread operator\n*\n"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "Spread operator"}, {"type": "td", "text": "*"}, {"type": "code", "text": "*"}, {"type": "tr", "text": "\nLowest\nAssignment\n=, +=, -=, *=, /=, %=\n"}, {"type": "td", "text": "Lowest"}, {"type": "td", "text": "Assignment"}, {"type": "td", "text": "=, +=, -=, *=, /=, %="}, {"type": "code", "text": "="}, {"type": "code", "text": "+="}, {"type": "code", "text": "-="}, {"type": "code", "text": "*="}, {"type": "code", "text": "/="}, {"type": "code", "text": "%="}, {"type": "div", "text": "\n\nexpression\n\n                                                (used by\n                                                    classParameter,                                                     explicitDelegation,                                                     functionValueParameter,                                                     functionBody,                                                     propertyDeclaration,                                                     propertyDelegate,                                                     statement,                                                     forStatement,                                                     whileStatement,                                                     doWhileStatement,                                                     assignment,                                                     comparisonWithLiteralRightSide,                                                     indexingSuffix,                                                     valueArgument,                                                     parenthesizedExpression,                                                     collectionLiteral,                                                     lineStringExpression,                                                     multiLineStringExpression,                                                     ifExpression,                                                     whenSubject,                                                     whenCondition,                                                     rangeTest,                                                     jumpExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0disjunction\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nexpression\n\n                                                (used by\n                                                    classParameter,                                                     explicitDelegation,                                                     functionValueParameter,                                                     functionBody,                                                     propertyDeclaration,                                                     propertyDelegate,                                                     statement,                                                     forStatement,                                                     whileStatement,                                                     doWhileStatement,                                                     assignment,                                                     comparisonWithLiteralRightSide,                                                     indexingSuffix,                                                     valueArgument,                                                     parenthesizedExpression,                                                     collectionLiteral,                                                     lineStringExpression,                                                     multiLineStringExpression,                                                     ifExpression,                                                     whenSubject,                                                     whenCondition,                                                     rangeTest,                                                     jumpExpression)\n                                            \n"}, {"type": "div", "text": "expression"}, {"type": "div", "text": "\n                                                (used by\n                                                    classParameter,                                                     explicitDelegation,                                                     functionValueParameter,                                                     functionBody,                                                     propertyDeclaration,                                                     propertyDelegate,                                                     statement,                                                     forStatement,                                                     whileStatement,                                                     doWhileStatement,                                                     assignment,                                                     comparisonWithLiteralRightSide,                                                     indexingSuffix,                                                     valueArgument,                                                     parenthesizedExpression,                                                     collectionLiteral,                                                     lineStringExpression,                                                     multiLineStringExpression,                                                     ifExpression,                                                     whenSubject,                                                     whenCondition,                                                     rangeTest,                                                     jumpExpression)\n                                            "}, {"type": "a", "text": "classParameter"}, {"type": "a", "text": "explicitDelegation"}, {"type": "a", "text": "functionValueParameter"}, {"type": "a", "text": "functionBody"}, {"type": "a", "text": "propertyDeclaration"}, {"type": "a", "text": "propertyDelegate"}, {"type": "a", "text": "statement"}, {"type": "a", "text": "forStatement"}, {"type": "a", "text": "whileStatement"}, {"type": "a", "text": "doWhileStatement"}, {"type": "a", "text": "assignment"}, {"type": "a", "text": "comparisonWithLiteralRightSide"}, {"type": "a", "text": "indexingSuffix"}, {"type": "a", "text": "valueArgument"}, {"type": "a", "text": "parenthesizedExpression"}, {"type": "a", "text": "collectionLiteral"}, {"type": "a", "text": "lineStringExpression"}, {"type": "a", "text": "multiLineStringExpression"}, {"type": "a", "text": "ifExpression"}, {"type": "a", "text": "whenSubject"}, {"type": "a", "text": "whenCondition"}, {"type": "a", "text": "rangeTest"}, {"type": "a", "text": "jumpExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0disjunction\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "disjunction"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ndisjunction\n\n                                                (used by\n                                                    expression)\n                                            \n\n\n\u00a0\u00a0:\u00a0conjunction\u00a0('||'\u00a0conjunction)*\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ndisjunction\n\n                                                (used by\n                                                    expression)\n                                            \n"}, {"type": "div", "text": "disjunction"}, {"type": "div", "text": "\n                                                (used by\n                                                    expression)\n                                            "}, {"type": "a", "text": "expression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0conjunction\u00a0('||'\u00a0conjunction)*\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "conjunction"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'||'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "conjunction"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nconjunction\n\n                                                (used by\n                                                    disjunction)\n                                            \n\n\n\u00a0\u00a0:\u00a0equality\u00a0('&&'\u00a0equality)*\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nconjunction\n\n                                                (used by\n                                                    disjunction)\n                                            \n"}, {"type": "div", "text": "conjunction"}, {"type": "div", "text": "\n                                                (used by\n                                                    disjunction)\n                                            "}, {"type": "a", "text": "disjunction"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0equality\u00a0('&&'\u00a0equality)*\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "equality"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'&&'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "equality"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nequality\n\n                                                (used by\n                                                    conjunction)\n                                            \n\n\n\u00a0\u00a0:\u00a0comparison\u00a0(equalityOperator\u00a0comparison)*\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nequality\n\n                                                (used by\n                                                    conjunction)\n                                            \n"}, {"type": "div", "text": "equality"}, {"type": "div", "text": "\n                                                (used by\n                                                    conjunction)\n                                            "}, {"type": "a", "text": "conjunction"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0comparison\u00a0(equalityOperator\u00a0comparison)*\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "comparison"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "equalityOperator"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "comparison"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ncomparison\n\n                                                (used by\n                                                    equality)\n                                            \n\n\n\u00a0\u00a0:\u00a0infixOperation\u00a0(comparisonOperator\u00a0infixOperation)?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ncomparison\n\n                                                (used by\n                                                    equality)\n                                            \n"}, {"type": "div", "text": "comparison"}, {"type": "div", "text": "\n                                                (used by\n                                                    equality)\n                                            "}, {"type": "a", "text": "equality"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0infixOperation\u00a0(comparisonOperator\u00a0infixOperation)?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "infixOperation"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "comparisonOperator"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "infixOperation"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ninfixOperation\n\n                                                (used by\n                                                    comparison)\n                                            \n\n\n\u00a0\u00a0:\u00a0elvisExpression\u00a0((inOperator\u00a0elvisExpression)\u00a0|\u00a0(isOperator\u00a0type))*\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ninfixOperation\n\n                                                (used by\n                                                    comparison)\n                                            \n"}, {"type": "div", "text": "infixOperation"}, {"type": "div", "text": "\n                                                (used by\n                                                    comparison)\n                                            "}, {"type": "a", "text": "comparison"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0elvisExpression\u00a0((inOperator\u00a0elvisExpression)\u00a0|\u00a0(isOperator\u00a0type))*\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "elvisExpression"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "("}, {"type": "a", "text": "inOperator"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "elvisExpression"}, {"type": "span", "text": ")"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "isOperator"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "type"}, {"type": "span", "text": ")"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nelvisExpression\n\n                                                (used by\n                                                    infixOperation)\n                                            \n\n\n\u00a0\u00a0:\u00a0infixFunctionCall\u00a0(elvis\u00a0infixFunctionCall)*\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nelvisExpression\n\n                                                (used by\n                                                    infixOperation)\n                                            \n"}, {"type": "div", "text": "elvisExpression"}, {"type": "div", "text": "\n                                                (used by\n                                                    infixOperation)\n                                            "}, {"type": "a", "text": "infixOperation"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0infixFunctionCall\u00a0(elvis\u00a0infixFunctionCall)*\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "infixFunctionCall"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "elvis"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "infixFunctionCall"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nelvis\n\n                                                (used by\n                                                    elvisExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'?'\u00a0':'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nelvis\n\n                                                (used by\n                                                    elvisExpression)\n                                            \n"}, {"type": "div", "text": "elvis"}, {"type": "div", "text": "\n                                                (used by\n                                                    elvisExpression)\n                                            "}, {"type": "a", "text": "elvisExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'?'\u00a0':'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'?'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "':'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ninfixFunctionCall\n\n                                                (used by\n                                                    elvisExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0rangeExpression\u00a0(simpleIdentifier\u00a0rangeExpression)*\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ninfixFunctionCall\n\n                                                (used by\n                                                    elvisExpression)\n                                            \n"}, {"type": "div", "text": "infixFunctionCall"}, {"type": "div", "text": "\n                                                (used by\n                                                    elvisExpression)\n                                            "}, {"type": "a", "text": "elvisExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0rangeExpression\u00a0(simpleIdentifier\u00a0rangeExpression)*\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "rangeExpression"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "simpleIdentifier"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "rangeExpression"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nrangeExpression\n\n                                                (used by\n                                                    infixFunctionCall)\n                                            \n\n\n\u00a0\u00a0:\u00a0additiveExpression\u00a0('..'\u00a0additiveExpression)*\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nrangeExpression\n\n                                                (used by\n                                                    infixFunctionCall)\n                                            \n"}, {"type": "div", "text": "rangeExpression"}, {"type": "div", "text": "\n                                                (used by\n                                                    infixFunctionCall)\n                                            "}, {"type": "a", "text": "infixFunctionCall"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0additiveExpression\u00a0('..'\u00a0additiveExpression)*\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "additiveExpression"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'..'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "additiveExpression"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nadditiveExpression\n\n                                                (used by\n                                                    rangeExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0multiplicativeExpression\u00a0(additiveOperator\u00a0multiplicativeExpression)*\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nadditiveExpression\n\n                                                (used by\n                                                    rangeExpression)\n                                            \n"}, {"type": "div", "text": "additiveExpression"}, {"type": "div", "text": "\n                                                (used by\n                                                    rangeExpression)\n                                            "}, {"type": "a", "text": "rangeExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0multiplicativeExpression\u00a0(additiveOperator\u00a0multiplicativeExpression)*\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "multiplicativeExpression"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "additiveOperator"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "multiplicativeExpression"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nmultiplicativeExpression\n\n                                                (used by\n                                                    additiveExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0asExpression\u00a0(multiplicativeOperator\u00a0asExpression)*\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nmultiplicativeExpression\n\n                                                (used by\n                                                    additiveExpression)\n                                            \n"}, {"type": "div", "text": "multiplicativeExpression"}, {"type": "div", "text": "\n                                                (used by\n                                                    additiveExpression)\n                                            "}, {"type": "a", "text": "additiveExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0asExpression\u00a0(multiplicativeOperator\u00a0asExpression)*\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "asExpression"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "multiplicativeOperator"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "asExpression"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nasExpression\n\n                                                (used by\n                                                    multiplicativeExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0comparisonWithLiteralRightSide\u00a0(asOperator\u00a0type)?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nasExpression\n\n                                                (used by\n                                                    multiplicativeExpression)\n                                            \n"}, {"type": "div", "text": "asExpression"}, {"type": "div", "text": "\n                                                (used by\n                                                    multiplicativeExpression)\n                                            "}, {"type": "a", "text": "multiplicativeExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0comparisonWithLiteralRightSide\u00a0(asOperator\u00a0type)?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "comparisonWithLiteralRightSide"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "asOperator"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "type"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ncomparisonWithLiteralRightSide\n\n                                                (used by\n                                                    asExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0prefixUnaryExpression\n\u00a0\u00a0\u00a0\u00a0('<'\u00a0literalConstant\u00a0'>'\u00a0(expression\u00a0|\u00a0parenthesizedExpression))*\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ncomparisonWithLiteralRightSide\n\n                                                (used by\n                                                    asExpression)\n                                            \n"}, {"type": "div", "text": "comparisonWithLiteralRightSide"}, {"type": "div", "text": "\n                                                (used by\n                                                    asExpression)\n                                            "}, {"type": "a", "text": "asExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0prefixUnaryExpression\n\u00a0\u00a0\u00a0\u00a0('<'\u00a0literalConstant\u00a0'>'\u00a0(expression\u00a0|\u00a0parenthesizedExpression))*\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "prefixUnaryExpression"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'<'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "literalConstant"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'>'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "expression"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "parenthesizedExpression"}, {"type": "span", "text": ")"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nprefixUnaryExpression\n\n                                                (used by\n                                                    comparisonWithLiteralRightSide,                                                     assignableExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0unaryPrefix*\u00a0postfixUnaryExpression\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nprefixUnaryExpression\n\n                                                (used by\n                                                    comparisonWithLiteralRightSide,                                                     assignableExpression)\n                                            \n"}, {"type": "div", "text": "prefixUnaryExpression"}, {"type": "div", "text": "\n                                                (used by\n                                                    comparisonWithLiteralRightSide,                                                     assignableExpression)\n                                            "}, {"type": "a", "text": "comparisonWithLiteralRightSide"}, {"type": "a", "text": "assignableExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0unaryPrefix*\u00a0postfixUnaryExpression\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "unaryPrefix"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "postfixUnaryExpression"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nunaryPrefix\n\n                                                (used by\n                                                    prefixUnaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation\n\u00a0\u00a0|\u00a0label\n\u00a0\u00a0|\u00a0prefixUnaryOperator\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nunaryPrefix\n\n                                                (used by\n                                                    prefixUnaryExpression)\n                                            \n"}, {"type": "div", "text": "unaryPrefix"}, {"type": "div", "text": "\n                                                (used by\n                                                    prefixUnaryExpression)\n                                            "}, {"type": "a", "text": "prefixUnaryExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0annotation\n\u00a0\u00a0|\u00a0label\n\u00a0\u00a0|\u00a0prefixUnaryOperator\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "annotation"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "label"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "prefixUnaryOperator"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\npostfixUnaryExpression\n\n                                                (used by\n                                                    prefixUnaryExpression,                                                     directlyAssignableExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0primaryExpression\n\u00a0\u00a0|\u00a0primaryExpression\u00a0postfixUnarySuffix+\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\npostfixUnaryExpression\n\n                                                (used by\n                                                    prefixUnaryExpression,                                                     directlyAssignableExpression)\n                                            \n"}, {"type": "div", "text": "postfixUnaryExpression"}, {"type": "div", "text": "\n                                                (used by\n                                                    prefixUnaryExpression,                                                     directlyAssignableExpression)\n                                            "}, {"type": "a", "text": "prefixUnaryExpression"}, {"type": "a", "text": "directlyAssignableExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0primaryExpression\n\u00a0\u00a0|\u00a0primaryExpression\u00a0postfixUnarySuffix+\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "primaryExpression"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "primaryExpression"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "postfixUnarySuffix"}, {"type": "span", "text": "+"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\npostfixUnarySuffix\n\n                                                (used by\n                                                    postfixUnaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0postfixUnaryOperator\n\u00a0\u00a0|\u00a0typeArguments\n\u00a0\u00a0|\u00a0callSuffix\n\u00a0\u00a0|\u00a0indexingSuffix\n\u00a0\u00a0|\u00a0navigationSuffix\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\npostfixUnarySuffix\n\n                                                (used by\n                                                    postfixUnaryExpression)\n                                            \n"}, {"type": "div", "text": "postfixUnarySuffix"}, {"type": "div", "text": "\n                                                (used by\n                                                    postfixUnaryExpression)\n                                            "}, {"type": "a", "text": "postfixUnaryExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0postfixUnaryOperator\n\u00a0\u00a0|\u00a0typeArguments\n\u00a0\u00a0|\u00a0callSuffix\n\u00a0\u00a0|\u00a0indexingSuffix\n\u00a0\u00a0|\u00a0navigationSuffix\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "postfixUnaryOperator"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeArguments"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "callSuffix"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "indexingSuffix"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "navigationSuffix"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ndirectlyAssignableExpression\n\n                                                (used by\n                                                    assignment,                                                     parenthesizedDirectlyAssignableExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0postfixUnaryExpression\u00a0assignableSuffix\n\u00a0\u00a0|\u00a0simpleIdentifier\n\u00a0\u00a0|\u00a0parenthesizedDirectlyAssignableExpression\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ndirectlyAssignableExpression\n\n                                                (used by\n                                                    assignment,                                                     parenthesizedDirectlyAssignableExpression)\n                                            \n"}, {"type": "div", "text": "directlyAssignableExpression"}, {"type": "div", "text": "\n                                                (used by\n                                                    assignment,                                                     parenthesizedDirectlyAssignableExpression)\n                                            "}, {"type": "a", "text": "assignment"}, {"type": "a", "text": "parenthesizedDirectlyAssignableExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0postfixUnaryExpression\u00a0assignableSuffix\n\u00a0\u00a0|\u00a0simpleIdentifier\n\u00a0\u00a0|\u00a0parenthesizedDirectlyAssignableExpression\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "postfixUnaryExpression"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "assignableSuffix"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "simpleIdentifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "parenthesizedDirectlyAssignableExpression"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nparenthesizedDirectlyAssignableExpression\n\n                                                (used by\n                                                    directlyAssignableExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0directlyAssignableExpression\u00a0')'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nparenthesizedDirectlyAssignableExpression\n\n                                                (used by\n                                                    directlyAssignableExpression)\n                                            \n"}, {"type": "div", "text": "parenthesizedDirectlyAssignableExpression"}, {"type": "div", "text": "\n                                                (used by\n                                                    directlyAssignableExpression)\n                                            "}, {"type": "a", "text": "directlyAssignableExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'('\u00a0directlyAssignableExpression\u00a0')'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'('"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "directlyAssignableExpression"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "')'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nassignableExpression\n\n                                                (used by\n                                                    assignment,                                                     parenthesizedAssignableExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0prefixUnaryExpression\n\u00a0\u00a0|\u00a0parenthesizedAssignableExpression\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nassignableExpression\n\n                                                (used by\n                                                    assignment,                                                     parenthesizedAssignableExpression)\n                                            \n"}, {"type": "div", "text": "assignableExpression"}, {"type": "div", "text": "\n                                                (used by\n                                                    assignment,                                                     parenthesizedAssignableExpression)\n                                            "}, {"type": "a", "text": "assignment"}, {"type": "a", "text": "parenthesizedAssignableExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0prefixUnaryExpression\n\u00a0\u00a0|\u00a0parenthesizedAssignableExpression\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "prefixUnaryExpression"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "parenthesizedAssignableExpression"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nparenthesizedAssignableExpression\n\n                                                (used by\n                                                    assignableExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0assignableExpression\u00a0')'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nparenthesizedAssignableExpression\n\n                                                (used by\n                                                    assignableExpression)\n                                            \n"}, {"type": "div", "text": "parenthesizedAssignableExpression"}, {"type": "div", "text": "\n                                                (used by\n                                                    assignableExpression)\n                                            "}, {"type": "a", "text": "assignableExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'('\u00a0assignableExpression\u00a0')'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'('"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "assignableExpression"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "')'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nassignableSuffix\n\n                                                (used by\n                                                    directlyAssignableExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeArguments\n\u00a0\u00a0|\u00a0indexingSuffix\n\u00a0\u00a0|\u00a0navigationSuffix\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nassignableSuffix\n\n                                                (used by\n                                                    directlyAssignableExpression)\n                                            \n"}, {"type": "div", "text": "assignableSuffix"}, {"type": "div", "text": "\n                                                (used by\n                                                    directlyAssignableExpression)\n                                            "}, {"type": "a", "text": "directlyAssignableExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0typeArguments\n\u00a0\u00a0|\u00a0indexingSuffix\n\u00a0\u00a0|\u00a0navigationSuffix\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeArguments"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "indexingSuffix"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "navigationSuffix"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nindexingSuffix\n\n                                                (used by\n                                                    postfixUnarySuffix,                                                     assignableSuffix)\n                                            \n\n\n\u00a0\u00a0:\u00a0'['\u00a0expression\u00a0(','\u00a0expression)*\u00a0','?\u00a0']'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nindexingSuffix\n\n                                                (used by\n                                                    postfixUnarySuffix,                                                     assignableSuffix)\n                                            \n"}, {"type": "div", "text": "indexingSuffix"}, {"type": "div", "text": "\n                                                (used by\n                                                    postfixUnarySuffix,                                                     assignableSuffix)\n                                            "}, {"type": "a", "text": "postfixUnarySuffix"}, {"type": "a", "text": "assignableSuffix"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'['\u00a0expression\u00a0(','\u00a0expression)*\u00a0','?\u00a0']'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'['"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "','"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "','"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "']'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nnavigationSuffix\n\n                                                (used by\n                                                    postfixUnarySuffix,                                                     assignableSuffix)\n                                            \n\n\n\u00a0\u00a0:\u00a0memberAccessOperator\u00a0(simpleIdentifier\u00a0|\u00a0parenthesizedExpression\u00a0|\u00a0'class')\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nnavigationSuffix\n\n                                                (used by\n                                                    postfixUnarySuffix,                                                     assignableSuffix)\n                                            \n"}, {"type": "div", "text": "navigationSuffix"}, {"type": "div", "text": "\n                                                (used by\n                                                    postfixUnarySuffix,                                                     assignableSuffix)\n                                            "}, {"type": "a", "text": "postfixUnarySuffix"}, {"type": "a", "text": "assignableSuffix"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0memberAccessOperator\u00a0(simpleIdentifier\u00a0|\u00a0parenthesizedExpression\u00a0|\u00a0'class')\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "memberAccessOperator"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "simpleIdentifier"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "parenthesizedExpression"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'class'"}, {"type": "span", "text": ")"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ncallSuffix\n\n                                                (used by\n                                                    postfixUnarySuffix)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeArguments?\u00a0valueArguments?\u00a0annotatedLambda\n\u00a0\u00a0|\u00a0typeArguments?\u00a0valueArguments\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ncallSuffix\n\n                                                (used by\n                                                    postfixUnarySuffix)\n                                            \n"}, {"type": "div", "text": "callSuffix"}, {"type": "div", "text": "\n                                                (used by\n                                                    postfixUnarySuffix)\n                                            "}, {"type": "a", "text": "postfixUnarySuffix"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0typeArguments?\u00a0valueArguments?\u00a0annotatedLambda\n\u00a0\u00a0|\u00a0typeArguments?\u00a0valueArguments\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeArguments"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "valueArguments"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "annotatedLambda"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeArguments"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "valueArguments"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nannotatedLambda\n\n                                                (used by\n                                                    callSuffix)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation*\u00a0label?\u00a0lambdaLiteral\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nannotatedLambda\n\n                                                (used by\n                                                    callSuffix)\n                                            \n"}, {"type": "div", "text": "annotatedLambda"}, {"type": "div", "text": "\n                                                (used by\n                                                    callSuffix)\n                                            "}, {"type": "a", "text": "callSuffix"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0annotation*\u00a0label?\u00a0lambdaLiteral\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "annotation"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "label"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "lambdaLiteral"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ntypeArguments\n\n                                                (used by\n                                                    simpleUserType,                                                     postfixUnarySuffix,                                                     assignableSuffix,                                                     callSuffix)\n                                            \n\n\n\u00a0\u00a0:\u00a0'<'\u00a0typeProjection\u00a0(','\u00a0typeProjection)*\u00a0','?\u00a0'>'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ntypeArguments\n\n                                                (used by\n                                                    simpleUserType,                                                     postfixUnarySuffix,                                                     assignableSuffix,                                                     callSuffix)\n                                            \n"}, {"type": "div", "text": "typeArguments"}, {"type": "div", "text": "\n                                                (used by\n                                                    simpleUserType,                                                     postfixUnarySuffix,                                                     assignableSuffix,                                                     callSuffix)\n                                            "}, {"type": "a", "text": "simpleUserType"}, {"type": "a", "text": "postfixUnarySuffix"}, {"type": "a", "text": "assignableSuffix"}, {"type": "a", "text": "callSuffix"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'<'\u00a0typeProjection\u00a0(','\u00a0typeProjection)*\u00a0','?\u00a0'>'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'<'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeProjection"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "','"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeProjection"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "','"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'>'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nvalueArguments\n\n                                                (used by\n                                                    constructorInvocation,                                                     constructorDelegationCall,                                                     enumEntry,                                                     callSuffix)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0')'\n\u00a0\u00a0|\u00a0'('\u00a0valueArgument\u00a0(','\u00a0valueArgument)*\u00a0','?\u00a0')'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nvalueArguments\n\n                                                (used by\n                                                    constructorInvocation,                                                     constructorDelegationCall,                                                     enumEntry,                                                     callSuffix)\n                                            \n"}, {"type": "div", "text": "valueArguments"}, {"type": "div", "text": "\n                                                (used by\n                                                    constructorInvocation,                                                     constructorDelegationCall,                                                     enumEntry,                                                     callSuffix)\n                                            "}, {"type": "a", "text": "constructorInvocation"}, {"type": "a", "text": "constructorDelegationCall"}, {"type": "a", "text": "enumEntry"}, {"type": "a", "text": "callSuffix"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'('\u00a0')'\n\u00a0\u00a0|\u00a0'('\u00a0valueArgument\u00a0(','\u00a0valueArgument)*\u00a0','?\u00a0')'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'('"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "')'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'('"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "valueArgument"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "','"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "valueArgument"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "','"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "')'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nvalueArgument\n\n                                                (used by\n                                                    valueArguments)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation?\u00a0(simpleIdentifier\u00a0'=')?\u00a0'*'?\u00a0expression\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nvalueArgument\n\n                                                (used by\n                                                    valueArguments)\n                                            \n"}, {"type": "div", "text": "valueArgument"}, {"type": "div", "text": "\n                                                (used by\n                                                    valueArguments)\n                                            "}, {"type": "a", "text": "valueArguments"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0annotation?\u00a0(simpleIdentifier\u00a0'=')?\u00a0'*'?\u00a0expression\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "annotation"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "simpleIdentifier"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'='"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'*'"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nprimaryExpression\n\n                                                (used by\n                                                    postfixUnaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0parenthesizedExpression\n\u00a0\u00a0|\u00a0simpleIdentifier\n\u00a0\u00a0|\u00a0literalConstant\n\u00a0\u00a0|\u00a0stringLiteral\n\u00a0\u00a0|\u00a0callableReference\n\u00a0\u00a0|\u00a0functionLiteral\n\u00a0\u00a0|\u00a0objectLiteral\n\u00a0\u00a0|\u00a0collectionLiteral\n\u00a0\u00a0|\u00a0thisExpression\n\u00a0\u00a0|\u00a0superExpression\n\u00a0\u00a0|\u00a0ifExpression\n\u00a0\u00a0|\u00a0whenExpression\n\u00a0\u00a0|\u00a0tryExpression\n\u00a0\u00a0|\u00a0jumpExpression\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nprimaryExpression\n\n                                                (used by\n                                                    postfixUnaryExpression)\n                                            \n"}, {"type": "div", "text": "primaryExpression"}, {"type": "div", "text": "\n                                                (used by\n                                                    postfixUnaryExpression)\n                                            "}, {"type": "a", "text": "postfixUnaryExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0parenthesizedExpression\n\u00a0\u00a0|\u00a0simpleIdentifier\n\u00a0\u00a0|\u00a0literalConstant\n\u00a0\u00a0|\u00a0stringLiteral\n\u00a0\u00a0|\u00a0callableReference\n\u00a0\u00a0|\u00a0functionLiteral\n\u00a0\u00a0|\u00a0objectLiteral\n\u00a0\u00a0|\u00a0collectionLiteral\n\u00a0\u00a0|\u00a0thisExpression\n\u00a0\u00a0|\u00a0superExpression\n\u00a0\u00a0|\u00a0ifExpression\n\u00a0\u00a0|\u00a0whenExpression\n\u00a0\u00a0|\u00a0tryExpression\n\u00a0\u00a0|\u00a0jumpExpression\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "parenthesizedExpression"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "simpleIdentifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "literalConstant"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "stringLiteral"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "callableReference"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "functionLiteral"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "objectLiteral"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "collectionLiteral"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "thisExpression"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "superExpression"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "ifExpression"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "whenExpression"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "tryExpression"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "jumpExpression"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nparenthesizedExpression\n\n                                                (used by\n                                                    comparisonWithLiteralRightSide,                                                     navigationSuffix,                                                     primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0expression\u00a0')'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nparenthesizedExpression\n\n                                                (used by\n                                                    comparisonWithLiteralRightSide,                                                     navigationSuffix,                                                     primaryExpression)\n                                            \n"}, {"type": "div", "text": "parenthesizedExpression"}, {"type": "div", "text": "\n                                                (used by\n                                                    comparisonWithLiteralRightSide,                                                     navigationSuffix,                                                     primaryExpression)\n                                            "}, {"type": "a", "text": "comparisonWithLiteralRightSide"}, {"type": "a", "text": "navigationSuffix"}, {"type": "a", "text": "primaryExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'('\u00a0expression\u00a0')'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'('"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "')'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ncollectionLiteral\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'['\u00a0expression\u00a0(','\u00a0expression)*\u00a0','?\u00a0']'\n\u00a0\u00a0|\u00a0'['\u00a0']'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ncollectionLiteral\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n"}, {"type": "div", "text": "collectionLiteral"}, {"type": "div", "text": "\n                                                (used by\n                                                    primaryExpression)\n                                            "}, {"type": "a", "text": "primaryExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'['\u00a0expression\u00a0(','\u00a0expression)*\u00a0','?\u00a0']'\n\u00a0\u00a0|\u00a0'['\u00a0']'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'['"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "','"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "','"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "']'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'['"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "']'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nliteralConstant\n\n                                                (used by\n                                                    comparisonWithLiteralRightSide,                                                     primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0BooleanLiteral\n\u00a0\u00a0|\u00a0IntegerLiteral\n\u00a0\u00a0|\u00a0HexLiteral\n\u00a0\u00a0|\u00a0BinLiteral\n\u00a0\u00a0|\u00a0CharacterLiteral\n\u00a0\u00a0|\u00a0RealLiteral\n\u00a0\u00a0|\u00a0'null'\n\u00a0\u00a0|\u00a0LongLiteral\n\u00a0\u00a0|\u00a0UnsignedLiteral\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nliteralConstant\n\n                                                (used by\n                                                    comparisonWithLiteralRightSide,                                                     primaryExpression)\n                                            \n"}, {"type": "div", "text": "literalConstant"}, {"type": "div", "text": "\n                                                (used by\n                                                    comparisonWithLiteralRightSide,                                                     primaryExpression)\n                                            "}, {"type": "a", "text": "comparisonWithLiteralRightSide"}, {"type": "a", "text": "primaryExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0BooleanLiteral\n\u00a0\u00a0|\u00a0IntegerLiteral\n\u00a0\u00a0|\u00a0HexLiteral\n\u00a0\u00a0|\u00a0BinLiteral\n\u00a0\u00a0|\u00a0CharacterLiteral\n\u00a0\u00a0|\u00a0RealLiteral\n\u00a0\u00a0|\u00a0'null'\n\u00a0\u00a0|\u00a0LongLiteral\n\u00a0\u00a0|\u00a0UnsignedLiteral\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "BooleanLiteral"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "IntegerLiteral"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "HexLiteral"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "BinLiteral"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "CharacterLiteral"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "RealLiteral"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'null'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "LongLiteral"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "UnsignedLiteral"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nstringLiteral\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0lineStringLiteral\n\u00a0\u00a0|\u00a0multiLineStringLiteral\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nstringLiteral\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n"}, {"type": "div", "text": "stringLiteral"}, {"type": "div", "text": "\n                                                (used by\n                                                    primaryExpression)\n                                            "}, {"type": "a", "text": "primaryExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0lineStringLiteral\n\u00a0\u00a0|\u00a0multiLineStringLiteral\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "lineStringLiteral"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "multiLineStringLiteral"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nlineStringLiteral\n\n                                                (used by\n                                                    stringLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'\"'\u00a0(lineStringContent\u00a0|\u00a0lineStringExpression)*\u00a0'\"'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nlineStringLiteral\n\n                                                (used by\n                                                    stringLiteral)\n                                            \n"}, {"type": "div", "text": "lineStringLiteral"}, {"type": "div", "text": "\n                                                (used by\n                                                    stringLiteral)\n                                            "}, {"type": "a", "text": "stringLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'\"'\u00a0(lineStringContent\u00a0|\u00a0lineStringExpression)*\u00a0'\"'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'\"'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "lineStringContent"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "lineStringExpression"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'\"'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nmultiLineStringLiteral\n\n                                                (used by\n                                                    stringLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'\"\"\"'\u00a0(multiLineStringContent\u00a0|\u00a0multiLineStringExpression\u00a0|\u00a0'\"')*\n\u00a0\u00a0\u00a0\u00a0TRIPLE_QUOTE_CLOSE\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nmultiLineStringLiteral\n\n                                                (used by\n                                                    stringLiteral)\n                                            \n"}, {"type": "div", "text": "multiLineStringLiteral"}, {"type": "div", "text": "\n                                                (used by\n                                                    stringLiteral)\n                                            "}, {"type": "a", "text": "stringLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'\"\"\"'\u00a0(multiLineStringContent\u00a0|\u00a0multiLineStringExpression\u00a0|\u00a0'\"')*\n\u00a0\u00a0\u00a0\u00a0TRIPLE_QUOTE_CLOSE\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'\"\"\"'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "multiLineStringContent"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "multiLineStringExpression"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'\"'"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "TRIPLE_QUOTE_CLOSE"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nlineStringContent\n\n                                                (used by\n                                                    lineStringLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0LineStrText\n\u00a0\u00a0|\u00a0LineStrEscapedChar\n\u00a0\u00a0|\u00a0LineStrRef\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nlineStringContent\n\n                                                (used by\n                                                    lineStringLiteral)\n                                            \n"}, {"type": "div", "text": "lineStringContent"}, {"type": "div", "text": "\n                                                (used by\n                                                    lineStringLiteral)\n                                            "}, {"type": "a", "text": "lineStringLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0LineStrText\n\u00a0\u00a0|\u00a0LineStrEscapedChar\n\u00a0\u00a0|\u00a0LineStrRef\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "LineStrText"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "LineStrEscapedChar"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "LineStrRef"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nlineStringExpression\n\n                                                (used by\n                                                    lineStringLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'${'\u00a0expression\u00a0'}'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nlineStringExpression\n\n                                                (used by\n                                                    lineStringLiteral)\n                                            \n"}, {"type": "div", "text": "lineStringExpression"}, {"type": "div", "text": "\n                                                (used by\n                                                    lineStringLiteral)\n                                            "}, {"type": "a", "text": "lineStringLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'${'\u00a0expression\u00a0'}'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'${'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'}'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nmultiLineStringContent\n\n                                                (used by\n                                                    multiLineStringLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0MultiLineStrText\n\u00a0\u00a0|\u00a0'\"'\n\u00a0\u00a0|\u00a0MultiLineStrRef\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nmultiLineStringContent\n\n                                                (used by\n                                                    multiLineStringLiteral)\n                                            \n"}, {"type": "div", "text": "multiLineStringContent"}, {"type": "div", "text": "\n                                                (used by\n                                                    multiLineStringLiteral)\n                                            "}, {"type": "a", "text": "multiLineStringLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0MultiLineStrText\n\u00a0\u00a0|\u00a0'\"'\n\u00a0\u00a0|\u00a0MultiLineStrRef\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "MultiLineStrText"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'\"'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "MultiLineStrRef"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nmultiLineStringExpression\n\n                                                (used by\n                                                    multiLineStringLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'${'\u00a0expression\u00a0'}'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nmultiLineStringExpression\n\n                                                (used by\n                                                    multiLineStringLiteral)\n                                            \n"}, {"type": "div", "text": "multiLineStringExpression"}, {"type": "div", "text": "\n                                                (used by\n                                                    multiLineStringLiteral)\n                                            "}, {"type": "a", "text": "multiLineStringLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'${'\u00a0expression\u00a0'}'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'${'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'}'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nlambdaLiteral\n\n                                                (used by\n                                                    annotatedLambda,                                                     functionLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'{'\u00a0statements\u00a0'}'\n\u00a0\u00a0|\u00a0'{'\u00a0lambdaParameters?\u00a0'->'\u00a0statements\u00a0'}'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nlambdaLiteral\n\n                                                (used by\n                                                    annotatedLambda,                                                     functionLiteral)\n                                            \n"}, {"type": "div", "text": "lambdaLiteral"}, {"type": "div", "text": "\n                                                (used by\n                                                    annotatedLambda,                                                     functionLiteral)\n                                            "}, {"type": "a", "text": "annotatedLambda"}, {"type": "a", "text": "functionLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'{'\u00a0statements\u00a0'}'\n\u00a0\u00a0|\u00a0'{'\u00a0lambdaParameters?\u00a0'->'\u00a0statements\u00a0'}'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'{'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "statements"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'}'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'{'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "lambdaParameters"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'->'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "statements"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'}'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nlambdaParameters\n\n                                                (used by\n                                                    lambdaLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0lambdaParameter\u00a0(','\u00a0lambdaParameter)*\u00a0','?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nlambdaParameters\n\n                                                (used by\n                                                    lambdaLiteral)\n                                            \n"}, {"type": "div", "text": "lambdaParameters"}, {"type": "div", "text": "\n                                                (used by\n                                                    lambdaLiteral)\n                                            "}, {"type": "a", "text": "lambdaLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0lambdaParameter\u00a0(','\u00a0lambdaParameter)*\u00a0','?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "lambdaParameter"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "','"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "lambdaParameter"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "','"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nlambdaParameter\n\n                                                (used by\n                                                    lambdaParameters)\n                                            \n\n\n\u00a0\u00a0:\u00a0variableDeclaration\n\u00a0\u00a0|\u00a0multiVariableDeclaration\u00a0(':'\u00a0type)?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nlambdaParameter\n\n                                                (used by\n                                                    lambdaParameters)\n                                            \n"}, {"type": "div", "text": "lambdaParameter"}, {"type": "div", "text": "\n                                                (used by\n                                                    lambdaParameters)\n                                            "}, {"type": "a", "text": "lambdaParameters"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0variableDeclaration\n\u00a0\u00a0|\u00a0multiVariableDeclaration\u00a0(':'\u00a0type)?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "variableDeclaration"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "multiVariableDeclaration"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "':'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "type"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nanonymousFunction\n\n                                                (used by\n                                                    functionLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'fun'\u00a0(type\u00a0'.')?\u00a0parametersWithOptionalType\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0type)?\u00a0typeConstraints?\n\u00a0\u00a0\u00a0\u00a0functionBody?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nanonymousFunction\n\n                                                (used by\n                                                    functionLiteral)\n                                            \n"}, {"type": "div", "text": "anonymousFunction"}, {"type": "div", "text": "\n                                                (used by\n                                                    functionLiteral)\n                                            "}, {"type": "a", "text": "functionLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'fun'\u00a0(type\u00a0'.')?\u00a0parametersWithOptionalType\n\u00a0\u00a0\u00a0\u00a0(':'\u00a0type)?\u00a0typeConstraints?\n\u00a0\u00a0\u00a0\u00a0functionBody?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'fun'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "type"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'.'"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "parametersWithOptionalType"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "':'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "type"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeConstraints"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "functionBody"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nfunctionLiteral\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0lambdaLiteral\n\u00a0\u00a0|\u00a0anonymousFunction\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nfunctionLiteral\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n"}, {"type": "div", "text": "functionLiteral"}, {"type": "div", "text": "\n                                                (used by\n                                                    primaryExpression)\n                                            "}, {"type": "a", "text": "primaryExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0lambdaLiteral\n\u00a0\u00a0|\u00a0anonymousFunction\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "lambdaLiteral"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "anonymousFunction"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nobjectLiteral\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'object'\u00a0':'\u00a0delegationSpecifiers\u00a0classBody\n\u00a0\u00a0|\u00a0'object'\u00a0classBody\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nobjectLiteral\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n"}, {"type": "div", "text": "objectLiteral"}, {"type": "div", "text": "\n                                                (used by\n                                                    primaryExpression)\n                                            "}, {"type": "a", "text": "primaryExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'object'\u00a0':'\u00a0delegationSpecifiers\u00a0classBody\n\u00a0\u00a0|\u00a0'object'\u00a0classBody\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'object'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "':'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "delegationSpecifiers"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "classBody"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'object'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "classBody"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nthisExpression\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'this'\n\u00a0\u00a0|\u00a0THIS_AT\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nthisExpression\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n"}, {"type": "div", "text": "thisExpression"}, {"type": "div", "text": "\n                                                (used by\n                                                    primaryExpression)\n                                            "}, {"type": "a", "text": "primaryExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'this'\n\u00a0\u00a0|\u00a0THIS_AT\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'this'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "THIS_AT"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nsuperExpression\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'super'\u00a0('<'\u00a0type\u00a0'>')?\u00a0('@'\u00a0simpleIdentifier)?\n\u00a0\u00a0|\u00a0SUPER_AT\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nsuperExpression\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n"}, {"type": "div", "text": "superExpression"}, {"type": "div", "text": "\n                                                (used by\n                                                    primaryExpression)\n                                            "}, {"type": "a", "text": "primaryExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'super'\u00a0('<'\u00a0type\u00a0'>')?\u00a0('@'\u00a0simpleIdentifier)?\n\u00a0\u00a0|\u00a0SUPER_AT\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'super'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'<'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "type"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'>'"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'@'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "simpleIdentifier"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "SUPER_AT"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nifExpression\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'if'\u00a0'('\u00a0expression\u00a0')'\n\u00a0\u00a0\u00a0\u00a0(controlStructureBody\u00a0|\u00a0';')\n\u00a0\u00a0|\u00a0'if'\u00a0'('\u00a0expression\u00a0')'\n\u00a0\u00a0\u00a0\u00a0controlStructureBody?\u00a0';'?\u00a0'else'\u00a0(controlStructureBody\u00a0|\u00a0';')\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nifExpression\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n"}, {"type": "div", "text": "ifExpression"}, {"type": "div", "text": "\n                                                (used by\n                                                    primaryExpression)\n                                            "}, {"type": "a", "text": "primaryExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'if'\u00a0'('\u00a0expression\u00a0')'\n\u00a0\u00a0\u00a0\u00a0(controlStructureBody\u00a0|\u00a0';')\n\u00a0\u00a0|\u00a0'if'\u00a0'('\u00a0expression\u00a0')'\n\u00a0\u00a0\u00a0\u00a0controlStructureBody?\u00a0';'?\u00a0'else'\u00a0(controlStructureBody\u00a0|\u00a0';')\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'if'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'('"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "')'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "controlStructureBody"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "';'"}, {"type": "span", "text": ")"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'if'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'('"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "')'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "controlStructureBody"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "';'"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'else'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "controlStructureBody"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "';'"}, {"type": "span", "text": ")"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nwhenSubject\n\n                                                (used by\n                                                    whenExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'('\u00a0(annotation*\u00a0'val'\u00a0variableDeclaration\u00a0'=')?\u00a0expression\u00a0')'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nwhenSubject\n\n                                                (used by\n                                                    whenExpression)\n                                            \n"}, {"type": "div", "text": "whenSubject"}, {"type": "div", "text": "\n                                                (used by\n                                                    whenExpression)\n                                            "}, {"type": "a", "text": "whenExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'('\u00a0(annotation*\u00a0'val'\u00a0variableDeclaration\u00a0'=')?\u00a0expression\u00a0')'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'('"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "annotation"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'val'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "variableDeclaration"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'='"}, {"type": "span", "text": ")"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "')'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nwhenExpression\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'when'\u00a0whenSubject?\u00a0'{'\u00a0whenEntry*\u00a0'}'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nwhenExpression\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n"}, {"type": "div", "text": "whenExpression"}, {"type": "div", "text": "\n                                                (used by\n                                                    primaryExpression)\n                                            "}, {"type": "a", "text": "primaryExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'when'\u00a0whenSubject?\u00a0'{'\u00a0whenEntry*\u00a0'}'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'when'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "whenSubject"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'{'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "whenEntry"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'}'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nwhenEntry\n\n                                                (used by\n                                                    whenExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0whenCondition\u00a0(','\u00a0whenCondition)*\u00a0','?\u00a0'->'\u00a0controlStructureBody\u00a0semi?\n\u00a0\u00a0|\u00a0'else'\u00a0'->'\u00a0controlStructureBody\u00a0semi?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nwhenEntry\n\n                                                (used by\n                                                    whenExpression)\n                                            \n"}, {"type": "div", "text": "whenEntry"}, {"type": "div", "text": "\n                                                (used by\n                                                    whenExpression)\n                                            "}, {"type": "a", "text": "whenExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0whenCondition\u00a0(','\u00a0whenCondition)*\u00a0','?\u00a0'->'\u00a0controlStructureBody\u00a0semi?\n\u00a0\u00a0|\u00a0'else'\u00a0'->'\u00a0controlStructureBody\u00a0semi?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "whenCondition"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "','"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "whenCondition"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "','"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'->'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "controlStructureBody"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "semi"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'else'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'->'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "controlStructureBody"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "semi"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nwhenCondition\n\n                                                (used by\n                                                    whenEntry)\n                                            \n\n\n\u00a0\u00a0:\u00a0expression\n\u00a0\u00a0|\u00a0rangeTest\n\u00a0\u00a0|\u00a0typeTest\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nwhenCondition\n\n                                                (used by\n                                                    whenEntry)\n                                            \n"}, {"type": "div", "text": "whenCondition"}, {"type": "div", "text": "\n                                                (used by\n                                                    whenEntry)\n                                            "}, {"type": "a", "text": "whenEntry"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0expression\n\u00a0\u00a0|\u00a0rangeTest\n\u00a0\u00a0|\u00a0typeTest\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "rangeTest"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeTest"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nrangeTest\n\n                                                (used by\n                                                    whenCondition)\n                                            \n\n\n\u00a0\u00a0:\u00a0inOperator\u00a0expression\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nrangeTest\n\n                                                (used by\n                                                    whenCondition)\n                                            \n"}, {"type": "div", "text": "rangeTest"}, {"type": "div", "text": "\n                                                (used by\n                                                    whenCondition)\n                                            "}, {"type": "a", "text": "whenCondition"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0inOperator\u00a0expression\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "inOperator"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ntypeTest\n\n                                                (used by\n                                                    whenCondition)\n                                            \n\n\n\u00a0\u00a0:\u00a0isOperator\u00a0type\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ntypeTest\n\n                                                (used by\n                                                    whenCondition)\n                                            \n"}, {"type": "div", "text": "typeTest"}, {"type": "div", "text": "\n                                                (used by\n                                                    whenCondition)\n                                            "}, {"type": "a", "text": "whenCondition"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0isOperator\u00a0type\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "isOperator"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "type"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ntryExpression\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'try'\u00a0block\u00a0((catchBlock+\u00a0finallyBlock?)\u00a0|\u00a0finallyBlock)\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ntryExpression\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n"}, {"type": "div", "text": "tryExpression"}, {"type": "div", "text": "\n                                                (used by\n                                                    primaryExpression)\n                                            "}, {"type": "a", "text": "primaryExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'try'\u00a0block\u00a0((catchBlock+\u00a0finallyBlock?)\u00a0|\u00a0finallyBlock)\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'try'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "block"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "("}, {"type": "a", "text": "catchBlock"}, {"type": "span", "text": "+"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "finallyBlock"}, {"type": "span", "text": "?"}, {"type": "span", "text": ")"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "finallyBlock"}, {"type": "span", "text": ")"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ncatchBlock\n\n                                                (used by\n                                                    tryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'catch'\u00a0'('\u00a0annotation*\u00a0simpleIdentifier\u00a0':'\u00a0type\u00a0','?\u00a0')'\u00a0block\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ncatchBlock\n\n                                                (used by\n                                                    tryExpression)\n                                            \n"}, {"type": "div", "text": "catchBlock"}, {"type": "div", "text": "\n                                                (used by\n                                                    tryExpression)\n                                            "}, {"type": "a", "text": "tryExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'catch'\u00a0'('\u00a0annotation*\u00a0simpleIdentifier\u00a0':'\u00a0type\u00a0','?\u00a0')'\u00a0block\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'catch'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'('"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "annotation"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "simpleIdentifier"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "':'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "type"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "','"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "')'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "block"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nfinallyBlock\n\n                                                (used by\n                                                    tryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'finally'\u00a0block\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nfinallyBlock\n\n                                                (used by\n                                                    tryExpression)\n                                            \n"}, {"type": "div", "text": "finallyBlock"}, {"type": "div", "text": "\n                                                (used by\n                                                    tryExpression)\n                                            "}, {"type": "a", "text": "tryExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'finally'\u00a0block\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'finally'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "block"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\njumpExpression\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'throw'\u00a0expression\n\u00a0\u00a0|\u00a0('return'\u00a0|\u00a0RETURN_AT)\u00a0expression?\n\u00a0\u00a0|\u00a0'continue'\n\u00a0\u00a0|\u00a0CONTINUE_AT\n\u00a0\u00a0|\u00a0'break'\n\u00a0\u00a0|\u00a0BREAK_AT\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\njumpExpression\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n"}, {"type": "div", "text": "jumpExpression"}, {"type": "div", "text": "\n                                                (used by\n                                                    primaryExpression)\n                                            "}, {"type": "a", "text": "primaryExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'throw'\u00a0expression\n\u00a0\u00a0|\u00a0('return'\u00a0|\u00a0RETURN_AT)\u00a0expression?\n\u00a0\u00a0|\u00a0'continue'\n\u00a0\u00a0|\u00a0CONTINUE_AT\n\u00a0\u00a0|\u00a0'break'\n\u00a0\u00a0|\u00a0BREAK_AT\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'throw'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'return'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "RETURN_AT"}, {"type": "span", "text": ")"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "expression"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'continue'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "CONTINUE_AT"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'break'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "BREAK_AT"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ncallableReference\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0(receiverType?\u00a0'::'\u00a0(simpleIdentifier\u00a0|\u00a0'class'))\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ncallableReference\n\n                                                (used by\n                                                    primaryExpression)\n                                            \n"}, {"type": "div", "text": "callableReference"}, {"type": "div", "text": "\n                                                (used by\n                                                    primaryExpression)\n                                            "}, {"type": "a", "text": "primaryExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0(receiverType?\u00a0'::'\u00a0(simpleIdentifier\u00a0|\u00a0'class'))\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "receiverType"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'::'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "simpleIdentifier"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'class'"}, {"type": "span", "text": ")"}, {"type": "span", "text": ")"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nassignmentAndOperator\n\n                                                (used by\n                                                    assignment)\n                                            \n\n\n\u00a0\u00a0:\u00a0'+='\n\u00a0\u00a0|\u00a0'-='\n\u00a0\u00a0|\u00a0'*='\n\u00a0\u00a0|\u00a0'/='\n\u00a0\u00a0|\u00a0'%='\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nassignmentAndOperator\n\n                                                (used by\n                                                    assignment)\n                                            \n"}, {"type": "div", "text": "assignmentAndOperator"}, {"type": "div", "text": "\n                                                (used by\n                                                    assignment)\n                                            "}, {"type": "a", "text": "assignment"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'+='\n\u00a0\u00a0|\u00a0'-='\n\u00a0\u00a0|\u00a0'*='\n\u00a0\u00a0|\u00a0'/='\n\u00a0\u00a0|\u00a0'%='\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'+='"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'-='"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'*='"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'/='"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'%='"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nequalityOperator\n\n                                                (used by\n                                                    equality)\n                                            \n\n\n\u00a0\u00a0:\u00a0'!='\n\u00a0\u00a0|\u00a0'!=='\n\u00a0\u00a0|\u00a0'=='\n\u00a0\u00a0|\u00a0'==='\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nequalityOperator\n\n                                                (used by\n                                                    equality)\n                                            \n"}, {"type": "div", "text": "equalityOperator"}, {"type": "div", "text": "\n                                                (used by\n                                                    equality)\n                                            "}, {"type": "a", "text": "equality"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'!='\n\u00a0\u00a0|\u00a0'!=='\n\u00a0\u00a0|\u00a0'=='\n\u00a0\u00a0|\u00a0'==='\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'!='"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'!=='"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'=='"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'==='"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ncomparisonOperator\n\n                                                (used by\n                                                    comparison)\n                                            \n\n\n\u00a0\u00a0:\u00a0'<'\n\u00a0\u00a0|\u00a0'>'\n\u00a0\u00a0|\u00a0'<='\n\u00a0\u00a0|\u00a0'>='\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ncomparisonOperator\n\n                                                (used by\n                                                    comparison)\n                                            \n"}, {"type": "div", "text": "comparisonOperator"}, {"type": "div", "text": "\n                                                (used by\n                                                    comparison)\n                                            "}, {"type": "a", "text": "comparison"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'<'\n\u00a0\u00a0|\u00a0'>'\n\u00a0\u00a0|\u00a0'<='\n\u00a0\u00a0|\u00a0'>='\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'<'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'>'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'<='"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'>='"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ninOperator\n\n                                                (used by\n                                                    infixOperation,                                                     rangeTest)\n                                            \n\n\n\u00a0\u00a0:\u00a0'in'\n\u00a0\u00a0|\u00a0NOT_IN\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ninOperator\n\n                                                (used by\n                                                    infixOperation,                                                     rangeTest)\n                                            \n"}, {"type": "div", "text": "inOperator"}, {"type": "div", "text": "\n                                                (used by\n                                                    infixOperation,                                                     rangeTest)\n                                            "}, {"type": "a", "text": "infixOperation"}, {"type": "a", "text": "rangeTest"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'in'\n\u00a0\u00a0|\u00a0NOT_IN\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'in'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "NOT_IN"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nisOperator\n\n                                                (used by\n                                                    infixOperation,                                                     typeTest)\n                                            \n\n\n\u00a0\u00a0:\u00a0'is'\n\u00a0\u00a0|\u00a0NOT_IS\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nisOperator\n\n                                                (used by\n                                                    infixOperation,                                                     typeTest)\n                                            \n"}, {"type": "div", "text": "isOperator"}, {"type": "div", "text": "\n                                                (used by\n                                                    infixOperation,                                                     typeTest)\n                                            "}, {"type": "a", "text": "infixOperation"}, {"type": "a", "text": "typeTest"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'is'\n\u00a0\u00a0|\u00a0NOT_IS\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'is'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "NOT_IS"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nadditiveOperator\n\n                                                (used by\n                                                    additiveExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'+'\n\u00a0\u00a0|\u00a0'-'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nadditiveOperator\n\n                                                (used by\n                                                    additiveExpression)\n                                            \n"}, {"type": "div", "text": "additiveOperator"}, {"type": "div", "text": "\n                                                (used by\n                                                    additiveExpression)\n                                            "}, {"type": "a", "text": "additiveExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'+'\n\u00a0\u00a0|\u00a0'-'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'+'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'-'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nmultiplicativeOperator\n\n                                                (used by\n                                                    multiplicativeExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'*'\n\u00a0\u00a0|\u00a0'/'\n\u00a0\u00a0|\u00a0'%'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nmultiplicativeOperator\n\n                                                (used by\n                                                    multiplicativeExpression)\n                                            \n"}, {"type": "div", "text": "multiplicativeOperator"}, {"type": "div", "text": "\n                                                (used by\n                                                    multiplicativeExpression)\n                                            "}, {"type": "a", "text": "multiplicativeExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'*'\n\u00a0\u00a0|\u00a0'/'\n\u00a0\u00a0|\u00a0'%'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'*'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'/'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'%'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nasOperator\n\n                                                (used by\n                                                    asExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'as'\n\u00a0\u00a0|\u00a0'as?'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nasOperator\n\n                                                (used by\n                                                    asExpression)\n                                            \n"}, {"type": "div", "text": "asOperator"}, {"type": "div", "text": "\n                                                (used by\n                                                    asExpression)\n                                            "}, {"type": "a", "text": "asExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'as'\n\u00a0\u00a0|\u00a0'as?'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'as'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'as?'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nprefixUnaryOperator\n\n                                                (used by\n                                                    unaryPrefix)\n                                            \n\n\n\u00a0\u00a0:\u00a0'++'\n\u00a0\u00a0|\u00a0'--'\n\u00a0\u00a0|\u00a0'-'\n\u00a0\u00a0|\u00a0'+'\n\u00a0\u00a0|\u00a0excl\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nprefixUnaryOperator\n\n                                                (used by\n                                                    unaryPrefix)\n                                            \n"}, {"type": "div", "text": "prefixUnaryOperator"}, {"type": "div", "text": "\n                                                (used by\n                                                    unaryPrefix)\n                                            "}, {"type": "a", "text": "unaryPrefix"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'++'\n\u00a0\u00a0|\u00a0'--'\n\u00a0\u00a0|\u00a0'-'\n\u00a0\u00a0|\u00a0'+'\n\u00a0\u00a0|\u00a0excl\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'++'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'--'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'-'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'+'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "excl"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\npostfixUnaryOperator\n\n                                                (used by\n                                                    postfixUnarySuffix)\n                                            \n\n\n\u00a0\u00a0:\u00a0'++'\n\u00a0\u00a0|\u00a0'--'\n\u00a0\u00a0|\u00a0'!'\u00a0excl\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\npostfixUnaryOperator\n\n                                                (used by\n                                                    postfixUnarySuffix)\n                                            \n"}, {"type": "div", "text": "postfixUnaryOperator"}, {"type": "div", "text": "\n                                                (used by\n                                                    postfixUnarySuffix)\n                                            "}, {"type": "a", "text": "postfixUnarySuffix"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'++'\n\u00a0\u00a0|\u00a0'--'\n\u00a0\u00a0|\u00a0'!'\u00a0excl\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'++'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'--'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'!'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "excl"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nexcl\n\n                                                (used by\n                                                    prefixUnaryOperator,                                                     postfixUnaryOperator)\n                                            \n\n\n\u00a0\u00a0:\u00a0'!'\n\u00a0\u00a0|\u00a0EXCL_WS\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nexcl\n\n                                                (used by\n                                                    prefixUnaryOperator,                                                     postfixUnaryOperator)\n                                            \n"}, {"type": "div", "text": "excl"}, {"type": "div", "text": "\n                                                (used by\n                                                    prefixUnaryOperator,                                                     postfixUnaryOperator)\n                                            "}, {"type": "a", "text": "prefixUnaryOperator"}, {"type": "a", "text": "postfixUnaryOperator"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'!'\n\u00a0\u00a0|\u00a0EXCL_WS\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'!'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "EXCL_WS"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nmemberAccessOperator\n\n                                                (used by\n                                                    navigationSuffix)\n                                            \n\n\n\u00a0\u00a0:\u00a0'.'\n\u00a0\u00a0|\u00a0safeNav\n\u00a0\u00a0|\u00a0'::'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nmemberAccessOperator\n\n                                                (used by\n                                                    navigationSuffix)\n                                            \n"}, {"type": "div", "text": "memberAccessOperator"}, {"type": "div", "text": "\n                                                (used by\n                                                    navigationSuffix)\n                                            "}, {"type": "a", "text": "navigationSuffix"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'.'\n\u00a0\u00a0|\u00a0safeNav\n\u00a0\u00a0|\u00a0'::'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'.'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "safeNav"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'::'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nsafeNav\n\n                                                (used by\n                                                    memberAccessOperator)\n                                            \n\n\n\u00a0\u00a0:\u00a0'?'\u00a0'.'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nsafeNav\n\n                                                (used by\n                                                    memberAccessOperator)\n                                            \n"}, {"type": "div", "text": "safeNav"}, {"type": "div", "text": "\n                                                (used by\n                                                    memberAccessOperator)\n                                            "}, {"type": "a", "text": "memberAccessOperator"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'?'\u00a0'.'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'?'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'.'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nModifiers\n\n\n\nmodifiers\n\n                                                (used by\n                                                    typeAlias,                                                     classDeclaration,                                                     primaryConstructor,                                                     classParameter,                                                     companionObject,                                                     functionDeclaration,                                                     propertyDeclaration,                                                     getter,                                                     setter,                                                     objectDeclaration,                                                     secondaryConstructor,                                                     enumEntry)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation\n\u00a0\u00a0|\u00a0modifier+\n\u00a0\u00a0; \n\n\n\nparameterModifiers\n\n                                                (used by\n                                                    functionValueParameter,                                                     parameterWithOptionalType)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation\n\u00a0\u00a0|\u00a0parameterModifier+\n\u00a0\u00a0; \n\n\n\nmodifier\n\n                                                (used by\n                                                    modifiers)\n                                            \n\n\n\u00a0\u00a0:\u00a0classModifier\n\u00a0\u00a0|\u00a0memberModifier\n\u00a0\u00a0|\u00a0visibilityModifier\n\u00a0\u00a0|\u00a0functionModifier\n\u00a0\u00a0|\u00a0propertyModifier\n\u00a0\u00a0|\u00a0inheritanceModifier\n\u00a0\u00a0|\u00a0parameterModifier\n\u00a0\u00a0|\u00a0platformModifier\n\u00a0\u00a0; \n\n\n\ntypeModifiers\n\n                                                (used by\n                                                    type,                                                     receiverType)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeModifier+\n\u00a0\u00a0; \n\n\n\ntypeModifier\n\n                                                (used by\n                                                    typeModifiers)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation\n\u00a0\u00a0|\u00a0'suspend'\n\u00a0\u00a0; \n\n\n\nclassModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'enum'\n\u00a0\u00a0|\u00a0'sealed'\n\u00a0\u00a0|\u00a0'annotation'\n\u00a0\u00a0|\u00a0'data'\n\u00a0\u00a0|\u00a0'inner'\n\u00a0\u00a0; \n\n\n\nmemberModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'override'\n\u00a0\u00a0|\u00a0'lateinit'\n\u00a0\u00a0; \n\n\n\nvisibilityModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'public'\n\u00a0\u00a0|\u00a0'private'\n\u00a0\u00a0|\u00a0'internal'\n\u00a0\u00a0|\u00a0'protected'\n\u00a0\u00a0; \n\n\n\nvarianceModifier\n\n                                                (used by\n                                                    typeProjectionModifier,                                                     typeParameterModifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'in'\n\u00a0\u00a0|\u00a0'out'\n\u00a0\u00a0; \n\n\n\ntypeParameterModifiers\n\n                                                (used by\n                                                    typeParameter)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeParameterModifier+\n\u00a0\u00a0; \n\n\n\ntypeParameterModifier\n\n                                                (used by\n                                                    typeParameterModifiers)\n                                            \n\n\n\u00a0\u00a0:\u00a0reificationModifier\n\u00a0\u00a0|\u00a0varianceModifier\n\u00a0\u00a0|\u00a0annotation\n\u00a0\u00a0; \n\n\n\nfunctionModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'tailrec'\n\u00a0\u00a0|\u00a0'operator'\n\u00a0\u00a0|\u00a0'infix'\n\u00a0\u00a0|\u00a0'inline'\n\u00a0\u00a0|\u00a0'external'\n\u00a0\u00a0|\u00a0'suspend'\n\u00a0\u00a0; \n\n\n\npropertyModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'const'\n\u00a0\u00a0; \n\n\n\ninheritanceModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'abstract'\n\u00a0\u00a0|\u00a0'final'\n\u00a0\u00a0|\u00a0'open'\n\u00a0\u00a0; \n\n\n\nparameterModifier\n\n                                                (used by\n                                                    parameterModifiers,                                                     modifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'vararg'\n\u00a0\u00a0|\u00a0'noinline'\n\u00a0\u00a0|\u00a0'crossinline'\n\u00a0\u00a0; \n\n\n\nreificationModifier\n\n                                                (used by\n                                                    typeParameterModifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'reified'\n\u00a0\u00a0; \n\n\n\nplatformModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'expect'\n\u00a0\u00a0|\u00a0'actual'\n\u00a0\u00a0; \n\n"}, {"type": "div", "text": "\nModifiers\n"}, {"type": "h3", "text": "Modifiers"}, {"type": "div", "text": "\n\nmodifiers\n\n                                                (used by\n                                                    typeAlias,                                                     classDeclaration,                                                     primaryConstructor,                                                     classParameter,                                                     companionObject,                                                     functionDeclaration,                                                     propertyDeclaration,                                                     getter,                                                     setter,                                                     objectDeclaration,                                                     secondaryConstructor,                                                     enumEntry)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation\n\u00a0\u00a0|\u00a0modifier+\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nmodifiers\n\n                                                (used by\n                                                    typeAlias,                                                     classDeclaration,                                                     primaryConstructor,                                                     classParameter,                                                     companionObject,                                                     functionDeclaration,                                                     propertyDeclaration,                                                     getter,                                                     setter,                                                     objectDeclaration,                                                     secondaryConstructor,                                                     enumEntry)\n                                            \n"}, {"type": "div", "text": "modifiers"}, {"type": "div", "text": "\n                                                (used by\n                                                    typeAlias,                                                     classDeclaration,                                                     primaryConstructor,                                                     classParameter,                                                     companionObject,                                                     functionDeclaration,                                                     propertyDeclaration,                                                     getter,                                                     setter,                                                     objectDeclaration,                                                     secondaryConstructor,                                                     enumEntry)\n                                            "}, {"type": "a", "text": "typeAlias"}, {"type": "a", "text": "classDeclaration"}, {"type": "a", "text": "primaryConstructor"}, {"type": "a", "text": "classParameter"}, {"type": "a", "text": "companionObject"}, {"type": "a", "text": "functionDeclaration"}, {"type": "a", "text": "propertyDeclaration"}, {"type": "a", "text": "getter"}, {"type": "a", "text": "setter"}, {"type": "a", "text": "objectDeclaration"}, {"type": "a", "text": "secondaryConstructor"}, {"type": "a", "text": "enumEntry"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0annotation\n\u00a0\u00a0|\u00a0modifier+\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "annotation"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "modifier"}, {"type": "span", "text": "+"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nparameterModifiers\n\n                                                (used by\n                                                    functionValueParameter,                                                     parameterWithOptionalType)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation\n\u00a0\u00a0|\u00a0parameterModifier+\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nparameterModifiers\n\n                                                (used by\n                                                    functionValueParameter,                                                     parameterWithOptionalType)\n                                            \n"}, {"type": "div", "text": "parameterModifiers"}, {"type": "div", "text": "\n                                                (used by\n                                                    functionValueParameter,                                                     parameterWithOptionalType)\n                                            "}, {"type": "a", "text": "functionValueParameter"}, {"type": "a", "text": "parameterWithOptionalType"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0annotation\n\u00a0\u00a0|\u00a0parameterModifier+\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "annotation"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "parameterModifier"}, {"type": "span", "text": "+"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nmodifier\n\n                                                (used by\n                                                    modifiers)\n                                            \n\n\n\u00a0\u00a0:\u00a0classModifier\n\u00a0\u00a0|\u00a0memberModifier\n\u00a0\u00a0|\u00a0visibilityModifier\n\u00a0\u00a0|\u00a0functionModifier\n\u00a0\u00a0|\u00a0propertyModifier\n\u00a0\u00a0|\u00a0inheritanceModifier\n\u00a0\u00a0|\u00a0parameterModifier\n\u00a0\u00a0|\u00a0platformModifier\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nmodifier\n\n                                                (used by\n                                                    modifiers)\n                                            \n"}, {"type": "div", "text": "modifier"}, {"type": "div", "text": "\n                                                (used by\n                                                    modifiers)\n                                            "}, {"type": "a", "text": "modifiers"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0classModifier\n\u00a0\u00a0|\u00a0memberModifier\n\u00a0\u00a0|\u00a0visibilityModifier\n\u00a0\u00a0|\u00a0functionModifier\n\u00a0\u00a0|\u00a0propertyModifier\n\u00a0\u00a0|\u00a0inheritanceModifier\n\u00a0\u00a0|\u00a0parameterModifier\n\u00a0\u00a0|\u00a0platformModifier\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "classModifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "memberModifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "visibilityModifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "functionModifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "propertyModifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "inheritanceModifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "parameterModifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "platformModifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ntypeModifiers\n\n                                                (used by\n                                                    type,                                                     receiverType)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeModifier+\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ntypeModifiers\n\n                                                (used by\n                                                    type,                                                     receiverType)\n                                            \n"}, {"type": "div", "text": "typeModifiers"}, {"type": "div", "text": "\n                                                (used by\n                                                    type,                                                     receiverType)\n                                            "}, {"type": "a", "text": "type"}, {"type": "a", "text": "receiverType"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0typeModifier+\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeModifier"}, {"type": "span", "text": "+"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ntypeModifier\n\n                                                (used by\n                                                    typeModifiers)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotation\n\u00a0\u00a0|\u00a0'suspend'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ntypeModifier\n\n                                                (used by\n                                                    typeModifiers)\n                                            \n"}, {"type": "div", "text": "typeModifier"}, {"type": "div", "text": "\n                                                (used by\n                                                    typeModifiers)\n                                            "}, {"type": "a", "text": "typeModifiers"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0annotation\n\u00a0\u00a0|\u00a0'suspend'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "annotation"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'suspend'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nclassModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'enum'\n\u00a0\u00a0|\u00a0'sealed'\n\u00a0\u00a0|\u00a0'annotation'\n\u00a0\u00a0|\u00a0'data'\n\u00a0\u00a0|\u00a0'inner'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nclassModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n"}, {"type": "div", "text": "classModifier"}, {"type": "div", "text": "\n                                                (used by\n                                                    modifier)\n                                            "}, {"type": "a", "text": "modifier"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'enum'\n\u00a0\u00a0|\u00a0'sealed'\n\u00a0\u00a0|\u00a0'annotation'\n\u00a0\u00a0|\u00a0'data'\n\u00a0\u00a0|\u00a0'inner'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'enum'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'sealed'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'annotation'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'data'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'inner'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nmemberModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'override'\n\u00a0\u00a0|\u00a0'lateinit'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nmemberModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n"}, {"type": "div", "text": "memberModifier"}, {"type": "div", "text": "\n                                                (used by\n                                                    modifier)\n                                            "}, {"type": "a", "text": "modifier"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'override'\n\u00a0\u00a0|\u00a0'lateinit'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'override'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'lateinit'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nvisibilityModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'public'\n\u00a0\u00a0|\u00a0'private'\n\u00a0\u00a0|\u00a0'internal'\n\u00a0\u00a0|\u00a0'protected'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nvisibilityModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n"}, {"type": "div", "text": "visibilityModifier"}, {"type": "div", "text": "\n                                                (used by\n                                                    modifier)\n                                            "}, {"type": "a", "text": "modifier"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'public'\n\u00a0\u00a0|\u00a0'private'\n\u00a0\u00a0|\u00a0'internal'\n\u00a0\u00a0|\u00a0'protected'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'public'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'private'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'internal'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'protected'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nvarianceModifier\n\n                                                (used by\n                                                    typeProjectionModifier,                                                     typeParameterModifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'in'\n\u00a0\u00a0|\u00a0'out'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nvarianceModifier\n\n                                                (used by\n                                                    typeProjectionModifier,                                                     typeParameterModifier)\n                                            \n"}, {"type": "div", "text": "varianceModifier"}, {"type": "div", "text": "\n                                                (used by\n                                                    typeProjectionModifier,                                                     typeParameterModifier)\n                                            "}, {"type": "a", "text": "typeProjectionModifier"}, {"type": "a", "text": "typeParameterModifier"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'in'\n\u00a0\u00a0|\u00a0'out'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'in'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'out'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ntypeParameterModifiers\n\n                                                (used by\n                                                    typeParameter)\n                                            \n\n\n\u00a0\u00a0:\u00a0typeParameterModifier+\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ntypeParameterModifiers\n\n                                                (used by\n                                                    typeParameter)\n                                            \n"}, {"type": "div", "text": "typeParameterModifiers"}, {"type": "div", "text": "\n                                                (used by\n                                                    typeParameter)\n                                            "}, {"type": "a", "text": "typeParameter"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0typeParameterModifier+\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "typeParameterModifier"}, {"type": "span", "text": "+"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ntypeParameterModifier\n\n                                                (used by\n                                                    typeParameterModifiers)\n                                            \n\n\n\u00a0\u00a0:\u00a0reificationModifier\n\u00a0\u00a0|\u00a0varianceModifier\n\u00a0\u00a0|\u00a0annotation\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ntypeParameterModifier\n\n                                                (used by\n                                                    typeParameterModifiers)\n                                            \n"}, {"type": "div", "text": "typeParameterModifier"}, {"type": "div", "text": "\n                                                (used by\n                                                    typeParameterModifiers)\n                                            "}, {"type": "a", "text": "typeParameterModifiers"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0reificationModifier\n\u00a0\u00a0|\u00a0varianceModifier\n\u00a0\u00a0|\u00a0annotation\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "reificationModifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "varianceModifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "annotation"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nfunctionModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'tailrec'\n\u00a0\u00a0|\u00a0'operator'\n\u00a0\u00a0|\u00a0'infix'\n\u00a0\u00a0|\u00a0'inline'\n\u00a0\u00a0|\u00a0'external'\n\u00a0\u00a0|\u00a0'suspend'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nfunctionModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n"}, {"type": "div", "text": "functionModifier"}, {"type": "div", "text": "\n                                                (used by\n                                                    modifier)\n                                            "}, {"type": "a", "text": "modifier"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'tailrec'\n\u00a0\u00a0|\u00a0'operator'\n\u00a0\u00a0|\u00a0'infix'\n\u00a0\u00a0|\u00a0'inline'\n\u00a0\u00a0|\u00a0'external'\n\u00a0\u00a0|\u00a0'suspend'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'tailrec'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'operator'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'infix'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'inline'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'external'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'suspend'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\npropertyModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'const'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\npropertyModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n"}, {"type": "div", "text": "propertyModifier"}, {"type": "div", "text": "\n                                                (used by\n                                                    modifier)\n                                            "}, {"type": "a", "text": "modifier"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'const'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'const'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\ninheritanceModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'abstract'\n\u00a0\u00a0|\u00a0'final'\n\u00a0\u00a0|\u00a0'open'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\ninheritanceModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n"}, {"type": "div", "text": "inheritanceModifier"}, {"type": "div", "text": "\n                                                (used by\n                                                    modifier)\n                                            "}, {"type": "a", "text": "modifier"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'abstract'\n\u00a0\u00a0|\u00a0'final'\n\u00a0\u00a0|\u00a0'open'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'abstract'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'final'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'open'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nparameterModifier\n\n                                                (used by\n                                                    parameterModifiers,                                                     modifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'vararg'\n\u00a0\u00a0|\u00a0'noinline'\n\u00a0\u00a0|\u00a0'crossinline'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nparameterModifier\n\n                                                (used by\n                                                    parameterModifiers,                                                     modifier)\n                                            \n"}, {"type": "div", "text": "parameterModifier"}, {"type": "div", "text": "\n                                                (used by\n                                                    parameterModifiers,                                                     modifier)\n                                            "}, {"type": "a", "text": "parameterModifiers"}, {"type": "a", "text": "modifier"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'vararg'\n\u00a0\u00a0|\u00a0'noinline'\n\u00a0\u00a0|\u00a0'crossinline'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'vararg'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'noinline'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'crossinline'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nreificationModifier\n\n                                                (used by\n                                                    typeParameterModifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'reified'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nreificationModifier\n\n                                                (used by\n                                                    typeParameterModifier)\n                                            \n"}, {"type": "div", "text": "reificationModifier"}, {"type": "div", "text": "\n                                                (used by\n                                                    typeParameterModifier)\n                                            "}, {"type": "a", "text": "typeParameterModifier"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'reified'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'reified'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nplatformModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0'expect'\n\u00a0\u00a0|\u00a0'actual'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nplatformModifier\n\n                                                (used by\n                                                    modifier)\n                                            \n"}, {"type": "div", "text": "platformModifier"}, {"type": "div", "text": "\n                                                (used by\n                                                    modifier)\n                                            "}, {"type": "a", "text": "modifier"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'expect'\n\u00a0\u00a0|\u00a0'actual'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'expect'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'actual'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nAnnotations\n\n\n\nannotation\n\n                                                (used by\n                                                    annotatedDelegationSpecifier,                                                     typeConstraint,                                                     variableDeclaration,                                                     typeProjectionModifier,                                                     statement,                                                     forStatement,                                                     unaryPrefix,                                                     annotatedLambda,                                                     valueArgument,                                                     whenSubject,                                                     catchBlock,                                                     modifiers,                                                     parameterModifiers,                                                     typeModifier,                                                     typeParameterModifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0singleAnnotation\n\u00a0\u00a0|\u00a0multiAnnotation\n\u00a0\u00a0; \n\n\n\nsingleAnnotation\n\n                                                (used by\n                                                    annotation)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotationUseSiteTarget\u00a0unescapedAnnotation\n\u00a0\u00a0|\u00a0('@'\u00a0|\u00a0AT_PRE_WS)\u00a0unescapedAnnotation\n\u00a0\u00a0; \n\n\n\nmultiAnnotation\n\n                                                (used by\n                                                    annotation)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotationUseSiteTarget\u00a0'['\u00a0unescapedAnnotation+\u00a0']'\n\u00a0\u00a0|\u00a0('@'\u00a0|\u00a0AT_PRE_WS)\u00a0'['\u00a0unescapedAnnotation+\u00a0']'\n\u00a0\u00a0; \n\n\n\nannotationUseSiteTarget\n\n                                                (used by\n                                                    singleAnnotation,                                                     multiAnnotation)\n                                            \n\n\n\u00a0\u00a0:\u00a0('@'\u00a0|\u00a0AT_PRE_WS)\n\u00a0\u00a0\u00a0\u00a0('field'\u00a0|\u00a0'property'\u00a0|\u00a0'get'\u00a0|\u00a0'set'\u00a0|\u00a0'receiver'\u00a0|\u00a0'param'\u00a0|\u00a0'setparam'\u00a0|\u00a0'delegate')\u00a0':'\n\u00a0\u00a0; \n\n\n\nunescapedAnnotation\n\n                                                (used by\n                                                    fileAnnotation,                                                     singleAnnotation,                                                     multiAnnotation)\n                                            \n\n\n\u00a0\u00a0:\u00a0constructorInvocation\n\u00a0\u00a0|\u00a0userType\n\u00a0\u00a0; \n\n"}, {"type": "div", "text": "\nAnnotations\n"}, {"type": "h3", "text": "Annotations"}, {"type": "div", "text": "\n\nannotation\n\n                                                (used by\n                                                    annotatedDelegationSpecifier,                                                     typeConstraint,                                                     variableDeclaration,                                                     typeProjectionModifier,                                                     statement,                                                     forStatement,                                                     unaryPrefix,                                                     annotatedLambda,                                                     valueArgument,                                                     whenSubject,                                                     catchBlock,                                                     modifiers,                                                     parameterModifiers,                                                     typeModifier,                                                     typeParameterModifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0singleAnnotation\n\u00a0\u00a0|\u00a0multiAnnotation\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nannotation\n\n                                                (used by\n                                                    annotatedDelegationSpecifier,                                                     typeConstraint,                                                     variableDeclaration,                                                     typeProjectionModifier,                                                     statement,                                                     forStatement,                                                     unaryPrefix,                                                     annotatedLambda,                                                     valueArgument,                                                     whenSubject,                                                     catchBlock,                                                     modifiers,                                                     parameterModifiers,                                                     typeModifier,                                                     typeParameterModifier)\n                                            \n"}, {"type": "div", "text": "annotation"}, {"type": "div", "text": "\n                                                (used by\n                                                    annotatedDelegationSpecifier,                                                     typeConstraint,                                                     variableDeclaration,                                                     typeProjectionModifier,                                                     statement,                                                     forStatement,                                                     unaryPrefix,                                                     annotatedLambda,                                                     valueArgument,                                                     whenSubject,                                                     catchBlock,                                                     modifiers,                                                     parameterModifiers,                                                     typeModifier,                                                     typeParameterModifier)\n                                            "}, {"type": "a", "text": "annotatedDelegationSpecifier"}, {"type": "a", "text": "typeConstraint"}, {"type": "a", "text": "variableDeclaration"}, {"type": "a", "text": "typeProjectionModifier"}, {"type": "a", "text": "statement"}, {"type": "a", "text": "forStatement"}, {"type": "a", "text": "unaryPrefix"}, {"type": "a", "text": "annotatedLambda"}, {"type": "a", "text": "valueArgument"}, {"type": "a", "text": "whenSubject"}, {"type": "a", "text": "catchBlock"}, {"type": "a", "text": "modifiers"}, {"type": "a", "text": "parameterModifiers"}, {"type": "a", "text": "typeModifier"}, {"type": "a", "text": "typeParameterModifier"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0singleAnnotation\n\u00a0\u00a0|\u00a0multiAnnotation\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "singleAnnotation"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "multiAnnotation"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nsingleAnnotation\n\n                                                (used by\n                                                    annotation)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotationUseSiteTarget\u00a0unescapedAnnotation\n\u00a0\u00a0|\u00a0('@'\u00a0|\u00a0AT_PRE_WS)\u00a0unescapedAnnotation\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nsingleAnnotation\n\n                                                (used by\n                                                    annotation)\n                                            \n"}, {"type": "div", "text": "singleAnnotation"}, {"type": "div", "text": "\n                                                (used by\n                                                    annotation)\n                                            "}, {"type": "a", "text": "annotation"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0annotationUseSiteTarget\u00a0unescapedAnnotation\n\u00a0\u00a0|\u00a0('@'\u00a0|\u00a0AT_PRE_WS)\u00a0unescapedAnnotation\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "annotationUseSiteTarget"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "unescapedAnnotation"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'@'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "AT_PRE_WS"}, {"type": "span", "text": ")"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "unescapedAnnotation"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nmultiAnnotation\n\n                                                (used by\n                                                    annotation)\n                                            \n\n\n\u00a0\u00a0:\u00a0annotationUseSiteTarget\u00a0'['\u00a0unescapedAnnotation+\u00a0']'\n\u00a0\u00a0|\u00a0('@'\u00a0|\u00a0AT_PRE_WS)\u00a0'['\u00a0unescapedAnnotation+\u00a0']'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nmultiAnnotation\n\n                                                (used by\n                                                    annotation)\n                                            \n"}, {"type": "div", "text": "multiAnnotation"}, {"type": "div", "text": "\n                                                (used by\n                                                    annotation)\n                                            "}, {"type": "a", "text": "annotation"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0annotationUseSiteTarget\u00a0'['\u00a0unescapedAnnotation+\u00a0']'\n\u00a0\u00a0|\u00a0('@'\u00a0|\u00a0AT_PRE_WS)\u00a0'['\u00a0unescapedAnnotation+\u00a0']'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "annotationUseSiteTarget"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'['"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "unescapedAnnotation"}, {"type": "span", "text": "+"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "']'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'@'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "AT_PRE_WS"}, {"type": "span", "text": ")"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'['"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "unescapedAnnotation"}, {"type": "span", "text": "+"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "']'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nannotationUseSiteTarget\n\n                                                (used by\n                                                    singleAnnotation,                                                     multiAnnotation)\n                                            \n\n\n\u00a0\u00a0:\u00a0('@'\u00a0|\u00a0AT_PRE_WS)\n\u00a0\u00a0\u00a0\u00a0('field'\u00a0|\u00a0'property'\u00a0|\u00a0'get'\u00a0|\u00a0'set'\u00a0|\u00a0'receiver'\u00a0|\u00a0'param'\u00a0|\u00a0'setparam'\u00a0|\u00a0'delegate')\u00a0':'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nannotationUseSiteTarget\n\n                                                (used by\n                                                    singleAnnotation,                                                     multiAnnotation)\n                                            \n"}, {"type": "div", "text": "annotationUseSiteTarget"}, {"type": "div", "text": "\n                                                (used by\n                                                    singleAnnotation,                                                     multiAnnotation)\n                                            "}, {"type": "a", "text": "singleAnnotation"}, {"type": "a", "text": "multiAnnotation"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0('@'\u00a0|\u00a0AT_PRE_WS)\n\u00a0\u00a0\u00a0\u00a0('field'\u00a0|\u00a0'property'\u00a0|\u00a0'get'\u00a0|\u00a0'set'\u00a0|\u00a0'receiver'\u00a0|\u00a0'param'\u00a0|\u00a0'setparam'\u00a0|\u00a0'delegate')\u00a0':'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'@'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "AT_PRE_WS"}, {"type": "span", "text": ")"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0\u00a0"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'field'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'property'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'get'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'set'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'receiver'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'param'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'setparam'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'delegate'"}, {"type": "span", "text": ")"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "':'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nunescapedAnnotation\n\n                                                (used by\n                                                    fileAnnotation,                                                     singleAnnotation,                                                     multiAnnotation)\n                                            \n\n\n\u00a0\u00a0:\u00a0constructorInvocation\n\u00a0\u00a0|\u00a0userType\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nunescapedAnnotation\n\n                                                (used by\n                                                    fileAnnotation,                                                     singleAnnotation,                                                     multiAnnotation)\n                                            \n"}, {"type": "div", "text": "unescapedAnnotation"}, {"type": "div", "text": "\n                                                (used by\n                                                    fileAnnotation,                                                     singleAnnotation,                                                     multiAnnotation)\n                                            "}, {"type": "a", "text": "fileAnnotation"}, {"type": "a", "text": "singleAnnotation"}, {"type": "a", "text": "multiAnnotation"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0constructorInvocation\n\u00a0\u00a0|\u00a0userType\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "constructorInvocation"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "userType"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nIdentifiers\n\n\n\nsimpleIdentifier\n\n                                                (used by\n                                                    importAlias,                                                     typeAlias,                                                     classDeclaration,                                                     classParameter,                                                     typeParameter,                                                     typeConstraint,                                                     companionObject,                                                     functionDeclaration,                                                     variableDeclaration,                                                     parameterWithOptionalType,                                                     parameter,                                                     objectDeclaration,                                                     enumEntry,                                                     simpleUserType,                                                     label,                                                     infixFunctionCall,                                                     directlyAssignableExpression,                                                     navigationSuffix,                                                     valueArgument,                                                     primaryExpression,                                                     superExpression,                                                     catchBlock,                                                     callableReference,                                                     identifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0Identifier\n\u00a0\u00a0|\u00a0'abstract'\n\u00a0\u00a0|\u00a0'annotation'\n\u00a0\u00a0|\u00a0'by'\n\u00a0\u00a0|\u00a0'catch'\n\u00a0\u00a0|\u00a0'companion'\n\u00a0\u00a0|\u00a0'constructor'\n\u00a0\u00a0|\u00a0'crossinline'\n\u00a0\u00a0|\u00a0'data'\n\u00a0\u00a0|\u00a0'dynamic'\n\u00a0\u00a0|\u00a0'enum'\n\u00a0\u00a0|\u00a0'external'\n\u00a0\u00a0|\u00a0'final'\n\u00a0\u00a0|\u00a0'finally'\n\u00a0\u00a0|\u00a0'get'\n\u00a0\u00a0|\u00a0'import'\n\u00a0\u00a0|\u00a0'infix'\n\u00a0\u00a0|\u00a0'init'\n\u00a0\u00a0|\u00a0'inline'\n\u00a0\u00a0|\u00a0'inner'\n\u00a0\u00a0|\u00a0'internal'\n\u00a0\u00a0|\u00a0'lateinit'\n\u00a0\u00a0|\u00a0'noinline'\n\u00a0\u00a0|\u00a0'open'\n\u00a0\u00a0|\u00a0'operator'\n\u00a0\u00a0|\u00a0'out'\n\u00a0\u00a0|\u00a0'override'\n\u00a0\u00a0|\u00a0'private'\n\u00a0\u00a0|\u00a0'protected'\n\u00a0\u00a0|\u00a0'public'\n\u00a0\u00a0|\u00a0'reified'\n\u00a0\u00a0|\u00a0'sealed'\n\u00a0\u00a0|\u00a0'tailrec'\n\u00a0\u00a0|\u00a0'set'\n\u00a0\u00a0|\u00a0'vararg'\n\u00a0\u00a0|\u00a0'where'\n\u00a0\u00a0|\u00a0'field'\n\u00a0\u00a0|\u00a0'property'\n\u00a0\u00a0|\u00a0'receiver'\n\u00a0\u00a0|\u00a0'param'\n\u00a0\u00a0|\u00a0'setparam'\n\u00a0\u00a0|\u00a0'delegate'\n\u00a0\u00a0|\u00a0'file'\n\u00a0\u00a0|\u00a0'expect'\n\u00a0\u00a0|\u00a0'actual'\n\u00a0\u00a0|\u00a0'const'\n\u00a0\u00a0|\u00a0'suspend'\n\u00a0\u00a0; \n\n\n\nidentifier\n\n                                                (used by\n                                                    packageHeader,                                                     importHeader)\n                                            \n\n\n\u00a0\u00a0:\u00a0simpleIdentifier\u00a0('.'\u00a0simpleIdentifier)*\n\u00a0\u00a0; \n\n"}, {"type": "div", "text": "\nIdentifiers\n"}, {"type": "h3", "text": "Identifiers"}, {"type": "div", "text": "\n\nsimpleIdentifier\n\n                                                (used by\n                                                    importAlias,                                                     typeAlias,                                                     classDeclaration,                                                     classParameter,                                                     typeParameter,                                                     typeConstraint,                                                     companionObject,                                                     functionDeclaration,                                                     variableDeclaration,                                                     parameterWithOptionalType,                                                     parameter,                                                     objectDeclaration,                                                     enumEntry,                                                     simpleUserType,                                                     label,                                                     infixFunctionCall,                                                     directlyAssignableExpression,                                                     navigationSuffix,                                                     valueArgument,                                                     primaryExpression,                                                     superExpression,                                                     catchBlock,                                                     callableReference,                                                     identifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0Identifier\n\u00a0\u00a0|\u00a0'abstract'\n\u00a0\u00a0|\u00a0'annotation'\n\u00a0\u00a0|\u00a0'by'\n\u00a0\u00a0|\u00a0'catch'\n\u00a0\u00a0|\u00a0'companion'\n\u00a0\u00a0|\u00a0'constructor'\n\u00a0\u00a0|\u00a0'crossinline'\n\u00a0\u00a0|\u00a0'data'\n\u00a0\u00a0|\u00a0'dynamic'\n\u00a0\u00a0|\u00a0'enum'\n\u00a0\u00a0|\u00a0'external'\n\u00a0\u00a0|\u00a0'final'\n\u00a0\u00a0|\u00a0'finally'\n\u00a0\u00a0|\u00a0'get'\n\u00a0\u00a0|\u00a0'import'\n\u00a0\u00a0|\u00a0'infix'\n\u00a0\u00a0|\u00a0'init'\n\u00a0\u00a0|\u00a0'inline'\n\u00a0\u00a0|\u00a0'inner'\n\u00a0\u00a0|\u00a0'internal'\n\u00a0\u00a0|\u00a0'lateinit'\n\u00a0\u00a0|\u00a0'noinline'\n\u00a0\u00a0|\u00a0'open'\n\u00a0\u00a0|\u00a0'operator'\n\u00a0\u00a0|\u00a0'out'\n\u00a0\u00a0|\u00a0'override'\n\u00a0\u00a0|\u00a0'private'\n\u00a0\u00a0|\u00a0'protected'\n\u00a0\u00a0|\u00a0'public'\n\u00a0\u00a0|\u00a0'reified'\n\u00a0\u00a0|\u00a0'sealed'\n\u00a0\u00a0|\u00a0'tailrec'\n\u00a0\u00a0|\u00a0'set'\n\u00a0\u00a0|\u00a0'vararg'\n\u00a0\u00a0|\u00a0'where'\n\u00a0\u00a0|\u00a0'field'\n\u00a0\u00a0|\u00a0'property'\n\u00a0\u00a0|\u00a0'receiver'\n\u00a0\u00a0|\u00a0'param'\n\u00a0\u00a0|\u00a0'setparam'\n\u00a0\u00a0|\u00a0'delegate'\n\u00a0\u00a0|\u00a0'file'\n\u00a0\u00a0|\u00a0'expect'\n\u00a0\u00a0|\u00a0'actual'\n\u00a0\u00a0|\u00a0'const'\n\u00a0\u00a0|\u00a0'suspend'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nsimpleIdentifier\n\n                                                (used by\n                                                    importAlias,                                                     typeAlias,                                                     classDeclaration,                                                     classParameter,                                                     typeParameter,                                                     typeConstraint,                                                     companionObject,                                                     functionDeclaration,                                                     variableDeclaration,                                                     parameterWithOptionalType,                                                     parameter,                                                     objectDeclaration,                                                     enumEntry,                                                     simpleUserType,                                                     label,                                                     infixFunctionCall,                                                     directlyAssignableExpression,                                                     navigationSuffix,                                                     valueArgument,                                                     primaryExpression,                                                     superExpression,                                                     catchBlock,                                                     callableReference,                                                     identifier)\n                                            \n"}, {"type": "div", "text": "simpleIdentifier"}, {"type": "div", "text": "\n                                                (used by\n                                                    importAlias,                                                     typeAlias,                                                     classDeclaration,                                                     classParameter,                                                     typeParameter,                                                     typeConstraint,                                                     companionObject,                                                     functionDeclaration,                                                     variableDeclaration,                                                     parameterWithOptionalType,                                                     parameter,                                                     objectDeclaration,                                                     enumEntry,                                                     simpleUserType,                                                     label,                                                     infixFunctionCall,                                                     directlyAssignableExpression,                                                     navigationSuffix,                                                     valueArgument,                                                     primaryExpression,                                                     superExpression,                                                     catchBlock,                                                     callableReference,                                                     identifier)\n                                            "}, {"type": "a", "text": "importAlias"}, {"type": "a", "text": "typeAlias"}, {"type": "a", "text": "classDeclaration"}, {"type": "a", "text": "classParameter"}, {"type": "a", "text": "typeParameter"}, {"type": "a", "text": "typeConstraint"}, {"type": "a", "text": "companionObject"}, {"type": "a", "text": "functionDeclaration"}, {"type": "a", "text": "variableDeclaration"}, {"type": "a", "text": "parameterWithOptionalType"}, {"type": "a", "text": "parameter"}, {"type": "a", "text": "objectDeclaration"}, {"type": "a", "text": "enumEntry"}, {"type": "a", "text": "simpleUserType"}, {"type": "a", "text": "label"}, {"type": "a", "text": "infixFunctionCall"}, {"type": "a", "text": "directlyAssignableExpression"}, {"type": "a", "text": "navigationSuffix"}, {"type": "a", "text": "valueArgument"}, {"type": "a", "text": "primaryExpression"}, {"type": "a", "text": "superExpression"}, {"type": "a", "text": "catchBlock"}, {"type": "a", "text": "callableReference"}, {"type": "a", "text": "identifier"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0Identifier\n\u00a0\u00a0|\u00a0'abstract'\n\u00a0\u00a0|\u00a0'annotation'\n\u00a0\u00a0|\u00a0'by'\n\u00a0\u00a0|\u00a0'catch'\n\u00a0\u00a0|\u00a0'companion'\n\u00a0\u00a0|\u00a0'constructor'\n\u00a0\u00a0|\u00a0'crossinline'\n\u00a0\u00a0|\u00a0'data'\n\u00a0\u00a0|\u00a0'dynamic'\n\u00a0\u00a0|\u00a0'enum'\n\u00a0\u00a0|\u00a0'external'\n\u00a0\u00a0|\u00a0'final'\n\u00a0\u00a0|\u00a0'finally'\n\u00a0\u00a0|\u00a0'get'\n\u00a0\u00a0|\u00a0'import'\n\u00a0\u00a0|\u00a0'infix'\n\u00a0\u00a0|\u00a0'init'\n\u00a0\u00a0|\u00a0'inline'\n\u00a0\u00a0|\u00a0'inner'\n\u00a0\u00a0|\u00a0'internal'\n\u00a0\u00a0|\u00a0'lateinit'\n\u00a0\u00a0|\u00a0'noinline'\n\u00a0\u00a0|\u00a0'open'\n\u00a0\u00a0|\u00a0'operator'\n\u00a0\u00a0|\u00a0'out'\n\u00a0\u00a0|\u00a0'override'\n\u00a0\u00a0|\u00a0'private'\n\u00a0\u00a0|\u00a0'protected'\n\u00a0\u00a0|\u00a0'public'\n\u00a0\u00a0|\u00a0'reified'\n\u00a0\u00a0|\u00a0'sealed'\n\u00a0\u00a0|\u00a0'tailrec'\n\u00a0\u00a0|\u00a0'set'\n\u00a0\u00a0|\u00a0'vararg'\n\u00a0\u00a0|\u00a0'where'\n\u00a0\u00a0|\u00a0'field'\n\u00a0\u00a0|\u00a0'property'\n\u00a0\u00a0|\u00a0'receiver'\n\u00a0\u00a0|\u00a0'param'\n\u00a0\u00a0|\u00a0'setparam'\n\u00a0\u00a0|\u00a0'delegate'\n\u00a0\u00a0|\u00a0'file'\n\u00a0\u00a0|\u00a0'expect'\n\u00a0\u00a0|\u00a0'actual'\n\u00a0\u00a0|\u00a0'const'\n\u00a0\u00a0|\u00a0'suspend'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "Identifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'abstract'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'annotation'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'by'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'catch'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'companion'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'constructor'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'crossinline'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'data'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'dynamic'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'enum'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'external'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'final'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'finally'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'get'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'import'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'infix'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'init'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'inline'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'inner'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'internal'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'lateinit'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'noinline'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'open'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'operator'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'out'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'override'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'private'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'protected'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'public'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'reified'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'sealed'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'tailrec'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'set'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'vararg'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'where'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'field'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'property'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'receiver'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'param'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'setparam'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'delegate'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'file'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'expect'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'actual'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'const'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'suspend'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nidentifier\n\n                                                (used by\n                                                    packageHeader,                                                     importHeader)\n                                            \n\n\n\u00a0\u00a0:\u00a0simpleIdentifier\u00a0('.'\u00a0simpleIdentifier)*\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nidentifier\n\n                                                (used by\n                                                    packageHeader,                                                     importHeader)\n                                            \n"}, {"type": "div", "text": "identifier"}, {"type": "div", "text": "\n                                                (used by\n                                                    packageHeader,                                                     importHeader)\n                                            "}, {"type": "a", "text": "packageHeader"}, {"type": "a", "text": "importHeader"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0simpleIdentifier\u00a0('.'\u00a0simpleIdentifier)*\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "simpleIdentifier"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'.'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "simpleIdentifier"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nLexical grammar\nGeneral\n\n\n\nShebangLine\n\n                                                (used by\n                                                    shebangLine)\n                                            \n\n\n\u00a0\u00a0:\u00a0'#!'\u00a0~[\\r\\n]*\n\u00a0\u00a0; \n\n\n\nDelimitedComment\n\n                                                (used by\n                                                    DelimitedComment,                                                     Hidden)\n                                            \n\n\n\u00a0\u00a0:\u00a0('/*'\u00a0(DelimitedComment\u00a0|\u00a0.)*?\u00a0'*/')\u00a0\n\u00a0\u00a0; \n\n\n\nLineComment\n\n                                                (used by\n                                                    Hidden)\n                                            \n\n\n\u00a0\u00a0:\u00a0('//'\u00a0~[\\r\\n]*)\u00a0\n\u00a0\u00a0; \n\n\n\nWS\n\n                                                (used by\n                                                    Hidden)\n                                            \n\n\n\u00a0\u00a0:\u00a0[\\u0020\\u0009\\u000C]\u00a0\n\u00a0\u00a0; \n\n\nhelper\n\nHidden\n\n                                                (used by\n                                                    EXCL_WS,                                                     AT_POST_WS,                                                     AT_PRE_WS,                                                     AT_BOTH_WS,                                                     QUEST_WS,                                                     NOT_IS,                                                     NOT_IN)\n                                            \n\n\n\u00a0\u00a0:\u00a0DelimitedComment\n\u00a0\u00a0|\u00a0LineComment\n\u00a0\u00a0|\u00a0WS\n\u00a0\u00a0; \n\n"}, {"type": "div", "text": "\nLexical grammar\nGeneral\n"}, {"type": "h2", "text": "Lexical grammar"}, {"type": "h3", "text": "General"}, {"type": "div", "text": "\n\nShebangLine\n\n                                                (used by\n                                                    shebangLine)\n                                            \n\n\n\u00a0\u00a0:\u00a0'#!'\u00a0~[\\r\\n]*\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nShebangLine\n\n                                                (used by\n                                                    shebangLine)\n                                            \n"}, {"type": "div", "text": "ShebangLine"}, {"type": "div", "text": "\n                                                (used by\n                                                    shebangLine)\n                                            "}, {"type": "a", "text": "shebangLine"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'#!'\u00a0~[\\r\\n]*\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'#!'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "~"}, {"type": "span", "text": "[\\r\\n]"}, {"type": "span", "text": "*"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nDelimitedComment\n\n                                                (used by\n                                                    DelimitedComment,                                                     Hidden)\n                                            \n\n\n\u00a0\u00a0:\u00a0('/*'\u00a0(DelimitedComment\u00a0|\u00a0.)*?\u00a0'*/')\u00a0\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nDelimitedComment\n\n                                                (used by\n                                                    DelimitedComment,                                                     Hidden)\n                                            \n"}, {"type": "div", "text": "DelimitedComment"}, {"type": "div", "text": "\n                                                (used by\n                                                    DelimitedComment,                                                     Hidden)\n                                            "}, {"type": "a", "text": "DelimitedComment"}, {"type": "a", "text": "Hidden"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0('/*'\u00a0(DelimitedComment\u00a0|\u00a0.)*?\u00a0'*/')\u00a0\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'/*'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "DelimitedComment"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "."}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'*/'"}, {"type": "span", "text": ")"}, {"type": "span", "text": "\u00a0"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nLineComment\n\n                                                (used by\n                                                    Hidden)\n                                            \n\n\n\u00a0\u00a0:\u00a0('//'\u00a0~[\\r\\n]*)\u00a0\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nLineComment\n\n                                                (used by\n                                                    Hidden)\n                                            \n"}, {"type": "div", "text": "LineComment"}, {"type": "div", "text": "\n                                                (used by\n                                                    Hidden)\n                                            "}, {"type": "a", "text": "Hidden"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0('//'\u00a0~[\\r\\n]*)\u00a0\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'//'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "~"}, {"type": "span", "text": "[\\r\\n]"}, {"type": "span", "text": "*"}, {"type": "span", "text": ")"}, {"type": "span", "text": "\u00a0"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nWS\n\n                                                (used by\n                                                    Hidden)\n                                            \n\n\n\u00a0\u00a0:\u00a0[\\u0020\\u0009\\u000C]\u00a0\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nWS\n\n                                                (used by\n                                                    Hidden)\n                                            \n"}, {"type": "div", "text": "WS"}, {"type": "div", "text": "\n                                                (used by\n                                                    Hidden)\n                                            "}, {"type": "a", "text": "Hidden"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0[\\u0020\\u0009\\u000C]\u00a0\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "[\\u0020\\u0009\\u000C]"}, {"type": "span", "text": "\u00a0"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\nhelper\n\nHidden\n\n                                                (used by\n                                                    EXCL_WS,                                                     AT_POST_WS,                                                     AT_PRE_WS,                                                     AT_BOTH_WS,                                                     QUEST_WS,                                                     NOT_IS,                                                     NOT_IN)\n                                            \n\n\n\u00a0\u00a0:\u00a0DelimitedComment\n\u00a0\u00a0|\u00a0LineComment\n\u00a0\u00a0|\u00a0WS\n\u00a0\u00a0; \n"}, {"type": "div", "text": "helper"}, {"type": "div", "text": "\nHidden\n\n                                                (used by\n                                                    EXCL_WS,                                                     AT_POST_WS,                                                     AT_PRE_WS,                                                     AT_BOTH_WS,                                                     QUEST_WS,                                                     NOT_IS,                                                     NOT_IN)\n                                            \n"}, {"type": "div", "text": "Hidden"}, {"type": "div", "text": "\n                                                (used by\n                                                    EXCL_WS,                                                     AT_POST_WS,                                                     AT_PRE_WS,                                                     AT_BOTH_WS,                                                     QUEST_WS,                                                     NOT_IS,                                                     NOT_IN)\n                                            "}, {"type": "a", "text": "EXCL_WS"}, {"type": "a", "text": "AT_POST_WS"}, {"type": "a", "text": "AT_PRE_WS"}, {"type": "a", "text": "AT_BOTH_WS"}, {"type": "a", "text": "QUEST_WS"}, {"type": "a", "text": "NOT_IS"}, {"type": "a", "text": "NOT_IN"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0DelimitedComment\n\u00a0\u00a0|\u00a0LineComment\n\u00a0\u00a0|\u00a0WS\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "DelimitedComment"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "LineComment"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "WS"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nSeparators and operations\n\n\n\nRESERVED\n\n\n\u00a0\u00a0:\u00a0'...'\n\u00a0\u00a0; \n\n\n\nEXCL_WS\n\n                                                (used by\n                                                    excl)\n                                            \n\n\n\u00a0\u00a0:\u00a0'!'\u00a0Hidden\n\u00a0\u00a0; \n\n\n\nDOUBLE_ARROW\n\n\n\u00a0\u00a0:\u00a0'=>'\n\u00a0\u00a0; \n\n\n\nDOUBLE_SEMICOLON\n\n\n\u00a0\u00a0:\u00a0';;'\n\u00a0\u00a0; \n\n\n\nHASH\n\n\n\u00a0\u00a0:\u00a0'#'\n\u00a0\u00a0; \n\n\n\nAT_POST_WS\n\n                                                (used by\n                                                    label)\n                                            \n\n\n\u00a0\u00a0:\u00a0'@'\u00a0Hidden\n\u00a0\u00a0; \n\n\n\nAT_PRE_WS\n\n                                                (used by\n                                                    fileAnnotation,                                                     singleAnnotation,                                                     multiAnnotation,                                                     annotationUseSiteTarget)\n                                            \n\n\n\u00a0\u00a0:\u00a0Hidden\u00a0'@'\n\u00a0\u00a0; \n\n\n\nAT_BOTH_WS\n\n\n\u00a0\u00a0:\u00a0Hidden\u00a0'@'\u00a0Hidden\n\u00a0\u00a0; \n\n\n\nQUEST_WS\n\n                                                (used by\n                                                    quest)\n                                            \n\n\n\u00a0\u00a0:\u00a0'?'\u00a0Hidden\n\u00a0\u00a0; \n\n\n\nSINGLE_QUOTE\n\n\n\u00a0\u00a0:\u00a0'\\''\n\u00a0\u00a0; \n\n"}, {"type": "div", "text": "\nSeparators and operations\n"}, {"type": "h3", "text": "Separators and operations"}, {"type": "div", "text": "\n\nRESERVED\n\n\n\u00a0\u00a0:\u00a0'...'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nRESERVED\n"}, {"type": "div", "text": "RESERVED"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'...'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'...'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nEXCL_WS\n\n                                                (used by\n                                                    excl)\n                                            \n\n\n\u00a0\u00a0:\u00a0'!'\u00a0Hidden\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nEXCL_WS\n\n                                                (used by\n                                                    excl)\n                                            \n"}, {"type": "div", "text": "EXCL_WS"}, {"type": "div", "text": "\n                                                (used by\n                                                    excl)\n                                            "}, {"type": "a", "text": "excl"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'!'\u00a0Hidden\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'!'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "Hidden"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nDOUBLE_ARROW\n\n\n\u00a0\u00a0:\u00a0'=>'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nDOUBLE_ARROW\n"}, {"type": "div", "text": "DOUBLE_ARROW"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'=>'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'=>'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nDOUBLE_SEMICOLON\n\n\n\u00a0\u00a0:\u00a0';;'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nDOUBLE_SEMICOLON\n"}, {"type": "div", "text": "DOUBLE_SEMICOLON"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0';;'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "';;'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nHASH\n\n\n\u00a0\u00a0:\u00a0'#'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nHASH\n"}, {"type": "div", "text": "HASH"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'#'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'#'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nAT_POST_WS\n\n                                                (used by\n                                                    label)\n                                            \n\n\n\u00a0\u00a0:\u00a0'@'\u00a0Hidden\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nAT_POST_WS\n\n                                                (used by\n                                                    label)\n                                            \n"}, {"type": "div", "text": "AT_POST_WS"}, {"type": "div", "text": "\n                                                (used by\n                                                    label)\n                                            "}, {"type": "a", "text": "label"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'@'\u00a0Hidden\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'@'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "Hidden"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nAT_PRE_WS\n\n                                                (used by\n                                                    fileAnnotation,                                                     singleAnnotation,                                                     multiAnnotation,                                                     annotationUseSiteTarget)\n                                            \n\n\n\u00a0\u00a0:\u00a0Hidden\u00a0'@'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nAT_PRE_WS\n\n                                                (used by\n                                                    fileAnnotation,                                                     singleAnnotation,                                                     multiAnnotation,                                                     annotationUseSiteTarget)\n                                            \n"}, {"type": "div", "text": "AT_PRE_WS"}, {"type": "div", "text": "\n                                                (used by\n                                                    fileAnnotation,                                                     singleAnnotation,                                                     multiAnnotation,                                                     annotationUseSiteTarget)\n                                            "}, {"type": "a", "text": "fileAnnotation"}, {"type": "a", "text": "singleAnnotation"}, {"type": "a", "text": "multiAnnotation"}, {"type": "a", "text": "annotationUseSiteTarget"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0Hidden\u00a0'@'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "Hidden"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'@'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nAT_BOTH_WS\n\n\n\u00a0\u00a0:\u00a0Hidden\u00a0'@'\u00a0Hidden\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nAT_BOTH_WS\n"}, {"type": "div", "text": "AT_BOTH_WS"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0Hidden\u00a0'@'\u00a0Hidden\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "Hidden"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'@'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "Hidden"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nQUEST_WS\n\n                                                (used by\n                                                    quest)\n                                            \n\n\n\u00a0\u00a0:\u00a0'?'\u00a0Hidden\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nQUEST_WS\n\n                                                (used by\n                                                    quest)\n                                            \n"}, {"type": "div", "text": "QUEST_WS"}, {"type": "div", "text": "\n                                                (used by\n                                                    quest)\n                                            "}, {"type": "a", "text": "quest"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'?'\u00a0Hidden\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'?'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "Hidden"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nSINGLE_QUOTE\n\n\n\u00a0\u00a0:\u00a0'\\''\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nSINGLE_QUOTE\n"}, {"type": "div", "text": "SINGLE_QUOTE"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'\\''\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'\\''"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nKeywords\n\n\n\nRETURN_AT\n\n                                                (used by\n                                                    jumpExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'return@'\u00a0Identifier\n\u00a0\u00a0; \n\n\n\nCONTINUE_AT\n\n                                                (used by\n                                                    jumpExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'continue@'\u00a0Identifier\n\u00a0\u00a0; \n\n\n\nBREAK_AT\n\n                                                (used by\n                                                    jumpExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'break@'\u00a0Identifier\n\u00a0\u00a0; \n\n\n\nTHIS_AT\n\n                                                (used by\n                                                    thisExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'this@'\u00a0Identifier\n\u00a0\u00a0; \n\n\n\nSUPER_AT\n\n                                                (used by\n                                                    superExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'super@'\u00a0Identifier\n\u00a0\u00a0; \n\n\n\nTYPEOF\n\n\n\u00a0\u00a0:\u00a0'typeof'\n\u00a0\u00a0; \n\n\n\nNOT_IS\n\n                                                (used by\n                                                    isOperator)\n                                            \n\n\n\u00a0\u00a0:\u00a0'!is'\u00a0Hidden\n\u00a0\u00a0; \n\n\n\nNOT_IN\n\n                                                (used by\n                                                    inOperator)\n                                            \n\n\n\u00a0\u00a0:\u00a0'!in'\u00a0Hidden\n\u00a0\u00a0; \n\n"}, {"type": "div", "text": "\nKeywords\n"}, {"type": "h3", "text": "Keywords"}, {"type": "div", "text": "\n\nRETURN_AT\n\n                                                (used by\n                                                    jumpExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'return@'\u00a0Identifier\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nRETURN_AT\n\n                                                (used by\n                                                    jumpExpression)\n                                            \n"}, {"type": "div", "text": "RETURN_AT"}, {"type": "div", "text": "\n                                                (used by\n                                                    jumpExpression)\n                                            "}, {"type": "a", "text": "jumpExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'return@'\u00a0Identifier\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'return@'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "Identifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nCONTINUE_AT\n\n                                                (used by\n                                                    jumpExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'continue@'\u00a0Identifier\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nCONTINUE_AT\n\n                                                (used by\n                                                    jumpExpression)\n                                            \n"}, {"type": "div", "text": "CONTINUE_AT"}, {"type": "div", "text": "\n                                                (used by\n                                                    jumpExpression)\n                                            "}, {"type": "a", "text": "jumpExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'continue@'\u00a0Identifier\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'continue@'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "Identifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nBREAK_AT\n\n                                                (used by\n                                                    jumpExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'break@'\u00a0Identifier\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nBREAK_AT\n\n                                                (used by\n                                                    jumpExpression)\n                                            \n"}, {"type": "div", "text": "BREAK_AT"}, {"type": "div", "text": "\n                                                (used by\n                                                    jumpExpression)\n                                            "}, {"type": "a", "text": "jumpExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'break@'\u00a0Identifier\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'break@'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "Identifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nTHIS_AT\n\n                                                (used by\n                                                    thisExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'this@'\u00a0Identifier\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nTHIS_AT\n\n                                                (used by\n                                                    thisExpression)\n                                            \n"}, {"type": "div", "text": "THIS_AT"}, {"type": "div", "text": "\n                                                (used by\n                                                    thisExpression)\n                                            "}, {"type": "a", "text": "thisExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'this@'\u00a0Identifier\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'this@'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "Identifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nSUPER_AT\n\n                                                (used by\n                                                    superExpression)\n                                            \n\n\n\u00a0\u00a0:\u00a0'super@'\u00a0Identifier\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nSUPER_AT\n\n                                                (used by\n                                                    superExpression)\n                                            \n"}, {"type": "div", "text": "SUPER_AT"}, {"type": "div", "text": "\n                                                (used by\n                                                    superExpression)\n                                            "}, {"type": "a", "text": "superExpression"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'super@'\u00a0Identifier\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'super@'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "Identifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nTYPEOF\n\n\n\u00a0\u00a0:\u00a0'typeof'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nTYPEOF\n"}, {"type": "div", "text": "TYPEOF"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'typeof'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'typeof'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nNOT_IS\n\n                                                (used by\n                                                    isOperator)\n                                            \n\n\n\u00a0\u00a0:\u00a0'!is'\u00a0Hidden\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nNOT_IS\n\n                                                (used by\n                                                    isOperator)\n                                            \n"}, {"type": "div", "text": "NOT_IS"}, {"type": "div", "text": "\n                                                (used by\n                                                    isOperator)\n                                            "}, {"type": "a", "text": "isOperator"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'!is'\u00a0Hidden\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'!is'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "Hidden"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nNOT_IN\n\n                                                (used by\n                                                    inOperator)\n                                            \n\n\n\u00a0\u00a0:\u00a0'!in'\u00a0Hidden\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nNOT_IN\n\n                                                (used by\n                                                    inOperator)\n                                            \n"}, {"type": "div", "text": "NOT_IN"}, {"type": "div", "text": "\n                                                (used by\n                                                    inOperator)\n                                            "}, {"type": "a", "text": "inOperator"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'!in'\u00a0Hidden\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'!in'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "Hidden"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n"}, {"type": "div", "text": "\n\nLiterals\n\n\nhelper\n\nDecDigit\n\n                                                (used by\n                                                    DecDigitOrSeparator,                                                     DecDigits,                                                     IntegerLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'0'..'9'\n\u00a0\u00a0; \n\n\nhelper\n\nDecDigitNoZero\n\n                                                (used by\n                                                    IntegerLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'1'..'9'\n\u00a0\u00a0; \n\n\nhelper\n\nDecDigitOrSeparator\n\n                                                (used by\n                                                    DecDigits,                                                     IntegerLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0DecDigit\n\u00a0\u00a0|\u00a0'_'\n\u00a0\u00a0; \n\n\nhelper\n\nDecDigits\n\n                                                (used by\n                                                    DoubleExponent,                                                     FloatLiteral,                                                     DoubleLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0DecDigit\u00a0DecDigitOrSeparator*\u00a0DecDigit\n\u00a0\u00a0|\u00a0DecDigit\n\u00a0\u00a0; \n\n\nhelper\n\nDoubleExponent\n\n                                                (used by\n                                                    DoubleLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0[eE]\u00a0[+-]?\u00a0DecDigits\n\u00a0\u00a0; \n\n\n\nRealLiteral\n\n                                                (used by\n                                                    literalConstant)\n                                            \n\n\n\u00a0\u00a0:\u00a0FloatLiteral\n\u00a0\u00a0|\u00a0DoubleLiteral\n\u00a0\u00a0; \n\n\n\nFloatLiteral\n\n                                                (used by\n                                                    RealLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0DoubleLiteral\u00a0[fF]\n\u00a0\u00a0|\u00a0DecDigits\u00a0[fF]\n\u00a0\u00a0; \n\n\n\nDoubleLiteral\n\n                                                (used by\n                                                    RealLiteral,                                                     FloatLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0DecDigits?\u00a0'.'\u00a0DecDigits\u00a0DoubleExponent?\n\u00a0\u00a0|\u00a0DecDigits\u00a0DoubleExponent\n\u00a0\u00a0; \n\n\n\nIntegerLiteral\n\n                                                (used by\n                                                    literalConstant,                                                     UnsignedLiteral,                                                     LongLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0DecDigitNoZero\u00a0DecDigitOrSeparator*\u00a0DecDigit\n\u00a0\u00a0|\u00a0DecDigit\n\u00a0\u00a0; \n\n\nhelper\n\nHexDigit\n\n                                                (used by\n                                                    HexDigitOrSeparator,                                                     HexLiteral,                                                     UniCharacterLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0[0-9a-fA-F]\n\u00a0\u00a0; \n\n\nhelper\n\nHexDigitOrSeparator\n\n                                                (used by\n                                                    HexLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0HexDigit\n\u00a0\u00a0|\u00a0'_'\n\u00a0\u00a0; \n\n\n\nHexLiteral\n\n                                                (used by\n                                                    literalConstant,                                                     UnsignedLiteral,                                                     LongLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'0'\u00a0[xX]\u00a0HexDigit\u00a0HexDigitOrSeparator*\u00a0HexDigit\n\u00a0\u00a0|\u00a0'0'\u00a0[xX]\u00a0HexDigit\n\u00a0\u00a0; \n\n\nhelper\n\nBinDigit\n\n                                                (used by\n                                                    BinDigitOrSeparator,                                                     BinLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0[01]\n\u00a0\u00a0; \n\n\nhelper\n\nBinDigitOrSeparator\n\n                                                (used by\n                                                    BinLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0BinDigit\n\u00a0\u00a0|\u00a0'_'\n\u00a0\u00a0; \n\n\n\nBinLiteral\n\n                                                (used by\n                                                    literalConstant,                                                     UnsignedLiteral,                                                     LongLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'0'\u00a0[bB]\u00a0BinDigit\u00a0BinDigitOrSeparator*\u00a0BinDigit\n\u00a0\u00a0|\u00a0'0'\u00a0[bB]\u00a0BinDigit\n\u00a0\u00a0; \n\n\n\nUnsignedLiteral\n\n                                                (used by\n                                                    literalConstant)\n                                            \n\n\n\u00a0\u00a0:\u00a0(IntegerLiteral\u00a0|\u00a0HexLiteral\u00a0|\u00a0BinLiteral)\u00a0[uU]\u00a0'L'?\n\u00a0\u00a0; \n\n\n\nLongLiteral\n\n                                                (used by\n                                                    literalConstant)\n                                            \n\n\n\u00a0\u00a0:\u00a0(IntegerLiteral\u00a0|\u00a0HexLiteral\u00a0|\u00a0BinLiteral)\u00a0'L'\n\u00a0\u00a0; \n\n\n\nBooleanLiteral\n\n                                                (used by\n                                                    literalConstant)\n                                            \n\n\n\u00a0\u00a0:\u00a0'true'\n\u00a0\u00a0|\u00a0'false'\n\u00a0\u00a0; \n\n\n\nCharacterLiteral\n\n                                                (used by\n                                                    literalConstant)\n                                            \n\n\n\u00a0\u00a0:\u00a0'\\''\u00a0(EscapeSeq\u00a0|\u00a0~[\\n\\r'\\\\])\u00a0'\\''\n\u00a0\u00a0; \n\n"}, {"type": "div", "text": "\nLiterals\n"}, {"type": "h3", "text": "Literals"}, {"type": "div", "text": "\nhelper\n\nDecDigit\n\n                                                (used by\n                                                    DecDigitOrSeparator,                                                     DecDigits,                                                     IntegerLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'0'..'9'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "helper"}, {"type": "div", "text": "\nDecDigit\n\n                                                (used by\n                                                    DecDigitOrSeparator,                                                     DecDigits,                                                     IntegerLiteral)\n                                            \n"}, {"type": "div", "text": "DecDigit"}, {"type": "div", "text": "\n                                                (used by\n                                                    DecDigitOrSeparator,                                                     DecDigits,                                                     IntegerLiteral)\n                                            "}, {"type": "a", "text": "DecDigitOrSeparator"}, {"type": "a", "text": "DecDigits"}, {"type": "a", "text": "IntegerLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'0'..'9'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'0'"}, {"type": "span", "text": ".."}, {"type": "span", "text": "'9'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\nhelper\n\nDecDigitNoZero\n\n                                                (used by\n                                                    IntegerLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'1'..'9'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "helper"}, {"type": "div", "text": "\nDecDigitNoZero\n\n                                                (used by\n                                                    IntegerLiteral)\n                                            \n"}, {"type": "div", "text": "DecDigitNoZero"}, {"type": "div", "text": "\n                                                (used by\n                                                    IntegerLiteral)\n                                            "}, {"type": "a", "text": "IntegerLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'1'..'9'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'1'"}, {"type": "span", "text": ".."}, {"type": "span", "text": "'9'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\nhelper\n\nDecDigitOrSeparator\n\n                                                (used by\n                                                    DecDigits,                                                     IntegerLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0DecDigit\n\u00a0\u00a0|\u00a0'_'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "helper"}, {"type": "div", "text": "\nDecDigitOrSeparator\n\n                                                (used by\n                                                    DecDigits,                                                     IntegerLiteral)\n                                            \n"}, {"type": "div", "text": "DecDigitOrSeparator"}, {"type": "div", "text": "\n                                                (used by\n                                                    DecDigits,                                                     IntegerLiteral)\n                                            "}, {"type": "a", "text": "DecDigits"}, {"type": "a", "text": "IntegerLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0DecDigit\n\u00a0\u00a0|\u00a0'_'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "DecDigit"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'_'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\nhelper\n\nDecDigits\n\n                                                (used by\n                                                    DoubleExponent,                                                     FloatLiteral,                                                     DoubleLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0DecDigit\u00a0DecDigitOrSeparator*\u00a0DecDigit\n\u00a0\u00a0|\u00a0DecDigit\n\u00a0\u00a0; \n"}, {"type": "div", "text": "helper"}, {"type": "div", "text": "\nDecDigits\n\n                                                (used by\n                                                    DoubleExponent,                                                     FloatLiteral,                                                     DoubleLiteral)\n                                            \n"}, {"type": "div", "text": "DecDigits"}, {"type": "div", "text": "\n                                                (used by\n                                                    DoubleExponent,                                                     FloatLiteral,                                                     DoubleLiteral)\n                                            "}, {"type": "a", "text": "DoubleExponent"}, {"type": "a", "text": "FloatLiteral"}, {"type": "a", "text": "DoubleLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0DecDigit\u00a0DecDigitOrSeparator*\u00a0DecDigit\n\u00a0\u00a0|\u00a0DecDigit\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "DecDigit"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "DecDigitOrSeparator"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "DecDigit"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "DecDigit"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\nhelper\n\nDoubleExponent\n\n                                                (used by\n                                                    DoubleLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0[eE]\u00a0[+-]?\u00a0DecDigits\n\u00a0\u00a0; \n"}, {"type": "div", "text": "helper"}, {"type": "div", "text": "\nDoubleExponent\n\n                                                (used by\n                                                    DoubleLiteral)\n                                            \n"}, {"type": "div", "text": "DoubleExponent"}, {"type": "div", "text": "\n                                                (used by\n                                                    DoubleLiteral)\n                                            "}, {"type": "a", "text": "DoubleLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0[eE]\u00a0[+-]?\u00a0DecDigits\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "[eE]"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "[+-]"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "DecDigits"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nRealLiteral\n\n                                                (used by\n                                                    literalConstant)\n                                            \n\n\n\u00a0\u00a0:\u00a0FloatLiteral\n\u00a0\u00a0|\u00a0DoubleLiteral\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nRealLiteral\n\n                                                (used by\n                                                    literalConstant)\n                                            \n"}, {"type": "div", "text": "RealLiteral"}, {"type": "div", "text": "\n                                                (used by\n                                                    literalConstant)\n                                            "}, {"type": "a", "text": "literalConstant"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0FloatLiteral\n\u00a0\u00a0|\u00a0DoubleLiteral\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "FloatLiteral"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "DoubleLiteral"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nFloatLiteral\n\n                                                (used by\n                                                    RealLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0DoubleLiteral\u00a0[fF]\n\u00a0\u00a0|\u00a0DecDigits\u00a0[fF]\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nFloatLiteral\n\n                                                (used by\n                                                    RealLiteral)\n                                            \n"}, {"type": "div", "text": "FloatLiteral"}, {"type": "div", "text": "\n                                                (used by\n                                                    RealLiteral)\n                                            "}, {"type": "a", "text": "RealLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0DoubleLiteral\u00a0[fF]\n\u00a0\u00a0|\u00a0DecDigits\u00a0[fF]\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "DoubleLiteral"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "[fF]"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "DecDigits"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "[fF]"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nDoubleLiteral\n\n                                                (used by\n                                                    RealLiteral,                                                     FloatLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0DecDigits?\u00a0'.'\u00a0DecDigits\u00a0DoubleExponent?\n\u00a0\u00a0|\u00a0DecDigits\u00a0DoubleExponent\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nDoubleLiteral\n\n                                                (used by\n                                                    RealLiteral,                                                     FloatLiteral)\n                                            \n"}, {"type": "div", "text": "DoubleLiteral"}, {"type": "div", "text": "\n                                                (used by\n                                                    RealLiteral,                                                     FloatLiteral)\n                                            "}, {"type": "a", "text": "RealLiteral"}, {"type": "a", "text": "FloatLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0DecDigits?\u00a0'.'\u00a0DecDigits\u00a0DoubleExponent?\n\u00a0\u00a0|\u00a0DecDigits\u00a0DoubleExponent\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "DecDigits"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'.'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "DecDigits"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "DoubleExponent"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "DecDigits"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "DoubleExponent"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nIntegerLiteral\n\n                                                (used by\n                                                    literalConstant,                                                     UnsignedLiteral,                                                     LongLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0DecDigitNoZero\u00a0DecDigitOrSeparator*\u00a0DecDigit\n\u00a0\u00a0|\u00a0DecDigit\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nIntegerLiteral\n\n                                                (used by\n                                                    literalConstant,                                                     UnsignedLiteral,                                                     LongLiteral)\n                                            \n"}, {"type": "div", "text": "IntegerLiteral"}, {"type": "div", "text": "\n                                                (used by\n                                                    literalConstant,                                                     UnsignedLiteral,                                                     LongLiteral)\n                                            "}, {"type": "a", "text": "literalConstant"}, {"type": "a", "text": "UnsignedLiteral"}, {"type": "a", "text": "LongLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0DecDigitNoZero\u00a0DecDigitOrSeparator*\u00a0DecDigit\n\u00a0\u00a0|\u00a0DecDigit\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "DecDigitNoZero"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "DecDigitOrSeparator"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "DecDigit"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "DecDigit"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\nhelper\n\nHexDigit\n\n                                                (used by\n                                                    HexDigitOrSeparator,                                                     HexLiteral,                                                     UniCharacterLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0[0-9a-fA-F]\n\u00a0\u00a0; \n"}, {"type": "div", "text": "helper"}, {"type": "div", "text": "\nHexDigit\n\n                                                (used by\n                                                    HexDigitOrSeparator,                                                     HexLiteral,                                                     UniCharacterLiteral)\n                                            \n"}, {"type": "div", "text": "HexDigit"}, {"type": "div", "text": "\n                                                (used by\n                                                    HexDigitOrSeparator,                                                     HexLiteral,                                                     UniCharacterLiteral)\n                                            "}, {"type": "a", "text": "HexDigitOrSeparator"}, {"type": "a", "text": "HexLiteral"}, {"type": "a", "text": "UniCharacterLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0[0-9a-fA-F]\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "[0-9a-fA-F]"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\nhelper\n\nHexDigitOrSeparator\n\n                                                (used by\n                                                    HexLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0HexDigit\n\u00a0\u00a0|\u00a0'_'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "helper"}, {"type": "div", "text": "\nHexDigitOrSeparator\n\n                                                (used by\n                                                    HexLiteral)\n                                            \n"}, {"type": "div", "text": "HexDigitOrSeparator"}, {"type": "div", "text": "\n                                                (used by\n                                                    HexLiteral)\n                                            "}, {"type": "a", "text": "HexLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0HexDigit\n\u00a0\u00a0|\u00a0'_'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "HexDigit"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'_'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nHexLiteral\n\n                                                (used by\n                                                    literalConstant,                                                     UnsignedLiteral,                                                     LongLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'0'\u00a0[xX]\u00a0HexDigit\u00a0HexDigitOrSeparator*\u00a0HexDigit\n\u00a0\u00a0|\u00a0'0'\u00a0[xX]\u00a0HexDigit\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nHexLiteral\n\n                                                (used by\n                                                    literalConstant,                                                     UnsignedLiteral,                                                     LongLiteral)\n                                            \n"}, {"type": "div", "text": "HexLiteral"}, {"type": "div", "text": "\n                                                (used by\n                                                    literalConstant,                                                     UnsignedLiteral,                                                     LongLiteral)\n                                            "}, {"type": "a", "text": "literalConstant"}, {"type": "a", "text": "UnsignedLiteral"}, {"type": "a", "text": "LongLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'0'\u00a0[xX]\u00a0HexDigit\u00a0HexDigitOrSeparator*\u00a0HexDigit\n\u00a0\u00a0|\u00a0'0'\u00a0[xX]\u00a0HexDigit\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'0'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "[xX]"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "HexDigit"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "HexDigitOrSeparator"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "HexDigit"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'0'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "[xX]"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "HexDigit"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\nhelper\n\nBinDigit\n\n                                                (used by\n                                                    BinDigitOrSeparator,                                                     BinLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0[01]\n\u00a0\u00a0; \n"}, {"type": "div", "text": "helper"}, {"type": "div", "text": "\nBinDigit\n\n                                                (used by\n                                                    BinDigitOrSeparator,                                                     BinLiteral)\n                                            \n"}, {"type": "div", "text": "BinDigit"}, {"type": "div", "text": "\n                                                (used by\n                                                    BinDigitOrSeparator,                                                     BinLiteral)\n                                            "}, {"type": "a", "text": "BinDigitOrSeparator"}, {"type": "a", "text": "BinLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0[01]\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "[01]"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\nhelper\n\nBinDigitOrSeparator\n\n                                                (used by\n                                                    BinLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0BinDigit\n\u00a0\u00a0|\u00a0'_'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "helper"}, {"type": "div", "text": "\nBinDigitOrSeparator\n\n                                                (used by\n                                                    BinLiteral)\n                                            \n"}, {"type": "div", "text": "BinDigitOrSeparator"}, {"type": "div", "text": "\n                                                (used by\n                                                    BinLiteral)\n                                            "}, {"type": "a", "text": "BinLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0BinDigit\n\u00a0\u00a0|\u00a0'_'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "BinDigit"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'_'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nBinLiteral\n\n                                                (used by\n                                                    literalConstant,                                                     UnsignedLiteral,                                                     LongLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0'0'\u00a0[bB]\u00a0BinDigit\u00a0BinDigitOrSeparator*\u00a0BinDigit\n\u00a0\u00a0|\u00a0'0'\u00a0[bB]\u00a0BinDigit\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nBinLiteral\n\n                                                (used by\n                                                    literalConstant,                                                     UnsignedLiteral,                                                     LongLiteral)\n                                            \n"}, {"type": "div", "text": "BinLiteral"}, {"type": "div", "text": "\n                                                (used by\n                                                    literalConstant,                                                     UnsignedLiteral,                                                     LongLiteral)\n                                            "}, {"type": "a", "text": "literalConstant"}, {"type": "a", "text": "UnsignedLiteral"}, {"type": "a", "text": "LongLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'0'\u00a0[bB]\u00a0BinDigit\u00a0BinDigitOrSeparator*\u00a0BinDigit\n\u00a0\u00a0|\u00a0'0'\u00a0[bB]\u00a0BinDigit\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'0'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "[bB]"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "BinDigit"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "BinDigitOrSeparator"}, {"type": "span", "text": "*"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "BinDigit"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'0'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "[bB]"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "BinDigit"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nUnsignedLiteral\n\n                                                (used by\n                                                    literalConstant)\n                                            \n\n\n\u00a0\u00a0:\u00a0(IntegerLiteral\u00a0|\u00a0HexLiteral\u00a0|\u00a0BinLiteral)\u00a0[uU]\u00a0'L'?\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nUnsignedLiteral\n\n                                                (used by\n                                                    literalConstant)\n                                            \n"}, {"type": "div", "text": "UnsignedLiteral"}, {"type": "div", "text": "\n                                                (used by\n                                                    literalConstant)\n                                            "}, {"type": "a", "text": "literalConstant"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0(IntegerLiteral\u00a0|\u00a0HexLiteral\u00a0|\u00a0BinLiteral)\u00a0[uU]\u00a0'L'?\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "IntegerLiteral"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "HexLiteral"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "BinLiteral"}, {"type": "span", "text": ")"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "[uU]"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'L'"}, {"type": "span", "text": "?"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nLongLiteral\n\n                                                (used by\n                                                    literalConstant)\n                                            \n\n\n\u00a0\u00a0:\u00a0(IntegerLiteral\u00a0|\u00a0HexLiteral\u00a0|\u00a0BinLiteral)\u00a0'L'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nLongLiteral\n\n                                                (used by\n                                                    literalConstant)\n                                            \n"}, {"type": "div", "text": "LongLiteral"}, {"type": "div", "text": "\n                                                (used by\n                                                    literalConstant)\n                                            "}, {"type": "a", "text": "literalConstant"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0(IntegerLiteral\u00a0|\u00a0HexLiteral\u00a0|\u00a0BinLiteral)\u00a0'L'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "IntegerLiteral"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "HexLiteral"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "BinLiteral"}, {"type": "span", "text": ")"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'L'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nBooleanLiteral\n\n                                                (used by\n                                                    literalConstant)\n                                            \n\n\n\u00a0\u00a0:\u00a0'true'\n\u00a0\u00a0|\u00a0'false'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nBooleanLiteral\n\n                                                (used by\n                                                    literalConstant)\n                                            \n"}, {"type": "div", "text": "BooleanLiteral"}, {"type": "div", "text": "\n                                                (used by\n                                                    literalConstant)\n                                            "}, {"type": "a", "text": "literalConstant"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'true'\n\u00a0\u00a0|\u00a0'false'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'true'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'false'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nCharacterLiteral\n\n                                                (used by\n                                                    literalConstant)\n                                            \n\n\n\u00a0\u00a0:\u00a0'\\''\u00a0(EscapeSeq\u00a0|\u00a0~[\\n\\r'\\\\])\u00a0'\\''\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nCharacterLiteral\n\n                                                (used by\n                                                    literalConstant)\n                                            \n"}, {"type": "div", "text": "CharacterLiteral"}, {"type": "div", "text": "\n                                                (used by\n                                                    literalConstant)\n                                            "}, {"type": "a", "text": "literalConstant"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'\\''\u00a0(EscapeSeq\u00a0|\u00a0~[\\n\\r'\\\\])\u00a0'\\''\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'\\''"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "EscapeSeq"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "~"}, {"type": "span", "text": "[\\n\\r'\\\\]"}, {"type": "span", "text": ")"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'\\''"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nIdentifiers\n\n\nhelper\n\nUnicodeDigit\n\n                                                (used by\n                                                    Identifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0UNICODE_CLASS_ND\n\u00a0\u00a0; \n\n\n\nIdentifier\n\n                                                (used by\n                                                    simpleIdentifier,                                                     RETURN_AT,                                                     CONTINUE_AT,                                                     BREAK_AT,                                                     THIS_AT,                                                     SUPER_AT,                                                     IdentifierOrSoftKey)\n                                            \n\n\n\u00a0\u00a0:\u00a0(Letter\u00a0|\u00a0'_')\u00a0(Letter\u00a0|\u00a0'_'\u00a0|\u00a0UnicodeDigit)*\n\u00a0\u00a0|\u00a0'`'\u00a0~([\\r\\n]\u00a0|\u00a0'`')+\u00a0'`'\n\u00a0\u00a0; \n\n\nDepending on the target and publicity of the declaration, the set of allowed symbols in identifiers is different.\nThis rule contains the union of allowed symbols from all targets.\nThus, the code for any target can be parsed using the grammar.\nThe allowed symbols in identifiers corresponding to the target and publicity of the declaration are given below.\nKotlin/JVM (any declaration publicity)\n\n~\n(\n[\\r\\n]\n|\n'`'\n|\n'.'\n|\n';'\n|\n':'\n|\n'\\'\n|\n'/'\n|\n'['\n|\n']'\n|\n'<'\n|\n'>'\n)\n\nKotlin/Android (any declaration publicity)\nThe allowed symbols are different from allowed symbols for Kotlin/JVM and correspond to the Dalvik Executable format.\nKotlin/JS (private declarations)\n\n~\n(\n[\\r\\n]\n|\n'`'\n)\n\nKotlin/JS (public declarations)\nThe allowed symbols for public declarations correspond to the ECMA specification (section 7.6) except that ECMA reserved words is allowed.\nKotlin/Native (any declaration publicity)\n\n~\n(\n[\\r\\n]\n|\n'`'\n)\n\n\n\n\n\nIdentifierOrSoftKey\n\n                                                (used by\n                                                    FieldIdentifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0Identifier\n\u00a0\u00a0|\u00a0'abstract'\n\u00a0\u00a0|\u00a0'annotation'\n\u00a0\u00a0|\u00a0'by'\n\u00a0\u00a0|\u00a0'catch'\n\u00a0\u00a0|\u00a0'companion'\n\u00a0\u00a0|\u00a0'constructor'\n\u00a0\u00a0|\u00a0'crossinline'\n\u00a0\u00a0|\u00a0'data'\n\u00a0\u00a0|\u00a0'dynamic'\n\u00a0\u00a0|\u00a0'enum'\n\u00a0\u00a0|\u00a0'external'\n\u00a0\u00a0|\u00a0'final'\n\u00a0\u00a0|\u00a0'finally'\n\u00a0\u00a0|\u00a0'import'\n\u00a0\u00a0|\u00a0'infix'\n\u00a0\u00a0|\u00a0'init'\n\u00a0\u00a0|\u00a0'inline'\n\u00a0\u00a0|\u00a0'inner'\n\u00a0\u00a0|\u00a0'internal'\n\u00a0\u00a0|\u00a0'lateinit'\n\u00a0\u00a0|\u00a0'noinline'\n\u00a0\u00a0|\u00a0'open'\n\u00a0\u00a0|\u00a0'operator'\n\u00a0\u00a0|\u00a0'out'\n\u00a0\u00a0|\u00a0'override'\n\u00a0\u00a0|\u00a0'private'\n\u00a0\u00a0|\u00a0'protected'\n\u00a0\u00a0|\u00a0'public'\n\u00a0\u00a0|\u00a0'reified'\n\u00a0\u00a0|\u00a0'sealed'\n\u00a0\u00a0|\u00a0'tailrec'\n\u00a0\u00a0|\u00a0'vararg'\n\u00a0\u00a0|\u00a0'where'\n\u00a0\u00a0|\u00a0'get'\n\u00a0\u00a0|\u00a0'set'\n\u00a0\u00a0|\u00a0'field'\n\u00a0\u00a0|\u00a0'property'\n\u00a0\u00a0|\u00a0'receiver'\n\u00a0\u00a0|\u00a0'param'\n\u00a0\u00a0|\u00a0'setparam'\n\u00a0\u00a0|\u00a0'delegate'\n\u00a0\u00a0|\u00a0'file'\n\u00a0\u00a0|\u00a0'expect'\n\u00a0\u00a0|\u00a0'actual'\n\u00a0\u00a0|\u00a0'const'\n\u00a0\u00a0|\u00a0'suspend'\n\u00a0\u00a0; \n\n\n\nFieldIdentifier\n\n                                                (used by\n                                                    LineStrRef,                                                     MultiLineStrRef)\n                                            \n\n\n\u00a0\u00a0:\u00a0'$'\u00a0IdentifierOrSoftKey\n\u00a0\u00a0; \n\n\nhelper\n\nUniCharacterLiteral\n\n                                                (used by\n                                                    EscapeSeq,                                                     LineStrEscapedChar)\n                                            \n\n\n\u00a0\u00a0:\u00a0'\\\\'\u00a0'u'\u00a0HexDigit\u00a0HexDigit\u00a0HexDigit\u00a0HexDigit\n\u00a0\u00a0; \n\n\nhelper\n\nEscapedIdentifier\n\n                                                (used by\n                                                    EscapeSeq,                                                     LineStrEscapedChar)\n                                            \n\n\n\u00a0\u00a0:\u00a0'\\\\'\u00a0('t'\u00a0|\u00a0'b'\u00a0|\u00a0'r'\u00a0|\u00a0'n'\u00a0|\u00a0'\\''\u00a0|\u00a0'\"'\u00a0|\u00a0'\\\\'\u00a0|\u00a0'$')\n\u00a0\u00a0; \n\n\nhelper\n\nEscapeSeq\n\n                                                (used by\n                                                    CharacterLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0UniCharacterLiteral\n\u00a0\u00a0|\u00a0EscapedIdentifier\n\u00a0\u00a0; \n\n"}, {"type": "div", "text": "\nIdentifiers\n"}, {"type": "h3", "text": "Identifiers"}, {"type": "div", "text": "\nhelper\n\nUnicodeDigit\n\n                                                (used by\n                                                    Identifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0UNICODE_CLASS_ND\n\u00a0\u00a0; \n"}, {"type": "div", "text": "helper"}, {"type": "div", "text": "\nUnicodeDigit\n\n                                                (used by\n                                                    Identifier)\n                                            \n"}, {"type": "div", "text": "UnicodeDigit"}, {"type": "div", "text": "\n                                                (used by\n                                                    Identifier)\n                                            "}, {"type": "a", "text": "Identifier"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0UNICODE_CLASS_ND\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "UNICODE_CLASS_ND"}, {"type": "a", "text": "UNICODE_CLASS_ND"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nIdentifier\n\n                                                (used by\n                                                    simpleIdentifier,                                                     RETURN_AT,                                                     CONTINUE_AT,                                                     BREAK_AT,                                                     THIS_AT,                                                     SUPER_AT,                                                     IdentifierOrSoftKey)\n                                            \n\n\n\u00a0\u00a0:\u00a0(Letter\u00a0|\u00a0'_')\u00a0(Letter\u00a0|\u00a0'_'\u00a0|\u00a0UnicodeDigit)*\n\u00a0\u00a0|\u00a0'`'\u00a0~([\\r\\n]\u00a0|\u00a0'`')+\u00a0'`'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nIdentifier\n\n                                                (used by\n                                                    simpleIdentifier,                                                     RETURN_AT,                                                     CONTINUE_AT,                                                     BREAK_AT,                                                     THIS_AT,                                                     SUPER_AT,                                                     IdentifierOrSoftKey)\n                                            \n"}, {"type": "div", "text": "Identifier"}, {"type": "div", "text": "\n                                                (used by\n                                                    simpleIdentifier,                                                     RETURN_AT,                                                     CONTINUE_AT,                                                     BREAK_AT,                                                     THIS_AT,                                                     SUPER_AT,                                                     IdentifierOrSoftKey)\n                                            "}, {"type": "a", "text": "simpleIdentifier"}, {"type": "a", "text": "RETURN_AT"}, {"type": "a", "text": "CONTINUE_AT"}, {"type": "a", "text": "BREAK_AT"}, {"type": "a", "text": "THIS_AT"}, {"type": "a", "text": "SUPER_AT"}, {"type": "a", "text": "IdentifierOrSoftKey"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0(Letter\u00a0|\u00a0'_')\u00a0(Letter\u00a0|\u00a0'_'\u00a0|\u00a0UnicodeDigit)*\n\u00a0\u00a0|\u00a0'`'\u00a0~([\\r\\n]\u00a0|\u00a0'`')+\u00a0'`'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "Letter"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'_'"}, {"type": "span", "text": ")"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "a", "text": "Letter"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'_'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "UnicodeDigit"}, {"type": "span", "text": ")"}, {"type": "span", "text": "*"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'`'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "~"}, {"type": "span", "text": "("}, {"type": "span", "text": "[\\r\\n]"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'`'"}, {"type": "span", "text": ")"}, {"type": "span", "text": "+"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'`'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\nDepending on the target and publicity of the declaration, the set of allowed symbols in identifiers is different.\nThis rule contains the union of allowed symbols from all targets.\nThus, the code for any target can be parsed using the grammar.\nThe allowed symbols in identifiers corresponding to the target and publicity of the declaration are given below.\nKotlin/JVM (any declaration publicity)\n\n~\n(\n[\\r\\n]\n|\n'`'\n|\n'.'\n|\n';'\n|\n':'\n|\n'\\'\n|\n'/'\n|\n'['\n|\n']'\n|\n'<'\n|\n'>'\n)\n\nKotlin/Android (any declaration publicity)\nThe allowed symbols are different from allowed symbols for Kotlin/JVM and correspond to the Dalvik Executable format.\nKotlin/JS (private declarations)\n\n~\n(\n[\\r\\n]\n|\n'`'\n)\n\nKotlin/JS (public declarations)\nThe allowed symbols for public declarations correspond to the ECMA specification (section 7.6) except that ECMA reserved words is allowed.\nKotlin/Native (any declaration publicity)\n\n~\n(\n[\\r\\n]\n|\n'`'\n)\n\n\n"}, {"type": "p", "text": "Depending on the target and publicity of the declaration, the set of allowed symbols in identifiers is different.\nThis rule contains the union of allowed symbols from all targets.\nThus, the code for any target can be parsed using the grammar."}, {"type": "p", "text": "The allowed symbols in identifiers corresponding to the target and publicity of the declaration are given below."}, {"type": "h5", "text": "Kotlin/JVM (any declaration publicity)"}, {"type": "div", "text": "\n~\n(\n[\\r\\n]\n|\n'`'\n|\n'.'\n|\n';'\n|\n':'\n|\n'\\'\n|\n'/'\n|\n'['\n|\n']'\n|\n'<'\n|\n'>'\n)\n"}, {"type": "span", "text": "~"}, {"type": "span", "text": "("}, {"type": "span", "text": "[\\r\\n]"}, {"type": "span", "text": "|"}, {"type": "span", "text": "'`'"}, {"type": "span", "text": "|"}, {"type": "span", "text": "'.'"}, {"type": "span", "text": "|"}, {"type": "span", "text": "';'"}, {"type": "span", "text": "|"}, {"type": "span", "text": "':'"}, {"type": "span", "text": "|"}, {"type": "span", "text": "'\\'"}, {"type": "span", "text": "|"}, {"type": "span", "text": "'/'"}, {"type": "span", "text": "|"}, {"type": "span", "text": "'['"}, {"type": "span", "text": "|"}, {"type": "span", "text": "']'"}, {"type": "span", "text": "|"}, {"type": "span", "text": "'<'"}, {"type": "span", "text": "|"}, {"type": "span", "text": "'>'"}, {"type": "span", "text": ")"}, {"type": "h5", "text": "Kotlin/Android (any declaration publicity)"}, {"type": "p", "text": "The allowed symbols are different from allowed symbols for Kotlin/JVM and correspond to the Dalvik Executable format."}, {"type": "a", "text": "Dalvik Executable format"}, {"type": "h5", "text": "Kotlin/JS (private declarations)"}, {"type": "div", "text": "\n~\n(\n[\\r\\n]\n|\n'`'\n)\n"}, {"type": "span", "text": "~"}, {"type": "span", "text": "("}, {"type": "span", "text": "[\\r\\n]"}, {"type": "span", "text": "|"}, {"type": "span", "text": "'`'"}, {"type": "span", "text": ")"}, {"type": "h5", "text": "Kotlin/JS (public declarations)"}, {"type": "p", "text": "The allowed symbols for public declarations correspond to the ECMA specification (section 7.6) except that ECMA reserved words is allowed."}, {"type": "a", "text": "ECMA specification (section 7.6)"}, {"type": "h5", "text": "Kotlin/Native (any declaration publicity)"}, {"type": "div", "text": "\n~\n(\n[\\r\\n]\n|\n'`'\n)\n"}, {"type": "span", "text": "~"}, {"type": "span", "text": "("}, {"type": "span", "text": "[\\r\\n]"}, {"type": "span", "text": "|"}, {"type": "span", "text": "'`'"}, {"type": "span", "text": ")"}, {"type": "p", "text": ""}, {"type": "br", "text": ""}, {"type": "div", "text": "\n\nIdentifierOrSoftKey\n\n                                                (used by\n                                                    FieldIdentifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0Identifier\n\u00a0\u00a0|\u00a0'abstract'\n\u00a0\u00a0|\u00a0'annotation'\n\u00a0\u00a0|\u00a0'by'\n\u00a0\u00a0|\u00a0'catch'\n\u00a0\u00a0|\u00a0'companion'\n\u00a0\u00a0|\u00a0'constructor'\n\u00a0\u00a0|\u00a0'crossinline'\n\u00a0\u00a0|\u00a0'data'\n\u00a0\u00a0|\u00a0'dynamic'\n\u00a0\u00a0|\u00a0'enum'\n\u00a0\u00a0|\u00a0'external'\n\u00a0\u00a0|\u00a0'final'\n\u00a0\u00a0|\u00a0'finally'\n\u00a0\u00a0|\u00a0'import'\n\u00a0\u00a0|\u00a0'infix'\n\u00a0\u00a0|\u00a0'init'\n\u00a0\u00a0|\u00a0'inline'\n\u00a0\u00a0|\u00a0'inner'\n\u00a0\u00a0|\u00a0'internal'\n\u00a0\u00a0|\u00a0'lateinit'\n\u00a0\u00a0|\u00a0'noinline'\n\u00a0\u00a0|\u00a0'open'\n\u00a0\u00a0|\u00a0'operator'\n\u00a0\u00a0|\u00a0'out'\n\u00a0\u00a0|\u00a0'override'\n\u00a0\u00a0|\u00a0'private'\n\u00a0\u00a0|\u00a0'protected'\n\u00a0\u00a0|\u00a0'public'\n\u00a0\u00a0|\u00a0'reified'\n\u00a0\u00a0|\u00a0'sealed'\n\u00a0\u00a0|\u00a0'tailrec'\n\u00a0\u00a0|\u00a0'vararg'\n\u00a0\u00a0|\u00a0'where'\n\u00a0\u00a0|\u00a0'get'\n\u00a0\u00a0|\u00a0'set'\n\u00a0\u00a0|\u00a0'field'\n\u00a0\u00a0|\u00a0'property'\n\u00a0\u00a0|\u00a0'receiver'\n\u00a0\u00a0|\u00a0'param'\n\u00a0\u00a0|\u00a0'setparam'\n\u00a0\u00a0|\u00a0'delegate'\n\u00a0\u00a0|\u00a0'file'\n\u00a0\u00a0|\u00a0'expect'\n\u00a0\u00a0|\u00a0'actual'\n\u00a0\u00a0|\u00a0'const'\n\u00a0\u00a0|\u00a0'suspend'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nIdentifierOrSoftKey\n\n                                                (used by\n                                                    FieldIdentifier)\n                                            \n"}, {"type": "div", "text": "IdentifierOrSoftKey"}, {"type": "div", "text": "\n                                                (used by\n                                                    FieldIdentifier)\n                                            "}, {"type": "a", "text": "FieldIdentifier"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0Identifier\n\u00a0\u00a0|\u00a0'abstract'\n\u00a0\u00a0|\u00a0'annotation'\n\u00a0\u00a0|\u00a0'by'\n\u00a0\u00a0|\u00a0'catch'\n\u00a0\u00a0|\u00a0'companion'\n\u00a0\u00a0|\u00a0'constructor'\n\u00a0\u00a0|\u00a0'crossinline'\n\u00a0\u00a0|\u00a0'data'\n\u00a0\u00a0|\u00a0'dynamic'\n\u00a0\u00a0|\u00a0'enum'\n\u00a0\u00a0|\u00a0'external'\n\u00a0\u00a0|\u00a0'final'\n\u00a0\u00a0|\u00a0'finally'\n\u00a0\u00a0|\u00a0'import'\n\u00a0\u00a0|\u00a0'infix'\n\u00a0\u00a0|\u00a0'init'\n\u00a0\u00a0|\u00a0'inline'\n\u00a0\u00a0|\u00a0'inner'\n\u00a0\u00a0|\u00a0'internal'\n\u00a0\u00a0|\u00a0'lateinit'\n\u00a0\u00a0|\u00a0'noinline'\n\u00a0\u00a0|\u00a0'open'\n\u00a0\u00a0|\u00a0'operator'\n\u00a0\u00a0|\u00a0'out'\n\u00a0\u00a0|\u00a0'override'\n\u00a0\u00a0|\u00a0'private'\n\u00a0\u00a0|\u00a0'protected'\n\u00a0\u00a0|\u00a0'public'\n\u00a0\u00a0|\u00a0'reified'\n\u00a0\u00a0|\u00a0'sealed'\n\u00a0\u00a0|\u00a0'tailrec'\n\u00a0\u00a0|\u00a0'vararg'\n\u00a0\u00a0|\u00a0'where'\n\u00a0\u00a0|\u00a0'get'\n\u00a0\u00a0|\u00a0'set'\n\u00a0\u00a0|\u00a0'field'\n\u00a0\u00a0|\u00a0'property'\n\u00a0\u00a0|\u00a0'receiver'\n\u00a0\u00a0|\u00a0'param'\n\u00a0\u00a0|\u00a0'setparam'\n\u00a0\u00a0|\u00a0'delegate'\n\u00a0\u00a0|\u00a0'file'\n\u00a0\u00a0|\u00a0'expect'\n\u00a0\u00a0|\u00a0'actual'\n\u00a0\u00a0|\u00a0'const'\n\u00a0\u00a0|\u00a0'suspend'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "Identifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'abstract'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'annotation'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'by'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'catch'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'companion'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'constructor'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'crossinline'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'data'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'dynamic'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'enum'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'external'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'final'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'finally'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'import'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'infix'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'init'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'inline'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'inner'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'internal'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'lateinit'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'noinline'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'open'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'operator'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'out'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'override'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'private'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'protected'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'public'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'reified'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'sealed'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'tailrec'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'vararg'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'where'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'get'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'set'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'field'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'property'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'receiver'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'param'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'setparam'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'delegate'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'file'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'expect'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'actual'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'const'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'suspend'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nFieldIdentifier\n\n                                                (used by\n                                                    LineStrRef,                                                     MultiLineStrRef)\n                                            \n\n\n\u00a0\u00a0:\u00a0'$'\u00a0IdentifierOrSoftKey\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nFieldIdentifier\n\n                                                (used by\n                                                    LineStrRef,                                                     MultiLineStrRef)\n                                            \n"}, {"type": "div", "text": "FieldIdentifier"}, {"type": "div", "text": "\n                                                (used by\n                                                    LineStrRef,                                                     MultiLineStrRef)\n                                            "}, {"type": "a", "text": "LineStrRef"}, {"type": "a", "text": "MultiLineStrRef"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'$'\u00a0IdentifierOrSoftKey\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'$'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "IdentifierOrSoftKey"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\nhelper\n\nUniCharacterLiteral\n\n                                                (used by\n                                                    EscapeSeq,                                                     LineStrEscapedChar)\n                                            \n\n\n\u00a0\u00a0:\u00a0'\\\\'\u00a0'u'\u00a0HexDigit\u00a0HexDigit\u00a0HexDigit\u00a0HexDigit\n\u00a0\u00a0; \n"}, {"type": "div", "text": "helper"}, {"type": "div", "text": "\nUniCharacterLiteral\n\n                                                (used by\n                                                    EscapeSeq,                                                     LineStrEscapedChar)\n                                            \n"}, {"type": "div", "text": "UniCharacterLiteral"}, {"type": "div", "text": "\n                                                (used by\n                                                    EscapeSeq,                                                     LineStrEscapedChar)\n                                            "}, {"type": "a", "text": "EscapeSeq"}, {"type": "a", "text": "LineStrEscapedChar"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'\\\\'\u00a0'u'\u00a0HexDigit\u00a0HexDigit\u00a0HexDigit\u00a0HexDigit\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'\\\\'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'u'"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "HexDigit"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "HexDigit"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "HexDigit"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "HexDigit"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\nhelper\n\nEscapedIdentifier\n\n                                                (used by\n                                                    EscapeSeq,                                                     LineStrEscapedChar)\n                                            \n\n\n\u00a0\u00a0:\u00a0'\\\\'\u00a0('t'\u00a0|\u00a0'b'\u00a0|\u00a0'r'\u00a0|\u00a0'n'\u00a0|\u00a0'\\''\u00a0|\u00a0'\"'\u00a0|\u00a0'\\\\'\u00a0|\u00a0'$')\n\u00a0\u00a0; \n"}, {"type": "div", "text": "helper"}, {"type": "div", "text": "\nEscapedIdentifier\n\n                                                (used by\n                                                    EscapeSeq,                                                     LineStrEscapedChar)\n                                            \n"}, {"type": "div", "text": "EscapedIdentifier"}, {"type": "div", "text": "\n                                                (used by\n                                                    EscapeSeq,                                                     LineStrEscapedChar)\n                                            "}, {"type": "a", "text": "EscapeSeq"}, {"type": "a", "text": "LineStrEscapedChar"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0'\\\\'\u00a0('t'\u00a0|\u00a0'b'\u00a0|\u00a0'r'\u00a0|\u00a0'n'\u00a0|\u00a0'\\''\u00a0|\u00a0'\"'\u00a0|\u00a0'\\\\'\u00a0|\u00a0'$')\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'\\\\'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'t'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'b'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'r'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'n'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'\\''"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'\"'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'\\\\'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'$'"}, {"type": "span", "text": ")"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\nhelper\n\nEscapeSeq\n\n                                                (used by\n                                                    CharacterLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0UniCharacterLiteral\n\u00a0\u00a0|\u00a0EscapedIdentifier\n\u00a0\u00a0; \n"}, {"type": "div", "text": "helper"}, {"type": "div", "text": "\nEscapeSeq\n\n                                                (used by\n                                                    CharacterLiteral)\n                                            \n"}, {"type": "div", "text": "EscapeSeq"}, {"type": "div", "text": "\n                                                (used by\n                                                    CharacterLiteral)\n                                            "}, {"type": "a", "text": "CharacterLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0UniCharacterLiteral\n\u00a0\u00a0|\u00a0EscapedIdentifier\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "UniCharacterLiteral"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "EscapedIdentifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nCharacters\n\n\nhelper\n\nLetter\n\n                                                (used by\n                                                    Identifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0UNICODE_CLASS_LL\n\u00a0\u00a0|\u00a0UNICODE_CLASS_LM\n\u00a0\u00a0|\u00a0UNICODE_CLASS_LO\n\u00a0\u00a0|\u00a0UNICODE_CLASS_LT\n\u00a0\u00a0|\u00a0UNICODE_CLASS_LU\n\u00a0\u00a0|\u00a0UNICODE_CLASS_NL\n\u00a0\u00a0; \n\n"}, {"type": "div", "text": "\nCharacters\n"}, {"type": "h3", "text": "Characters"}, {"type": "div", "text": "\nhelper\n\nLetter\n\n                                                (used by\n                                                    Identifier)\n                                            \n\n\n\u00a0\u00a0:\u00a0UNICODE_CLASS_LL\n\u00a0\u00a0|\u00a0UNICODE_CLASS_LM\n\u00a0\u00a0|\u00a0UNICODE_CLASS_LO\n\u00a0\u00a0|\u00a0UNICODE_CLASS_LT\n\u00a0\u00a0|\u00a0UNICODE_CLASS_LU\n\u00a0\u00a0|\u00a0UNICODE_CLASS_NL\n\u00a0\u00a0; \n"}, {"type": "div", "text": "helper"}, {"type": "div", "text": "\nLetter\n\n                                                (used by\n                                                    Identifier)\n                                            \n"}, {"type": "div", "text": "Letter"}, {"type": "div", "text": "\n                                                (used by\n                                                    Identifier)\n                                            "}, {"type": "a", "text": "Identifier"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0UNICODE_CLASS_LL\n\u00a0\u00a0|\u00a0UNICODE_CLASS_LM\n\u00a0\u00a0|\u00a0UNICODE_CLASS_LO\n\u00a0\u00a0|\u00a0UNICODE_CLASS_LT\n\u00a0\u00a0|\u00a0UNICODE_CLASS_LU\n\u00a0\u00a0|\u00a0UNICODE_CLASS_NL\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "UNICODE_CLASS_LL"}, {"type": "a", "text": "UNICODE_CLASS_LL"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "UNICODE_CLASS_LM"}, {"type": "a", "text": "UNICODE_CLASS_LM"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "UNICODE_CLASS_LO"}, {"type": "a", "text": "UNICODE_CLASS_LO"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "UNICODE_CLASS_LT"}, {"type": "a", "text": "UNICODE_CLASS_LT"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "UNICODE_CLASS_LU"}, {"type": "a", "text": "UNICODE_CLASS_LU"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "UNICODE_CLASS_NL"}, {"type": "a", "text": "UNICODE_CLASS_NL"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nStrings\n\n\n\nLineStrRef\n\n                                                (used by\n                                                    lineStringContent)\n                                            \n\n\n\u00a0\u00a0:\u00a0FieldIdentifier\n\u00a0\u00a0; \n\n\nSee String templates\n\n\n\nLineStrText\n\n                                                (used by\n                                                    lineStringContent)\n                                            \n\n\n\u00a0\u00a0:\u00a0~('\\\\'\u00a0|\u00a0'\"'\u00a0|\u00a0'$')+\n\u00a0\u00a0|\u00a0'$'\n\u00a0\u00a0; \n\n\n\nLineStrEscapedChar\n\n                                                (used by\n                                                    lineStringContent)\n                                            \n\n\n\u00a0\u00a0:\u00a0EscapedIdentifier\n\u00a0\u00a0|\u00a0UniCharacterLiteral\n\u00a0\u00a0; \n\n\n\nTRIPLE_QUOTE_CLOSE\n\n                                                (used by\n                                                    multiLineStringLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0('\"'?\u00a0'\"\"\"')\u00a0\n\u00a0\u00a0; \n\n\n\nMultiLineStrRef\n\n                                                (used by\n                                                    multiLineStringContent)\n                                            \n\n\n\u00a0\u00a0:\u00a0FieldIdentifier\n\u00a0\u00a0; \n\n\n\nMultiLineStrText\n\n                                                (used by\n                                                    multiLineStringContent)\n                                            \n\n\n\u00a0\u00a0:\u00a0~('\"'\u00a0|\u00a0'$')+\n\u00a0\u00a0|\u00a0'$'\n\u00a0\u00a0; \n\n\n\nErrorCharacter\n\n\n\u00a0\u00a0:\u00a0.\n\u00a0\u00a0; \n\n"}, {"type": "div", "text": "\nStrings\n"}, {"type": "h3", "text": "Strings"}, {"type": "div", "text": "\n\nLineStrRef\n\n                                                (used by\n                                                    lineStringContent)\n                                            \n\n\n\u00a0\u00a0:\u00a0FieldIdentifier\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nLineStrRef\n\n                                                (used by\n                                                    lineStringContent)\n                                            \n"}, {"type": "div", "text": "LineStrRef"}, {"type": "div", "text": "\n                                                (used by\n                                                    lineStringContent)\n                                            "}, {"type": "a", "text": "lineStringContent"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0FieldIdentifier\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "FieldIdentifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\nSee String templates\n"}, {"type": "p", "text": "See String templates"}, {"type": "a", "text": "String templates"}, {"type": "div", "text": "\n\nLineStrText\n\n                                                (used by\n                                                    lineStringContent)\n                                            \n\n\n\u00a0\u00a0:\u00a0~('\\\\'\u00a0|\u00a0'\"'\u00a0|\u00a0'$')+\n\u00a0\u00a0|\u00a0'$'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nLineStrText\n\n                                                (used by\n                                                    lineStringContent)\n                                            \n"}, {"type": "div", "text": "LineStrText"}, {"type": "div", "text": "\n                                                (used by\n                                                    lineStringContent)\n                                            "}, {"type": "a", "text": "lineStringContent"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0~('\\\\'\u00a0|\u00a0'\"'\u00a0|\u00a0'$')+\n\u00a0\u00a0|\u00a0'$'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "~"}, {"type": "span", "text": "("}, {"type": "span", "text": "'\\\\'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'\"'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'$'"}, {"type": "span", "text": ")"}, {"type": "span", "text": "+"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'$'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nLineStrEscapedChar\n\n                                                (used by\n                                                    lineStringContent)\n                                            \n\n\n\u00a0\u00a0:\u00a0EscapedIdentifier\n\u00a0\u00a0|\u00a0UniCharacterLiteral\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nLineStrEscapedChar\n\n                                                (used by\n                                                    lineStringContent)\n                                            \n"}, {"type": "div", "text": "LineStrEscapedChar"}, {"type": "div", "text": "\n                                                (used by\n                                                    lineStringContent)\n                                            "}, {"type": "a", "text": "lineStringContent"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0EscapedIdentifier\n\u00a0\u00a0|\u00a0UniCharacterLiteral\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "EscapedIdentifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "UniCharacterLiteral"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nTRIPLE_QUOTE_CLOSE\n\n                                                (used by\n                                                    multiLineStringLiteral)\n                                            \n\n\n\u00a0\u00a0:\u00a0('\"'?\u00a0'\"\"\"')\u00a0\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nTRIPLE_QUOTE_CLOSE\n\n                                                (used by\n                                                    multiLineStringLiteral)\n                                            \n"}, {"type": "div", "text": "TRIPLE_QUOTE_CLOSE"}, {"type": "div", "text": "\n                                                (used by\n                                                    multiLineStringLiteral)\n                                            "}, {"type": "a", "text": "multiLineStringLiteral"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0('\"'?\u00a0'\"\"\"')\u00a0\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "("}, {"type": "span", "text": "'\"'"}, {"type": "span", "text": "?"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'\"\"\"'"}, {"type": "span", "text": ")"}, {"type": "span", "text": "\u00a0"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nMultiLineStrRef\n\n                                                (used by\n                                                    multiLineStringContent)\n                                            \n\n\n\u00a0\u00a0:\u00a0FieldIdentifier\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nMultiLineStrRef\n\n                                                (used by\n                                                    multiLineStringContent)\n                                            \n"}, {"type": "div", "text": "MultiLineStrRef"}, {"type": "div", "text": "\n                                                (used by\n                                                    multiLineStringContent)\n                                            "}, {"type": "a", "text": "multiLineStringContent"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0FieldIdentifier\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "a", "text": "FieldIdentifier"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nMultiLineStrText\n\n                                                (used by\n                                                    multiLineStringContent)\n                                            \n\n\n\u00a0\u00a0:\u00a0~('\"'\u00a0|\u00a0'$')+\n\u00a0\u00a0|\u00a0'$'\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nMultiLineStrText\n\n                                                (used by\n                                                    multiLineStringContent)\n                                            \n"}, {"type": "div", "text": "MultiLineStrText"}, {"type": "div", "text": "\n                                                (used by\n                                                    multiLineStringContent)\n                                            "}, {"type": "a", "text": "multiLineStringContent"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0~('\"'\u00a0|\u00a0'$')+\n\u00a0\u00a0|\u00a0'$'\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "~"}, {"type": "span", "text": "("}, {"type": "span", "text": "'\"'"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'$'"}, {"type": "span", "text": ")"}, {"type": "span", "text": "+"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": "|"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "'$'"}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}, {"type": "div", "text": "\n\nErrorCharacter\n\n\n\u00a0\u00a0:\u00a0.\n\u00a0\u00a0; \n"}, {"type": "div", "text": "\nErrorCharacter\n"}, {"type": "div", "text": "ErrorCharacter"}, {"type": "div", "text": "\n\u00a0\u00a0:\u00a0.\n\u00a0\u00a0; "}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ":"}, {"type": "span", "text": "\u00a0"}, {"type": "span", "text": "."}, {"type": "br", "text": ""}, {"type": "span", "text": "\u00a0\u00a0"}, {"type": "span", "text": ";"}]