[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Using Gradle"}, {"type": "p", "text": "In order to build a Kotlin project with Gradle, you should set up the kotlin-gradle plugin, apply it to your project and add kotlin-stdlib dependencies.\nThose actions may also be performed automatically in IntelliJ IDEA by invoking Tools | Kotlin | Configure Kotlin in Project action."}, {"type": "a", "text": "set up the kotlin-gradle plugin"}, {"type": "em", "text": "kotlin-gradle"}, {"type": "a", "text": "apply it"}, {"type": "a", "text": "add kotlin-stdlib dependencies"}, {"type": "em", "text": "kotlin-stdlib"}, {"type": "strong", "text": "Tools | Kotlin | Configure Kotlin"}, {"type": "strong", "text": "Project"}, {"type": "h2", "text": "Plugin and Versions"}, {"type": "p", "text": "Apply the Kotlin Gradle plugin by using the Gradle plugins DSL.\nThe Kotlin Gradle plugin 1.3.72 works with Gradle 4.9 and later."}, {"type": "a", "text": "the Gradle plugins DSL"}, {"type": "div", "text": "\n\nplugins {\n    id 'org.jetbrains.kotlin.<...>' version '1.3.72'\n}\n\n\n"}, {"type": "div", "text": "\nplugins {\n    id 'org.jetbrains.kotlin.<...>' version '1.3.72'\n}\n\n"}, {"type": "pre", "text": "plugins {\n    id 'org.jetbrains.kotlin.<...>' version '1.3.72'\n}\n"}, {"type": "code", "text": "plugins {\n    id 'org.jetbrains.kotlin.<...>' version '1.3.72'\n}\n"}, {"type": "div", "text": "\n\nplugins {\n    kotlin(\"<...>\") version \"1.3.72\"\n}\n\n\n"}, {"type": "div", "text": "\nplugins {\n    kotlin(\"<...>\") version \"1.3.72\"\n}\n\n"}, {"type": "pre", "text": "plugins {\n    kotlin(\"<...>\") version \"1.3.72\"\n}\n"}, {"type": "code", "text": "plugins {\n    kotlin(\"<...>\") version \"1.3.72\"\n}\n"}, {"type": "p", "text": "The placeholder <...> should be replaced with one of the plugin names that can be found in further sections."}, {"type": "code", "text": "<...>"}, {"type": "p", "text": "Alternatively, apply plugin by adding the kotlin-gradle-plugin dependency to the build script classpath:"}, {"type": "code", "text": "kotlin-gradle-plugin"}, {"type": "div", "text": "\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n\n    dependencies {\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.72\"\n    }\n}\n\nplugins {\n    id \"org.jetbrains.kotlin.<...>\" version \"1.3.72\"\n}\n\n\n"}, {"type": "div", "text": "\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n\n    dependencies {\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.72\"\n    }\n}\n\nplugins {\n    id \"org.jetbrains.kotlin.<...>\" version \"1.3.72\"\n}\n\n"}, {"type": "pre", "text": "buildscript {\n    repositories {\n        mavenCentral()\n    }\n\n    dependencies {\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.72\"\n    }\n}\n\nplugins {\n    id \"org.jetbrains.kotlin.<...>\" version \"1.3.72\"\n}\n"}, {"type": "code", "text": "buildscript {\n    repositories {\n        mavenCentral()\n    }\n\n    dependencies {\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.72\"\n    }\n}\n\nplugins {\n    id \"org.jetbrains.kotlin.<...>\" version \"1.3.72\"\n}\n"}, {"type": "div", "text": "\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n        \n    dependencies {\n        classpath(kotlin(\"gradle-plugin\", version = \"1.3.72\"))\n    }\n}\nplugins {\n    kotlin(\"<...>\")\n}\n\n\n"}, {"type": "div", "text": "\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n        \n    dependencies {\n        classpath(kotlin(\"gradle-plugin\", version = \"1.3.72\"))\n    }\n}\nplugins {\n    kotlin(\"<...>\")\n}\n\n"}, {"type": "pre", "text": "buildscript {\n    repositories {\n        mavenCentral()\n    }\n        \n    dependencies {\n        classpath(kotlin(\"gradle-plugin\", version = \"1.3.72\"))\n    }\n}\nplugins {\n    kotlin(\"<...>\")\n}\n"}, {"type": "code", "text": "buildscript {\n    repositories {\n        mavenCentral()\n    }\n        \n    dependencies {\n        classpath(kotlin(\"gradle-plugin\", version = \"1.3.72\"))\n    }\n}\nplugins {\n    kotlin(\"<...>\")\n}\n"}, {"type": "p", "text": "This is not required when using Kotlin Gradle plugin 1.1.1 and above with the Gradle plugins DSL, and with Gradle Kotlin DSL."}, {"type": "a", "text": "Gradle plugins DSL"}, {"type": "a", "text": "Gradle Kotlin DSL"}, {"type": "h2", "text": "Building Kotlin Multiplatform Projects"}, {"type": "p", "text": "Using the kotlin-multiplatform plugin for building multiplatform projects is described in \nBuilding Multiplatform Projects with Gradle."}, {"type": "code", "text": "kotlin-multiplatform"}, {"type": "a", "text": "multiplatform projects"}, {"type": "a", "text": "Building Multiplatform Projects with Gradle"}, {"type": "h2", "text": "Targeting the JVM"}, {"type": "p", "text": "To target the JVM, apply the Kotlin JVM plugin. Starting with Kotlin 1.1.1, the plugin can be applied using the Gradle plugins DSL:"}, {"type": "a", "text": "Gradle plugins DSL"}, {"type": "div", "text": "\n\nplugins {\n    id \"org.jetbrains.kotlin.jvm\" version \"1.3.72\"\n}\n\n\n"}, {"type": "div", "text": "\nplugins {\n    id \"org.jetbrains.kotlin.jvm\" version \"1.3.72\"\n}\n\n"}, {"type": "pre", "text": "plugins {\n    id \"org.jetbrains.kotlin.jvm\" version \"1.3.72\"\n}\n"}, {"type": "code", "text": "plugins {\n    id \"org.jetbrains.kotlin.jvm\" version \"1.3.72\"\n}\n"}, {"type": "div", "text": "\n\nplugins {\n    kotlin(\"jvm\") version \"1.3.72\"\n}\n\n\n"}, {"type": "div", "text": "\nplugins {\n    kotlin(\"jvm\") version \"1.3.72\"\n}\n\n"}, {"type": "pre", "text": "plugins {\n    kotlin(\"jvm\") version \"1.3.72\"\n}\n"}, {"type": "code", "text": "plugins {\n    kotlin(\"jvm\") version \"1.3.72\"\n}\n"}, {"type": "p", "text": "The version should be literal in this block, and it cannot be applied from another build script."}, {"type": "code", "text": "version"}, {"type": "p", "text": "Alternatively, you can use the older apply plugin approach:"}, {"type": "code", "text": "apply plugin"}, {"type": "div", "text": "\napply plugin: 'kotlin'\n\n"}, {"type": "pre", "text": "apply plugin: 'kotlin'\n"}, {"type": "code", "text": "apply plugin: 'kotlin'\n"}, {"type": "p", "text": "It's not recommended to apply Kotlin plugins with apply in Gradle Kotlin DSL. The details are provided below."}, {"type": "code", "text": "apply"}, {"type": "a", "text": "below"}, {"type": "p", "text": "Kotlin sources can be mixed with Java sources in the same folder, or in different folders. The default convention is using different folders:"}, {"type": "div", "text": "\nproject\n    - src\n        - main (root)\n            - kotlin\n            - java\n\n"}, {"type": "pre", "text": "project\n    - src\n        - main (root)\n            - kotlin\n            - java\n"}, {"type": "code", "text": "project\n    - src\n        - main (root)\n            - kotlin\n            - java\n"}, {"type": "p", "text": "The corresponding sourceSets property should be updated if not using the default convention:"}, {"type": "em", "text": "sourceSets"}, {"type": "div", "text": "\n\nsourceSets {\n    main.kotlin.srcDirs += 'src/main/myKotlin'\n    main.java.srcDirs += 'src/main/myJava'\n}\n\n\n"}, {"type": "div", "text": "\nsourceSets {\n    main.kotlin.srcDirs += 'src/main/myKotlin'\n    main.java.srcDirs += 'src/main/myJava'\n}\n\n"}, {"type": "pre", "text": "sourceSets {\n    main.kotlin.srcDirs += 'src/main/myKotlin'\n    main.java.srcDirs += 'src/main/myJava'\n}\n"}, {"type": "code", "text": "sourceSets {\n    main.kotlin.srcDirs += 'src/main/myKotlin'\n    main.java.srcDirs += 'src/main/myJava'\n}\n"}, {"type": "div", "text": "\n\nsourceSets.main {\n    java.srcDirs(\"src/main/myJava\", \"src/main/myKotlin\")\n}\n\n\n"}, {"type": "div", "text": "\nsourceSets.main {\n    java.srcDirs(\"src/main/myJava\", \"src/main/myKotlin\")\n}\n\n"}, {"type": "pre", "text": "sourceSets.main {\n    java.srcDirs(\"src/main/myJava\", \"src/main/myKotlin\")\n}\n"}, {"type": "code", "text": "sourceSets.main {\n    java.srcDirs(\"src/main/myJava\", \"src/main/myKotlin\")\n}\n"}, {"type": "h2", "text": "Targeting JavaScript"}, {"type": "p", "text": "When targeting JavaScript, a different plugin should be applied:"}, {"type": "div", "text": "\n\nplugins {\n    id 'org.jetbrains.kotlin.js' version '1.3.72'\n}\n\n\n"}, {"type": "div", "text": "\nplugins {\n    id 'org.jetbrains.kotlin.js' version '1.3.72'\n}\n\n"}, {"type": "pre", "text": "plugins {\n    id 'org.jetbrains.kotlin.js' version '1.3.72'\n}\n"}, {"type": "code", "text": "plugins {\n    id 'org.jetbrains.kotlin.js' version '1.3.72'\n}\n"}, {"type": "div", "text": "\n\nplugins {\n    kotlin(\"js\") version \"1.3.72\"\n}\n\n\n"}, {"type": "div", "text": "\nplugins {\n    kotlin(\"js\") version \"1.3.72\"\n}\n\n"}, {"type": "pre", "text": "plugins {\n    kotlin(\"js\") version \"1.3.72\"\n}\n"}, {"type": "code", "text": "plugins {\n    kotlin(\"js\") version \"1.3.72\"\n}\n"}, {"type": "p", "text": "This plugin only works for Kotlin files so it is recommended to keep Kotlin and Java files separate (in case if the same project contains Java files). As with\ntargeting the JVM, if not using the default convention, you should specify the source folder using sourceSets:"}, {"type": "em", "text": "sourceSets"}, {"type": "div", "text": "\n\nkotlin {\n    sourceSets {\n        main.kotlin.srcDirs += 'src/main/myKotlin'\n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin {\n    sourceSets {\n        main.kotlin.srcDirs += 'src/main/myKotlin'\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    sourceSets {\n        main.kotlin.srcDirs += 'src/main/myKotlin'\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    sourceSets {\n        main.kotlin.srcDirs += 'src/main/myKotlin'\n    }\n}\n"}, {"type": "div", "text": "\n\nkotlin {\n    sourceSets[\"main\"].apply {    \n        kotlin.srcDir(\"src/main/myKotlin\") \n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin {\n    sourceSets[\"main\"].apply {    \n        kotlin.srcDir(\"src/main/myKotlin\") \n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    sourceSets[\"main\"].apply {    \n        kotlin.srcDir(\"src/main/myKotlin\") \n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    sourceSets[\"main\"].apply {    \n        kotlin.srcDir(\"src/main/myKotlin\") \n    }\n}\n"}, {"type": "h2", "text": "Targeting Android"}, {"type": "p", "text": "Android's Gradle model is a little different from ordinary Gradle, so if we want to build an Android project written in Kotlin, we need\nkotlin-android plugin instead of kotlin:"}, {"type": "em", "text": "kotlin-android"}, {"type": "em", "text": "kotlin"}, {"type": "div", "text": "\n\nbuildscript {\n    ext.kotlin_version = '1.3.72'\n\n    ...\n\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.2.1'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n    }\n}\n\nplugins {\n    id 'com.android.application'\n    id 'kotlin-android'\n}\n\n\n"}, {"type": "div", "text": "\nbuildscript {\n    ext.kotlin_version = '1.3.72'\n\n    ...\n\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.2.1'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n    }\n}\n\nplugins {\n    id 'com.android.application'\n    id 'kotlin-android'\n}\n\n"}, {"type": "pre", "text": "buildscript {\n    ext.kotlin_version = '1.3.72'\n\n    ...\n\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.2.1'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n    }\n}\n\nplugins {\n    id 'com.android.application'\n    id 'kotlin-android'\n}\n"}, {"type": "code", "text": "buildscript {\n    ext.kotlin_version = '1.3.72'\n\n    ...\n\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.2.1'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n    }\n}\n\nplugins {\n    id 'com.android.application'\n    id 'kotlin-android'\n}\n"}, {"type": "div", "text": "\n\nbuildscript {\n    dependencies {\n        classpath(\"com.android.tools.build:gradle:3.2.1\")\n        classpath(kotlin(\"gradle-plugin\", version = \"1.3.72\"))\n    }\n}\nplugins {\n    id(\"com.android.application\")\n    kotlin(\"android\")\n}\n\n\n"}, {"type": "div", "text": "\nbuildscript {\n    dependencies {\n        classpath(\"com.android.tools.build:gradle:3.2.1\")\n        classpath(kotlin(\"gradle-plugin\", version = \"1.3.72\"))\n    }\n}\nplugins {\n    id(\"com.android.application\")\n    kotlin(\"android\")\n}\n\n"}, {"type": "pre", "text": "buildscript {\n    dependencies {\n        classpath(\"com.android.tools.build:gradle:3.2.1\")\n        classpath(kotlin(\"gradle-plugin\", version = \"1.3.72\"))\n    }\n}\nplugins {\n    id(\"com.android.application\")\n    kotlin(\"android\")\n}\n"}, {"type": "code", "text": "buildscript {\n    dependencies {\n        classpath(\"com.android.tools.build:gradle:3.2.1\")\n        classpath(kotlin(\"gradle-plugin\", version = \"1.3.72\"))\n    }\n}\nplugins {\n    id(\"com.android.application\")\n    kotlin(\"android\")\n}\n"}, {"type": "p", "text": "Kotlin Gradle plugin 1.3.72 works with Android Gradle Plugin 3.0 and later."}, {"type": "p", "text": "Don't forget to configure the standard library dependency."}, {"type": "a", "text": "standard library dependency"}, {"type": "h3", "text": "Android Studio"}, {"type": "p", "text": "If using Android Studio, the following needs to be added under android:"}, {"type": "div", "text": "\n\nandroid {\n  ...\n\n  sourceSets {\n    main.java.srcDirs += 'src/main/kotlin'\n  }\n}\n\n\n"}, {"type": "div", "text": "\nandroid {\n  ...\n\n  sourceSets {\n    main.java.srcDirs += 'src/main/kotlin'\n  }\n}\n\n"}, {"type": "pre", "text": "android {\n  ...\n\n  sourceSets {\n    main.java.srcDirs += 'src/main/kotlin'\n  }\n}\n"}, {"type": "code", "text": "android {\n  ...\n\n  sourceSets {\n    main.java.srcDirs += 'src/main/kotlin'\n  }\n}\n"}, {"type": "div", "text": "\n\nandroid {\n  ...\n  \n    sourceSets[\"main\"].java.srcDir(\"src/main/kotlin\")\n}\n\n\n"}, {"type": "div", "text": "\nandroid {\n  ...\n  \n    sourceSets[\"main\"].java.srcDir(\"src/main/kotlin\")\n}\n\n"}, {"type": "pre", "text": "android {\n  ...\n  \n    sourceSets[\"main\"].java.srcDir(\"src/main/kotlin\")\n}\n"}, {"type": "code", "text": "android {\n  ...\n  \n    sourceSets[\"main\"].java.srcDir(\"src/main/kotlin\")\n}\n"}, {"type": "p", "text": "This lets Android Studio know that the kotlin directory is a source root, so when the project model is loaded into the IDE it will be properly recognized. Alternatively, you can put Kotlin classes in the Java source directory, typically located in src/main/java."}, {"type": "code", "text": "src/main/java"}, {"type": "h2", "text": "Configuring Dependencies"}, {"type": "p", "text": "In addition to the kotlin-gradle-plugin dependency shown above, you need to add a dependency on the Kotlin standard library:"}, {"type": "code", "text": "kotlin-gradle-plugin"}, {"type": "div", "text": "\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib\"\n}\n\n\n"}, {"type": "div", "text": "\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib\"\n}\n\n"}, {"type": "pre", "text": "repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib\"\n}\n"}, {"type": "code", "text": "repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib\"\n}\n"}, {"type": "div", "text": "\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation(kotlin(\"stdlib\"))\n}\n\n\n"}, {"type": "div", "text": "\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation(kotlin(\"stdlib\"))\n}\n\n"}, {"type": "pre", "text": "repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation(kotlin(\"stdlib\"))\n}\n"}, {"type": "code", "text": "repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation(kotlin(\"stdlib\"))\n}\n"}, {"type": "p", "text": "The Kotlin standard library kotlin-stdlib targets Java 6 and above. There are extended versions of the standard library that add support for some of the features of JDK 7 and JDK 8. To use these versions, add one of the\nfollowing dependencies instead of kotlin-stdlib:"}, {"type": "code", "text": "kotlin-stdlib"}, {"type": "code", "text": "kotlin-stdlib"}, {"type": "div", "text": "\n\nimplementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7\"\nimplementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk8\"\n\n\n"}, {"type": "div", "text": "\nimplementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7\"\nimplementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk8\"\n\n"}, {"type": "pre", "text": "implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7\"\nimplementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk8\"\n"}, {"type": "code", "text": "implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7\"\nimplementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk8\"\n"}, {"type": "div", "text": "\n\nimplementation(kotlin(\"stdlib-jdk7\"))\nimplementation(kotlin(\"stdlib-jdk8\"))\n\n\n"}, {"type": "div", "text": "\nimplementation(kotlin(\"stdlib-jdk7\"))\nimplementation(kotlin(\"stdlib-jdk8\"))\n\n"}, {"type": "pre", "text": "implementation(kotlin(\"stdlib-jdk7\"))\nimplementation(kotlin(\"stdlib-jdk8\"))\n"}, {"type": "code", "text": "implementation(kotlin(\"stdlib-jdk7\"))\nimplementation(kotlin(\"stdlib-jdk8\"))\n"}, {"type": "p", "text": "In Kotlin 1.1.x, use kotlin-stdlib-jre7 and kotlin-stdlib-jre8 instead."}, {"type": "code", "text": "kotlin-stdlib-jre7"}, {"type": "code", "text": "kotlin-stdlib-jre8"}, {"type": "p", "text": "If you target JavaScript, use the stdlib-js dependency."}, {"type": "code", "text": "stdlib-js"}, {"type": "div", "text": "\n\nimplementation \"org.jetbrains.kotlin:kotlin-stdlib-js\"\n\n\n"}, {"type": "div", "text": "\nimplementation \"org.jetbrains.kotlin:kotlin-stdlib-js\"\n\n"}, {"type": "pre", "text": "implementation \"org.jetbrains.kotlin:kotlin-stdlib-js\"\n"}, {"type": "code", "text": "implementation \"org.jetbrains.kotlin:kotlin-stdlib-js\"\n"}, {"type": "div", "text": "\n\nimplementation(kotlin(\"stdlib-js\"))\n\n\n"}, {"type": "div", "text": "\nimplementation(kotlin(\"stdlib-js\"))\n\n"}, {"type": "pre", "text": "implementation(kotlin(\"stdlib-js\"))\n"}, {"type": "code", "text": "implementation(kotlin(\"stdlib-js\"))\n"}, {"type": "p", "text": "If your project uses Kotlin reflection or testing facilities, you need to add the corresponding dependencies as well:"}, {"type": "a", "text": "Kotlin reflection"}, {"type": "div", "text": "\n\nimplementation \"org.jetbrains.kotlin:kotlin-reflect\"\ntestImplementation \"org.jetbrains.kotlin:kotlin-test\"\ntestImplementation \"org.jetbrains.kotlin:kotlin-test-junit\"\n\n\n"}, {"type": "div", "text": "\nimplementation \"org.jetbrains.kotlin:kotlin-reflect\"\ntestImplementation \"org.jetbrains.kotlin:kotlin-test\"\ntestImplementation \"org.jetbrains.kotlin:kotlin-test-junit\"\n\n"}, {"type": "pre", "text": "implementation \"org.jetbrains.kotlin:kotlin-reflect\"\ntestImplementation \"org.jetbrains.kotlin:kotlin-test\"\ntestImplementation \"org.jetbrains.kotlin:kotlin-test-junit\"\n"}, {"type": "code", "text": "implementation \"org.jetbrains.kotlin:kotlin-reflect\"\ntestImplementation \"org.jetbrains.kotlin:kotlin-test\"\ntestImplementation \"org.jetbrains.kotlin:kotlin-test-junit\"\n"}, {"type": "div", "text": "\n\nimplementation(kotlin(\"reflect\"))\ntestImplementation(kotlin(\"test\"))\ntestImplementation(kotlin(\"test-junit\"))\n\n\n"}, {"type": "div", "text": "\nimplementation(kotlin(\"reflect\"))\ntestImplementation(kotlin(\"test\"))\ntestImplementation(kotlin(\"test-junit\"))\n\n"}, {"type": "pre", "text": "implementation(kotlin(\"reflect\"))\ntestImplementation(kotlin(\"test\"))\ntestImplementation(kotlin(\"test-junit\"))\n"}, {"type": "code", "text": "implementation(kotlin(\"reflect\"))\ntestImplementation(kotlin(\"test\"))\ntestImplementation(kotlin(\"test-junit\"))\n"}, {"type": "p", "text": "Starting with Kotlin 1.1.2, the dependencies with group org.jetbrains.kotlin are by default resolved with the version\ntaken from the applied plugin. You can provide the version manually using the full dependency notation:"}, {"type": "code", "text": "org.jetbrains.kotlin"}, {"type": "div", "text": "\n\nimplementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\n\n\n"}, {"type": "div", "text": "\nimplementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\n\n"}, {"type": "pre", "text": "implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\n"}, {"type": "code", "text": "implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\n"}, {"type": "div", "text": "\n\n implementation(kotlin(\"stdlib\", kotlinVersion))\n\n\n"}, {"type": "div", "text": "\n implementation(kotlin(\"stdlib\", kotlinVersion))\n\n"}, {"type": "pre", "text": " implementation(kotlin(\"stdlib\", kotlinVersion))\n"}, {"type": "code", "text": " implementation(kotlin(\"stdlib\", kotlinVersion))\n"}, {"type": "h2", "text": "Annotation Processing"}, {"type": "p", "text": "Kotlin supports annonation processing via the Kotlin annotation processing tool(kapt). Usage of kapt with Gradle is described on the kapt page."}, {"type": "em", "text": "Kotlin annotation processing tool"}, {"type": "code", "text": "kapt"}, {"type": "a", "text": "kapt page"}, {"type": "h2", "text": "Incremental Compilation"}, {"type": "p", "text": "The Kotlin Gradle plugin supports incremental compilation. Incremental compilation tracks changes of source files between builds so only files affected by these changes would be compiled."}, {"type": "p", "text": "Incremental compilation is supported for Kotlin/JVM and Kotlin/JS projects. It's enabled by default since Kotlin 1.1.1 for Kotlin/JVM and 1.3.20 for Kotlin/JS."}, {"type": "p", "text": "There are several ways to override the default setting:"}, {"type": "ul", "text": "\n\nIn Gradle configuration files: add the line kotlin.incremental=<value> for Kotlin/JVM or kotlin.incremental.js=<value> for Kotlin/JS projects either to gradle.properties or to local.properties file. <value> is a boolean value reflecting the usage of incremental compilation.\n\n\nIn Gradle command line parameters: add the parameter -Pkotlin.incremental or -Pkotlin.incremental.js with the boolean value reflecting the usage of incremental compilation. Note that in this case the parameter should be added to each subsequent build, and any build with disabled incremental compilation invalidates incremental caches.\n\n"}, {"type": "li", "text": "\nIn Gradle configuration files: add the line kotlin.incremental=<value> for Kotlin/JVM or kotlin.incremental.js=<value> for Kotlin/JS projects either to gradle.properties or to local.properties file. <value> is a boolean value reflecting the usage of incremental compilation.\n"}, {"type": "p", "text": "In Gradle configuration files: add the line kotlin.incremental=<value> for Kotlin/JVM or kotlin.incremental.js=<value> for Kotlin/JS projects either to gradle.properties or to local.properties file. <value> is a boolean value reflecting the usage of incremental compilation."}, {"type": "code", "text": "kotlin.incremental=<value>"}, {"type": "code", "text": "kotlin.incremental.js=<value>"}, {"type": "code", "text": "gradle.properties"}, {"type": "code", "text": "local.properties"}, {"type": "code", "text": "<value>"}, {"type": "li", "text": "\nIn Gradle command line parameters: add the parameter -Pkotlin.incremental or -Pkotlin.incremental.js with the boolean value reflecting the usage of incremental compilation. Note that in this case the parameter should be added to each subsequent build, and any build with disabled incremental compilation invalidates incremental caches.\n"}, {"type": "p", "text": "In Gradle command line parameters: add the parameter -Pkotlin.incremental or -Pkotlin.incremental.js with the boolean value reflecting the usage of incremental compilation. Note that in this case the parameter should be added to each subsequent build, and any build with disabled incremental compilation invalidates incremental caches."}, {"type": "code", "text": "-Pkotlin.incremental"}, {"type": "code", "text": "-Pkotlin.incremental.js"}, {"type": "p", "text": "Note that the first build isn't incremental in any case."}, {"type": "h2", "text": "Gradle Build Cache Support (since 1.2.20)"}, {"type": "p", "text": "The Kotlin plugin supports Gradle Build Cache (Gradle version 4.3 and above is required; caching is disabled with lower versions)."}, {"type": "a", "text": "Gradle Build Cache"}, {"type": "p", "text": "To disable the caching for all Kotlin tasks, set the system property flag kotlin.caching.enabled to false (run the build with the argument -Dkotlin.caching.enabled=false)."}, {"type": "code", "text": "kotlin.caching.enabled"}, {"type": "code", "text": "false"}, {"type": "code", "text": "-Dkotlin.caching.enabled=false"}, {"type": "p", "text": "If you use kapt, note that the kapt annotation processing tasks are not cached by default. However, you can enable caching for them manually. See the kapt page for details."}, {"type": "a", "text": "kapt"}, {"type": "a", "text": "kapt page"}, {"type": "h2", "text": "Compiler Options"}, {"type": "p", "text": "To specify additional compilation options, use the kotlinOptions property of a Kotlin compilation task."}, {"type": "code", "text": "kotlinOptions"}, {"type": "p", "text": "When targeting the JVM, the tasks are called compileKotlin for production code and compileTestKotlin\nfor test code. The tasks for custom source sets are called accordingly to the compile<Name>Kotlin pattern."}, {"type": "code", "text": "compileKotlin"}, {"type": "code", "text": "compileTestKotlin"}, {"type": "code", "text": "compile<Name>Kotlin"}, {"type": "p", "text": "The names of the tasks in Android Projects contain the build variant names and follow the pattern compile<BuildVariant>Kotlin, for example, compileDebugKotlin, compileReleaseUnitTestKotlin."}, {"type": "a", "text": "build variant"}, {"type": "code", "text": "compile<BuildVariant>Kotlin"}, {"type": "code", "text": "compileDebugKotlin"}, {"type": "code", "text": "compileReleaseUnitTestKotlin"}, {"type": "p", "text": "When targeting JavaScript, the tasks are called compileKotlin2Js and compileTestKotlin2Js respectively, and compile<Name>Kotlin2Js for custom source sets."}, {"type": "code", "text": "compileKotlin2Js"}, {"type": "code", "text": "compileTestKotlin2Js"}, {"type": "code", "text": "compile<Name>Kotlin2Js"}, {"type": "p", "text": "To configure a single task, use its name. Examples:"}, {"type": "div", "text": "\n\ncompileKotlin {\n    kotlinOptions.suppressWarnings = true\n}\n\n//or\n\ncompileKotlin {\n    kotlinOptions {\n        suppressWarnings = true\n    }\n}\n\n\n"}, {"type": "div", "text": "\ncompileKotlin {\n    kotlinOptions.suppressWarnings = true\n}\n\n//or\n\ncompileKotlin {\n    kotlinOptions {\n        suppressWarnings = true\n    }\n}\n\n"}, {"type": "pre", "text": "compileKotlin {\n    kotlinOptions.suppressWarnings = true\n}\n\n//or\n\ncompileKotlin {\n    kotlinOptions {\n        suppressWarnings = true\n    }\n}\n"}, {"type": "code", "text": "compileKotlin {\n    kotlinOptions.suppressWarnings = true\n}\n\n//or\n\ncompileKotlin {\n    kotlinOptions {\n        suppressWarnings = true\n    }\n}\n"}, {"type": "div", "text": "\n\nimport org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n// ...\n\nval compileKotlin: KotlinCompile by tasks\n\ncompileKotlin.kotlinOptions.suppressWarnings = true\n\n\n"}, {"type": "div", "text": "\nimport org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n// ...\n\nval compileKotlin: KotlinCompile by tasks\n\ncompileKotlin.kotlinOptions.suppressWarnings = true\n\n"}, {"type": "pre", "text": "import org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n// ...\n\nval compileKotlin: KotlinCompile by tasks\n\ncompileKotlin.kotlinOptions.suppressWarnings = true\n"}, {"type": "code", "text": "import org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n// ...\n\nval compileKotlin: KotlinCompile by tasks\n\ncompileKotlin.kotlinOptions.suppressWarnings = true\n"}, {"type": "p", "text": "Note that with Gradle Kotlin DSL, you should get the task from the project's tasks first."}, {"type": "code", "text": "tasks"}, {"type": "p", "text": "Use the types Kotlin2JsCompile and KotlinCompileCommon for the JS and Common targets, accordingly."}, {"type": "code", "text": "Kotlin2JsCompile"}, {"type": "code", "text": "KotlinCompileCommon"}, {"type": "p", "text": "It is also possible to configure all Kotlin compilation tasks in the project:"}, {"type": "div", "text": "\n\ntasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {\n    kotlinOptions { ... }\n}\n\n\n"}, {"type": "div", "text": "\ntasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {\n    kotlinOptions { ... }\n}\n\n"}, {"type": "pre", "text": "tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {\n    kotlinOptions { ... }\n}\n"}, {"type": "code", "text": "tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {\n    kotlinOptions { ... }\n}\n"}, {"type": "div", "text": "\n\nimport org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n\ntasks.withType<KotlinCompile>().configureEach {\n    kotlinOptions.suppressWarnings = true\n}\n\n\n"}, {"type": "div", "text": "\nimport org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n\ntasks.withType<KotlinCompile>().configureEach {\n    kotlinOptions.suppressWarnings = true\n}\n\n"}, {"type": "pre", "text": "import org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n\ntasks.withType<KotlinCompile>().configureEach {\n    kotlinOptions.suppressWarnings = true\n}\n"}, {"type": "code", "text": "import org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n\ntasks.withType<KotlinCompile>().configureEach {\n    kotlinOptions.suppressWarnings = true\n}\n"}, {"type": "p", "text": "The complete list of options for the Gradle tasks is the following:"}, {"type": "h3", "text": "Attributes Common for JVM, JS, and JS DCE"}, {"type": "table", "text": "\n\n\nName\nDescription\nPossible values\nDefault value\n\n\n\n\nallWarningsAsErrors\nReport an error if there are any warnings\n\u00a0\nfalse\n\n\nsuppressWarnings\nGenerate no warnings\n\u00a0\nfalse\n\n\nverbose\nEnable verbose logging output\n\u00a0\nfalse\n\n\nfreeCompilerArgs\nA list of additional compiler arguments\n\u00a0\n[]\n\n\n"}, {"type": "thead", "text": "\n\nName\nDescription\nPossible values\nDefault value\n\n"}, {"type": "tr", "text": "\nName\nDescription\nPossible values\nDefault value\n"}, {"type": "th", "text": "Name"}, {"type": "th", "text": "Description"}, {"type": "th", "text": "Possible values"}, {"type": "th", "text": "Default value"}, {"type": "tbody", "text": "\n\nallWarningsAsErrors\nReport an error if there are any warnings\n\u00a0\nfalse\n\n\nsuppressWarnings\nGenerate no warnings\n\u00a0\nfalse\n\n\nverbose\nEnable verbose logging output\n\u00a0\nfalse\n\n\nfreeCompilerArgs\nA list of additional compiler arguments\n\u00a0\n[]\n\n"}, {"type": "tr", "text": "\nallWarningsAsErrors\nReport an error if there are any warnings\n\u00a0\nfalse\n"}, {"type": "td", "text": "allWarningsAsErrors"}, {"type": "code", "text": "allWarningsAsErrors"}, {"type": "td", "text": "Report an error if there are any warnings"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "false"}, {"type": "tr", "text": "\nsuppressWarnings\nGenerate no warnings\n\u00a0\nfalse\n"}, {"type": "td", "text": "suppressWarnings"}, {"type": "code", "text": "suppressWarnings"}, {"type": "td", "text": "Generate no warnings"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "false"}, {"type": "tr", "text": "\nverbose\nEnable verbose logging output\n\u00a0\nfalse\n"}, {"type": "td", "text": "verbose"}, {"type": "code", "text": "verbose"}, {"type": "td", "text": "Enable verbose logging output"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "false"}, {"type": "tr", "text": "\nfreeCompilerArgs\nA list of additional compiler arguments\n\u00a0\n[]\n"}, {"type": "td", "text": "freeCompilerArgs"}, {"type": "code", "text": "freeCompilerArgs"}, {"type": "td", "text": "A list of additional compiler arguments"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "[]"}, {"type": "h3", "text": "Attributes Common for JVM and JS"}, {"type": "table", "text": "\n\n\nName\nDescription\nPossible values\nDefault value\n\n\n\n\napiVersion\nAllow using declarations only from the specified version of bundled libraries\n\"1.0\", \"1.1\", \"1.2\", \"1.3\", \"1.4 (EXPERIMENTAL)\"\n\u00a0\n\n\nlanguageVersion\nProvide source compatibility with the specified version of Kotlin\n\"1.0\", \"1.1\", \"1.2\", \"1.3\", \"1.4 (EXPERIMENTAL)\"\n\u00a0\n\n\n"}, {"type": "thead", "text": "\n\nName\nDescription\nPossible values\nDefault value\n\n"}, {"type": "tr", "text": "\nName\nDescription\nPossible values\nDefault value\n"}, {"type": "th", "text": "Name"}, {"type": "th", "text": "Description"}, {"type": "th", "text": "Possible values"}, {"type": "th", "text": "Default value"}, {"type": "tbody", "text": "\n\napiVersion\nAllow using declarations only from the specified version of bundled libraries\n\"1.0\", \"1.1\", \"1.2\", \"1.3\", \"1.4 (EXPERIMENTAL)\"\n\u00a0\n\n\nlanguageVersion\nProvide source compatibility with the specified version of Kotlin\n\"1.0\", \"1.1\", \"1.2\", \"1.3\", \"1.4 (EXPERIMENTAL)\"\n\u00a0\n\n"}, {"type": "tr", "text": "\napiVersion\nAllow using declarations only from the specified version of bundled libraries\n\"1.0\", \"1.1\", \"1.2\", \"1.3\", \"1.4 (EXPERIMENTAL)\"\n\u00a0\n"}, {"type": "td", "text": "apiVersion"}, {"type": "code", "text": "apiVersion"}, {"type": "td", "text": "Allow using declarations only from the specified version of bundled libraries"}, {"type": "td", "text": "\"1.0\", \"1.1\", \"1.2\", \"1.3\", \"1.4 (EXPERIMENTAL)\""}, {"type": "td", "text": "\u00a0"}, {"type": "tr", "text": "\nlanguageVersion\nProvide source compatibility with the specified version of Kotlin\n\"1.0\", \"1.1\", \"1.2\", \"1.3\", \"1.4 (EXPERIMENTAL)\"\n\u00a0\n"}, {"type": "td", "text": "languageVersion"}, {"type": "code", "text": "languageVersion"}, {"type": "td", "text": "Provide source compatibility with the specified version of Kotlin"}, {"type": "td", "text": "\"1.0\", \"1.1\", \"1.2\", \"1.3\", \"1.4 (EXPERIMENTAL)\""}, {"type": "td", "text": "\u00a0"}, {"type": "h3", "text": "Attributes Specific for JVM"}, {"type": "table", "text": "\n\n\nName\nDescription\nPossible values\nDefault value\n\n\n\n\njavaParameters\nGenerate metadata for Java 1.8 reflection on method parameters\n\u00a0\nfalse\n\n\njdkHome\nInclude a custom JDK from the specified location into the classpath instead of the default JAVA_HOME\n\u00a0\n\u00a0\n\n\njvmTarget\nTarget version of the generated JVM bytecode (1.6, 1.8, 9, 10, 11, 12 or 13), default is 1.6\n\"1.6\", \"1.8\", \"9\", \"10\", \"11\", \"12\", \"13\"\n\"1.6\"\n\n\nnoJdk\nDon't automatically include the Java runtime into the classpath\n\u00a0\nfalse\n\n\nnoReflect\nDon't automatically include Kotlin reflection into the classpath\n\u00a0\ntrue\n\n\nnoStdlib\nDon't automatically include the Kotlin/JVM stdlib and Kotlin reflection into the classpath\n\u00a0\ntrue\n\n\n"}, {"type": "thead", "text": "\n\nName\nDescription\nPossible values\nDefault value\n\n"}, {"type": "tr", "text": "\nName\nDescription\nPossible values\nDefault value\n"}, {"type": "th", "text": "Name"}, {"type": "th", "text": "Description"}, {"type": "th", "text": "Possible values"}, {"type": "th", "text": "Default value"}, {"type": "tbody", "text": "\n\njavaParameters\nGenerate metadata for Java 1.8 reflection on method parameters\n\u00a0\nfalse\n\n\njdkHome\nInclude a custom JDK from the specified location into the classpath instead of the default JAVA_HOME\n\u00a0\n\u00a0\n\n\njvmTarget\nTarget version of the generated JVM bytecode (1.6, 1.8, 9, 10, 11, 12 or 13), default is 1.6\n\"1.6\", \"1.8\", \"9\", \"10\", \"11\", \"12\", \"13\"\n\"1.6\"\n\n\nnoJdk\nDon't automatically include the Java runtime into the classpath\n\u00a0\nfalse\n\n\nnoReflect\nDon't automatically include Kotlin reflection into the classpath\n\u00a0\ntrue\n\n\nnoStdlib\nDon't automatically include the Kotlin/JVM stdlib and Kotlin reflection into the classpath\n\u00a0\ntrue\n\n"}, {"type": "tr", "text": "\njavaParameters\nGenerate metadata for Java 1.8 reflection on method parameters\n\u00a0\nfalse\n"}, {"type": "td", "text": "javaParameters"}, {"type": "code", "text": "javaParameters"}, {"type": "td", "text": "Generate metadata for Java 1.8 reflection on method parameters"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "false"}, {"type": "tr", "text": "\njdkHome\nInclude a custom JDK from the specified location into the classpath instead of the default JAVA_HOME\n\u00a0\n\u00a0\n"}, {"type": "td", "text": "jdkHome"}, {"type": "code", "text": "jdkHome"}, {"type": "td", "text": "Include a custom JDK from the specified location into the classpath instead of the default JAVA_HOME"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "\u00a0"}, {"type": "tr", "text": "\njvmTarget\nTarget version of the generated JVM bytecode (1.6, 1.8, 9, 10, 11, 12 or 13), default is 1.6\n\"1.6\", \"1.8\", \"9\", \"10\", \"11\", \"12\", \"13\"\n\"1.6\"\n"}, {"type": "td", "text": "jvmTarget"}, {"type": "code", "text": "jvmTarget"}, {"type": "td", "text": "Target version of the generated JVM bytecode (1.6, 1.8, 9, 10, 11, 12 or 13), default is 1.6"}, {"type": "td", "text": "\"1.6\", \"1.8\", \"9\", \"10\", \"11\", \"12\", \"13\""}, {"type": "td", "text": "\"1.6\""}, {"type": "tr", "text": "\nnoJdk\nDon't automatically include the Java runtime into the classpath\n\u00a0\nfalse\n"}, {"type": "td", "text": "noJdk"}, {"type": "code", "text": "noJdk"}, {"type": "td", "text": "Don't automatically include the Java runtime into the classpath"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "false"}, {"type": "tr", "text": "\nnoReflect\nDon't automatically include Kotlin reflection into the classpath\n\u00a0\ntrue\n"}, {"type": "td", "text": "noReflect"}, {"type": "code", "text": "noReflect"}, {"type": "td", "text": "Don't automatically include Kotlin reflection into the classpath"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "true"}, {"type": "tr", "text": "\nnoStdlib\nDon't automatically include the Kotlin/JVM stdlib and Kotlin reflection into the classpath\n\u00a0\ntrue\n"}, {"type": "td", "text": "noStdlib"}, {"type": "code", "text": "noStdlib"}, {"type": "td", "text": "Don't automatically include the Kotlin/JVM stdlib and Kotlin reflection into the classpath"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "true"}, {"type": "h3", "text": "Attributes Specific for JS"}, {"type": "table", "text": "\n\n\nName\nDescription\nPossible values\nDefault value\n\n\n\n\nfriendModulesDisabled\nDisable internal declaration export\n\u00a0\nfalse\n\n\nmain\nDefine whether the main function should be called upon execution\n\"call\", \"noCall\"\n\"call\"\n\n\nmetaInfo\nGenerate .meta.js and .kjsm files with metadata. Use to create a library\n\u00a0\ntrue\n\n\nmoduleKind\nThe kind of JS module generated by the compiler\n\"plain\", \"amd\", \"commonjs\", \"umd\"\n\"plain\"\n\n\nnoStdlib\nDon't automatically include the default Kotlin/JS stdlib into compilation dependencies\n\u00a0\ntrue\n\n\noutputFile\nDestination *.js file for the compilation result\n\u00a0\n\u00a0\n\n\nsourceMap\nGenerate source map\n\u00a0\nfalse\n\n\nsourceMapEmbedSources\nEmbed source files into source map\n\"never\", \"always\", \"inlining\"\n\u00a0\n\n\nsourceMapPrefix\nAdd the specified prefix to paths in the source map\n\u00a0\n\u00a0\n\n\ntarget\nGenerate JS files for specific ECMA version\n\"v5\"\n\"v5\"\n\n\ntypedArrays\nTranslate primitive arrays to JS typed arrays\n\u00a0\ntrue\n\n\n"}, {"type": "thead", "text": "\n\nName\nDescription\nPossible values\nDefault value\n\n"}, {"type": "tr", "text": "\nName\nDescription\nPossible values\nDefault value\n"}, {"type": "th", "text": "Name"}, {"type": "th", "text": "Description"}, {"type": "th", "text": "Possible values"}, {"type": "th", "text": "Default value"}, {"type": "tbody", "text": "\n\nfriendModulesDisabled\nDisable internal declaration export\n\u00a0\nfalse\n\n\nmain\nDefine whether the main function should be called upon execution\n\"call\", \"noCall\"\n\"call\"\n\n\nmetaInfo\nGenerate .meta.js and .kjsm files with metadata. Use to create a library\n\u00a0\ntrue\n\n\nmoduleKind\nThe kind of JS module generated by the compiler\n\"plain\", \"amd\", \"commonjs\", \"umd\"\n\"plain\"\n\n\nnoStdlib\nDon't automatically include the default Kotlin/JS stdlib into compilation dependencies\n\u00a0\ntrue\n\n\noutputFile\nDestination *.js file for the compilation result\n\u00a0\n\u00a0\n\n\nsourceMap\nGenerate source map\n\u00a0\nfalse\n\n\nsourceMapEmbedSources\nEmbed source files into source map\n\"never\", \"always\", \"inlining\"\n\u00a0\n\n\nsourceMapPrefix\nAdd the specified prefix to paths in the source map\n\u00a0\n\u00a0\n\n\ntarget\nGenerate JS files for specific ECMA version\n\"v5\"\n\"v5\"\n\n\ntypedArrays\nTranslate primitive arrays to JS typed arrays\n\u00a0\ntrue\n\n"}, {"type": "tr", "text": "\nfriendModulesDisabled\nDisable internal declaration export\n\u00a0\nfalse\n"}, {"type": "td", "text": "friendModulesDisabled"}, {"type": "code", "text": "friendModulesDisabled"}, {"type": "td", "text": "Disable internal declaration export"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "false"}, {"type": "tr", "text": "\nmain\nDefine whether the main function should be called upon execution\n\"call\", \"noCall\"\n\"call\"\n"}, {"type": "td", "text": "main"}, {"type": "code", "text": "main"}, {"type": "td", "text": "Define whether the main function should be called upon execution"}, {"type": "code", "text": "main"}, {"type": "td", "text": "\"call\", \"noCall\""}, {"type": "td", "text": "\"call\""}, {"type": "tr", "text": "\nmetaInfo\nGenerate .meta.js and .kjsm files with metadata. Use to create a library\n\u00a0\ntrue\n"}, {"type": "td", "text": "metaInfo"}, {"type": "code", "text": "metaInfo"}, {"type": "td", "text": "Generate .meta.js and .kjsm files with metadata. Use to create a library"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "true"}, {"type": "tr", "text": "\nmoduleKind\nThe kind of JS module generated by the compiler\n\"plain\", \"amd\", \"commonjs\", \"umd\"\n\"plain\"\n"}, {"type": "td", "text": "moduleKind"}, {"type": "code", "text": "moduleKind"}, {"type": "td", "text": "The kind of JS module generated by the compiler"}, {"type": "td", "text": "\"plain\", \"amd\", \"commonjs\", \"umd\""}, {"type": "td", "text": "\"plain\""}, {"type": "tr", "text": "\nnoStdlib\nDon't automatically include the default Kotlin/JS stdlib into compilation dependencies\n\u00a0\ntrue\n"}, {"type": "td", "text": "noStdlib"}, {"type": "code", "text": "noStdlib"}, {"type": "td", "text": "Don't automatically include the default Kotlin/JS stdlib into compilation dependencies"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "true"}, {"type": "tr", "text": "\noutputFile\nDestination *.js file for the compilation result\n\u00a0\n\u00a0\n"}, {"type": "td", "text": "outputFile"}, {"type": "code", "text": "outputFile"}, {"type": "td", "text": "Destination *.js file for the compilation result"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "\u00a0"}, {"type": "tr", "text": "\nsourceMap\nGenerate source map\n\u00a0\nfalse\n"}, {"type": "td", "text": "sourceMap"}, {"type": "code", "text": "sourceMap"}, {"type": "td", "text": "Generate source map"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "false"}, {"type": "tr", "text": "\nsourceMapEmbedSources\nEmbed source files into source map\n\"never\", \"always\", \"inlining\"\n\u00a0\n"}, {"type": "td", "text": "sourceMapEmbedSources"}, {"type": "code", "text": "sourceMapEmbedSources"}, {"type": "td", "text": "Embed source files into source map"}, {"type": "td", "text": "\"never\", \"always\", \"inlining\""}, {"type": "td", "text": "\u00a0"}, {"type": "tr", "text": "\nsourceMapPrefix\nAdd the specified prefix to paths in the source map\n\u00a0\n\u00a0\n"}, {"type": "td", "text": "sourceMapPrefix"}, {"type": "code", "text": "sourceMapPrefix"}, {"type": "td", "text": "Add the specified prefix to paths in the source map"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "\u00a0"}, {"type": "tr", "text": "\ntarget\nGenerate JS files for specific ECMA version\n\"v5\"\n\"v5\"\n"}, {"type": "td", "text": "target"}, {"type": "code", "text": "target"}, {"type": "td", "text": "Generate JS files for specific ECMA version"}, {"type": "td", "text": "\"v5\""}, {"type": "td", "text": "\"v5\""}, {"type": "tr", "text": "\ntypedArrays\nTranslate primitive arrays to JS typed arrays\n\u00a0\ntrue\n"}, {"type": "td", "text": "typedArrays"}, {"type": "code", "text": "typedArrays"}, {"type": "td", "text": "Translate primitive arrays to JS typed arrays"}, {"type": "td", "text": "\u00a0"}, {"type": "td", "text": "true"}, {"type": "h2", "text": "Generating Documentation"}, {"type": "p", "text": "To generate documentation for Kotlin projects, use Dokka;\nplease refer to the Dokka README\nfor configuration instructions. Dokka supports mixed-language projects and can generate output in multiple\nformats, including standard JavaDoc."}, {"type": "a", "text": "Dokka"}, {"type": "a", "text": "Dokka README"}, {"type": "h2", "text": "OSGi"}, {"type": "p", "text": "For OSGi support see the Kotlin OSGi page."}, {"type": "a", "text": "Kotlin OSGi page"}, {"type": "h2", "text": "Using Gradle Kotlin DSL"}, {"type": "p", "text": "When using Gradle Kotlin DSL, apply the Kotlin plugins using the plugins { ... } block. If you apply them with apply { plugin(...) } instead, you may encounter unresolved references to the extensions generated by Gradle Kotlin DSL. To resolve that, you can comment out the erroneous usages, run the Gradle task kotlinDslAccessorsSnapshot, then uncomment the usages back and rerun the build or reimport the project into the IDE."}, {"type": "a", "text": "Gradle Kotlin DSL"}, {"type": "code", "text": "plugins { ... }"}, {"type": "code", "text": "apply { plugin(...) }"}, {"type": "code", "text": "kotlinDslAccessorsSnapshot"}, {"type": "h2", "text": "Examples"}, {"type": "p", "text": "The following examples show different possibilities of configuring the Gradle plugin:"}, {"type": "ul", "text": "\nKotlin\nMixed Java and Kotlin\nAndroid\nJavaScript\n"}, {"type": "li", "text": "Kotlin"}, {"type": "a", "text": "Kotlin"}, {"type": "li", "text": "Mixed Java and Kotlin"}, {"type": "a", "text": "Mixed Java and Kotlin"}, {"type": "li", "text": "Android"}, {"type": "a", "text": "Android"}, {"type": "li", "text": "JavaScript"}, {"type": "a", "text": "JavaScript"}]