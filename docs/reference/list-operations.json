[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "List Specific Operations"}, {"type": "p", "text": "List is the most popular type of built-in collection in Kotlin. Index access to the elements of lists provides a powerful set of operations for lists."}, {"type": "a", "text": "List"}, {"type": "code", "text": "List"}, {"type": "h2", "text": "Retrieving elements by index"}, {"type": "p", "text": "Lists support all common operations for element retrieval: elementAt(), first(), last(), and others listed in Retrieving Single Elements.\nWhat is specific for lists is index access to the elements, so the simplest way to read an element is retrieving it by index.\nThat is done with the get() function with the index passed in the argument or the shorthand [index] syntax."}, {"type": "code", "text": "elementAt()"}, {"type": "code", "text": "first()"}, {"type": "code", "text": "last()"}, {"type": "a", "text": "Retrieving Single Elements"}, {"type": "a", "text": "get()"}, {"type": "code", "text": "get()"}, {"type": "code", "text": "[index]"}, {"type": "p", "text": "If the list size is less than the specified index, an exception is thrown.\nThere are two other functions that help you avoid such exceptions:"}, {"type": "ul", "text": "\ngetOrElse() lets you provide the function for calculating the default value to return if the index isn't present in the collection.\ngetOrNull() returns null as the default value.\n"}, {"type": "li", "text": "getOrElse() lets you provide the function for calculating the default value to return if the index isn't present in the collection."}, {"type": "a", "text": "getOrElse()"}, {"type": "code", "text": "getOrElse()"}, {"type": "li", "text": "getOrNull() returns null as the default value."}, {"type": "a", "text": "getOrNull()"}, {"type": "code", "text": "getOrNull()"}, {"type": "code", "text": "null"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = listOf(1, 2, 3, 4)\n    println(numbers.get(0))\n    println(numbers[0])\n    //numbers.get(5)                         // exception!\n    println(numbers.getOrNull(5))             // null\n    println(numbers.getOrElse(5, {it}))        // 5\n//sampleEnd\n}\n\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(1, 2, 3, 4)\n    println(numbers.get(0))\n    println(numbers[0])\n    //numbers.get(5)                         // exception!\n    println(numbers.getOrNull(5))             // null\n    println(numbers.getOrElse(5, {it}))        // 5\n//sampleEnd\n}\n\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(1, 2, 3, 4)\n    println(numbers.get(0))\n    println(numbers[0])\n    //numbers.get(5)                         // exception!\n    println(numbers.getOrNull(5))             // null\n    println(numbers.getOrElse(5, {it}))        // 5\n//sampleEnd\n}\n\n"}, {"type": "h2", "text": "Retrieving list parts"}, {"type": "p", "text": "In addition to common operations for Retrieving Collection Parts, lists provide the subList() function that returns a view of the specified elements range as a list.\nThus, if an element of the original collection changes, it also changes in the previously created sublists and vice versa."}, {"type": "a", "text": "Retrieving Collection Parts"}, {"type": "a", "text": "subList()"}, {"type": "code", "text": "subList()"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = (0..13).toList()\n    println(numbers.subList(3, 6))\n//sampleEnd\n}\n\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = (0..13).toList()\n    println(numbers.subList(3, 6))\n//sampleEnd\n}\n\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = (0..13).toList()\n    println(numbers.subList(3, 6))\n//sampleEnd\n}\n\n"}, {"type": "h2", "text": "Finding element positions"}, {"type": "h3", "text": "Linear search"}, {"type": "p", "text": "In any lists, you can find the position of an element using the functions indexOf() and lastIndexOf().\nThey return the first and the last position of an element equal to the given argument in the list.\nIf there are no such elements, both functions return -1."}, {"type": "a", "text": "indexOf()"}, {"type": "code", "text": "indexOf()"}, {"type": "a", "text": "lastIndexOf()"}, {"type": "code", "text": "lastIndexOf()"}, {"type": "code", "text": "-1"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = listOf(1, 2, 3, 4, 2, 5)\n    println(numbers.indexOf(2))\n    println(numbers.lastIndexOf(2))\n//sampleEnd\n}\n\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(1, 2, 3, 4, 2, 5)\n    println(numbers.indexOf(2))\n    println(numbers.lastIndexOf(2))\n//sampleEnd\n}\n\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(1, 2, 3, 4, 2, 5)\n    println(numbers.indexOf(2))\n    println(numbers.lastIndexOf(2))\n//sampleEnd\n}\n\n"}, {"type": "p", "text": "There is also a pair of functions that take a predicate and search for elements matching it:"}, {"type": "ul", "text": "\nindexOfFirst() returns the index of the first element matching the predicate or -1 if there are no such elements.\nindexOfLast() returns the index of the last element matching the predicate or -1 if there are no such elements.\n"}, {"type": "li", "text": "indexOfFirst() returns the index of the first element matching the predicate or -1 if there are no such elements."}, {"type": "a", "text": "indexOfFirst()"}, {"type": "code", "text": "indexOfFirst()"}, {"type": "em", "text": "index of the first"}, {"type": "code", "text": "-1"}, {"type": "li", "text": "indexOfLast() returns the index of the last element matching the predicate or -1 if there are no such elements."}, {"type": "a", "text": "indexOfLast()"}, {"type": "code", "text": "indexOfLast()"}, {"type": "em", "text": "index of the last"}, {"type": "code", "text": "-1"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(1, 2, 3, 4)\n    println(numbers.indexOfFirst { it > 2})\n    println(numbers.indexOfLast { it % 2 == 1})\n//sampleEnd\n}\n\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = mutableListOf(1, 2, 3, 4)\n    println(numbers.indexOfFirst { it > 2})\n    println(numbers.indexOfLast { it % 2 == 1})\n//sampleEnd\n}\n\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = mutableListOf(1, 2, 3, 4)\n    println(numbers.indexOfFirst { it > 2})\n    println(numbers.indexOfLast { it % 2 == 1})\n//sampleEnd\n}\n\n"}, {"type": "h3", "text": "Binary search in sorted lists"}, {"type": "p", "text": "There is one more way to search elements in lists \u2013 binary search.\nIt works significantly faster than other built-in search functions but requires the list to be sorted in ascending order according to a certain ordering: natural or another one provided in the function parameter.\nOtherwise, the result is undefined."}, {"type": "a", "text": "binary search"}, {"type": "em", "text": "requires the list to be sorted"}, {"type": "a", "text": "sorted"}, {"type": "p", "text": "To search an element in a sorted list, call the binarySearch() function passing the value as an argument.\nIf such an element exists, the function returns its index; otherwise, it returns (-insertionPoint - 1) where insertionPoint is the index where this element should be inserted so that the list remains sorted.\nIf there is more than one element with the given value, the search can return any of their indices."}, {"type": "a", "text": "binarySearch()"}, {"type": "code", "text": "binarySearch()"}, {"type": "code", "text": "(-insertionPoint - 1)"}, {"type": "code", "text": "insertionPoint"}, {"type": "p", "text": "You can also specify an index range to search in: in this case, the function searches only between two provided indices."}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"two\", \"three\", \"four\")\n    numbers.sort()\n    println(numbers)\n    println(numbers.binarySearch(\"two\"))  // 3\n    println(numbers.binarySearch(\"z\")) // -5\n    println(numbers.binarySearch(\"two\", 0, 2))  // -3\n//sampleEnd\n}\n\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"two\", \"three\", \"four\")\n    numbers.sort()\n    println(numbers)\n    println(numbers.binarySearch(\"two\"))  // 3\n    println(numbers.binarySearch(\"z\")) // -5\n    println(numbers.binarySearch(\"two\", 0, 2))  // -3\n//sampleEnd\n}\n\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"two\", \"three\", \"four\")\n    numbers.sort()\n    println(numbers)\n    println(numbers.binarySearch(\"two\"))  // 3\n    println(numbers.binarySearch(\"z\")) // -5\n    println(numbers.binarySearch(\"two\", 0, 2))  // -3\n//sampleEnd\n}\n\n"}, {"type": "h4", "text": "Comparator binary search"}, {"type": "p", "text": "When list elements aren't Comparable, you should provide a Comparator to use in the binary search.\nThe list must be sorted in ascending order according to this Comparator. Let's have a look at an example:"}, {"type": "code", "text": "Comparable"}, {"type": "a", "text": "Comparator"}, {"type": "code", "text": "Comparator"}, {"type": "code", "text": "Comparator"}, {"type": "div", "text": "\ndata class Product(val name: String, val price: Double)\n\nfun main() {\n//sampleStart\n    val productList = listOf(\n        Product(\"WebStorm\", 49.0),\n        Product(\"AppCode\", 99.0),\n        Product(\"DotTrace\", 129.0),\n        Product(\"ReSharper\", 149.0))\n\n    println(productList.binarySearch(Product(\"AppCode\", 99.0), compareBy<Product> { it.price }.thenBy { it.name }))\n//sampleEnd\n}\n\n\n"}, {"type": "pre", "text": "data class Product(val name: String, val price: Double)\n\nfun main() {\n//sampleStart\n    val productList = listOf(\n        Product(\"WebStorm\", 49.0),\n        Product(\"AppCode\", 99.0),\n        Product(\"DotTrace\", 129.0),\n        Product(\"ReSharper\", 149.0))\n\n    println(productList.binarySearch(Product(\"AppCode\", 99.0), compareBy<Product> { it.price }.thenBy { it.name }))\n//sampleEnd\n}\n\n"}, {"type": "code", "text": "data class Product(val name: String, val price: Double)\n\nfun main() {\n//sampleStart\n    val productList = listOf(\n        Product(\"WebStorm\", 49.0),\n        Product(\"AppCode\", 99.0),\n        Product(\"DotTrace\", 129.0),\n        Product(\"ReSharper\", 149.0))\n\n    println(productList.binarySearch(Product(\"AppCode\", 99.0), compareBy<Product> { it.price }.thenBy { it.name }))\n//sampleEnd\n}\n\n"}, {"type": "p", "text": "Here's a list of Product instances that aren't Comparable and a Comparator that defines the order: product p1 precedes product p2 if p1's  price is less than p2's price.\nSo, having a list sorted ascending according to this order, we use binarySearch() to find the index of the specified Product."}, {"type": "code", "text": "Product"}, {"type": "code", "text": "Comparable"}, {"type": "code", "text": "Comparator"}, {"type": "code", "text": "p1"}, {"type": "code", "text": "p2"}, {"type": "code", "text": "p1"}, {"type": "code", "text": "p2"}, {"type": "code", "text": "binarySearch()"}, {"type": "code", "text": "Product"}, {"type": "p", "text": "Custom comparators are also handy when a list uses an order different from natural one, for example, a case-insensitive order for String elements."}, {"type": "code", "text": "String"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val colors = listOf(\"Blue\", \"green\", \"ORANGE\", \"Red\", \"yellow\")\n    println(colors.binarySearch(\"RED\", String.CASE_INSENSITIVE_ORDER)) // 3\n//sampleEnd\n}\n\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val colors = listOf(\"Blue\", \"green\", \"ORANGE\", \"Red\", \"yellow\")\n    println(colors.binarySearch(\"RED\", String.CASE_INSENSITIVE_ORDER)) // 3\n//sampleEnd\n}\n\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val colors = listOf(\"Blue\", \"green\", \"ORANGE\", \"Red\", \"yellow\")\n    println(colors.binarySearch(\"RED\", String.CASE_INSENSITIVE_ORDER)) // 3\n//sampleEnd\n}\n\n"}, {"type": "h4", "text": "Comparison binary search"}, {"type": "p", "text": "Binary search with comparison function lets you find elements without providing explicit search values.\nInstead, it takes a comparison function mapping elements to Int values and searches for the element where the function returns zero.\nThe list must be sorted in the ascending order according to the provided function; in other words, the return values of comparison must grow from one list element to the next one."}, {"type": "em", "text": "comparison"}, {"type": "code", "text": "Int"}, {"type": "div", "text": "\nimport kotlin.math.sign\n//sampleStart\ndata class Product(val name: String, val price: Double)\n\nfun priceComparison(product: Product, price: Double) = sign(product.price - price).toInt()\n\nfun main() {\n    val productList = listOf(\n        Product(\"WebStorm\", 49.0),\n        Product(\"AppCode\", 99.0),\n        Product(\"DotTrace\", 129.0),\n        Product(\"ReSharper\", 149.0))\n\n    println(productList.binarySearch { priceComparison(it, 99.0) })\n}\n//sampleEnd\n\n"}, {"type": "pre", "text": "import kotlin.math.sign\n//sampleStart\ndata class Product(val name: String, val price: Double)\n\nfun priceComparison(product: Product, price: Double) = sign(product.price - price).toInt()\n\nfun main() {\n    val productList = listOf(\n        Product(\"WebStorm\", 49.0),\n        Product(\"AppCode\", 99.0),\n        Product(\"DotTrace\", 129.0),\n        Product(\"ReSharper\", 149.0))\n\n    println(productList.binarySearch { priceComparison(it, 99.0) })\n}\n//sampleEnd\n"}, {"type": "code", "text": "import kotlin.math.sign\n//sampleStart\ndata class Product(val name: String, val price: Double)\n\nfun priceComparison(product: Product, price: Double) = sign(product.price - price).toInt()\n\nfun main() {\n    val productList = listOf(\n        Product(\"WebStorm\", 49.0),\n        Product(\"AppCode\", 99.0),\n        Product(\"DotTrace\", 129.0),\n        Product(\"ReSharper\", 149.0))\n\n    println(productList.binarySearch { priceComparison(it, 99.0) })\n}\n//sampleEnd\n"}, {"type": "p", "text": "Both comparator and comparison binary search can be performed for list ranges as well."}, {"type": "h2", "text": "List write operations"}, {"type": "p", "text": "In addition to the collection modification operations described in Collection Write Operations, mutable lists support specific write operations.\nSuch operations use the index to access elements to broaden the list modification capabilities."}, {"type": "a", "text": "Collection Write Operations"}, {"type": "a", "text": "mutable"}, {"type": "h3", "text": "Adding"}, {"type": "p", "text": "To add elements to a specific position in a list, use add() and addAll() providing the position for element insertion as an additional argument.\nAll elements that come after the position shift to the right."}, {"type": "a", "text": "add()"}, {"type": "code", "text": "add()"}, {"type": "a", "text": "addAll()"}, {"type": "code", "text": "addAll()"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"five\", \"six\")\n    numbers.add(1, \"two\")\n    numbers.addAll(2, listOf(\"three\", \"four\"))\n    println(numbers)\n//sampleEnd\n}\n\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"five\", \"six\")\n    numbers.add(1, \"two\")\n    numbers.addAll(2, listOf(\"three\", \"four\"))\n    println(numbers)\n//sampleEnd\n}\n\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"five\", \"six\")\n    numbers.add(1, \"two\")\n    numbers.addAll(2, listOf(\"three\", \"four\"))\n    println(numbers)\n//sampleEnd\n}\n\n"}, {"type": "h3", "text": "Updating"}, {"type": "p", "text": "Lists also offer a function to replace an element at a given position - set() and its operator form []. set() doesn't change the indexes of other elements."}, {"type": "a", "text": "set()"}, {"type": "code", "text": "set()"}, {"type": "code", "text": "[]"}, {"type": "code", "text": "set()"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"five\", \"three\")\n    numbers[1] =  \"two\"\n    println(numbers)\n//sampleEnd\n}\n\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"five\", \"three\")\n    numbers[1] =  \"two\"\n    println(numbers)\n//sampleEnd\n}\n\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"five\", \"three\")\n    numbers[1] =  \"two\"\n    println(numbers)\n//sampleEnd\n}\n\n"}, {"type": "p", "text": "fill() simply replaces all the collection elements with the specified value."}, {"type": "a", "text": "fill()"}, {"type": "code", "text": "fill()"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(1, 2, 3, 4)\n    numbers.fill(3)\n    println(numbers)\n//sampleEnd\n}\n\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = mutableListOf(1, 2, 3, 4)\n    numbers.fill(3)\n    println(numbers)\n//sampleEnd\n}\n\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = mutableListOf(1, 2, 3, 4)\n    numbers.fill(3)\n    println(numbers)\n//sampleEnd\n}\n\n"}, {"type": "h3", "text": "Removing"}, {"type": "p", "text": "To remove an element at a specific position from a list, use the removeAt() function providing the position as an argument.\nAll indices of elements that come after the element being removed will decrease by one."}, {"type": "a", "text": "removeAt()"}, {"type": "code", "text": "removeAt()"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(1, 2, 3, 4, 3)    \n    numbers.removeAt(1)\n    println(numbers)\n//sampleEnd\n}\n\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = mutableListOf(1, 2, 3, 4, 3)    \n    numbers.removeAt(1)\n    println(numbers)\n//sampleEnd\n}\n\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = mutableListOf(1, 2, 3, 4, 3)    \n    numbers.removeAt(1)\n    println(numbers)\n//sampleEnd\n}\n\n"}, {"type": "h3", "text": "Sorting"}, {"type": "p", "text": "In Collection Ordering, we describe operations that retrieve collection elements in specific orders.\nFor mutable lists, the standard library offers similar extension functions that perform the same ordering operations in place.\nWhen you apply such an operation to a list instance, it changes the order of elements in that exact instance."}, {"type": "a", "text": "Collection Ordering"}, {"type": "p", "text": "The in-place sorting functions have similar names to the functions that apply to read-only lists, but without the ed/d suffix:"}, {"type": "code", "text": "ed/d"}, {"type": "ul", "text": "\nsort* instead of sorted* in the names of all sorting functions: sort(), sortDescending(), sortBy(), and so on.\nshuffle() instead of shuffled().\nreverse() instead of reversed().\n"}, {"type": "li", "text": "sort* instead of sorted* in the names of all sorting functions: sort(), sortDescending(), sortBy(), and so on."}, {"type": "code", "text": "sort*"}, {"type": "code", "text": "sorted*"}, {"type": "a", "text": "sort()"}, {"type": "code", "text": "sort()"}, {"type": "a", "text": "sortDescending()"}, {"type": "code", "text": "sortDescending()"}, {"type": "a", "text": "sortBy()"}, {"type": "code", "text": "sortBy()"}, {"type": "li", "text": "shuffle() instead of shuffled()."}, {"type": "a", "text": "shuffle()"}, {"type": "code", "text": "shuffle()"}, {"type": "code", "text": "shuffled()"}, {"type": "li", "text": "reverse() instead of reversed()."}, {"type": "a", "text": "reverse()"}, {"type": "code", "text": "reverse()"}, {"type": "code", "text": "reversed()"}, {"type": "p", "text": "asReversed() called on a mutable list returns another mutable list which is a reversed view of the original list. Changes in that view are reflected in the original list.\nThe following example shows sorting functions for mutable lists:"}, {"type": "a", "text": "asReversed()"}, {"type": "code", "text": "asReversed()"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"two\", \"three\", \"four\")\n\n    numbers.sort()\n    println(\"Sort into ascending: $numbers\")\n    numbers.sortDescending()\n    println(\"Sort into descending: $numbers\")\n\n    numbers.sortBy { it.length }\n    println(\"Sort into ascending by length: $numbers\")\n    numbers.sortByDescending { it.last() }\n    println(\"Sort into descending by the last letter: $numbers\")\n    \n    numbers.sortWith(compareBy<String> { it.length }.thenBy { it })\n    println(\"Sort by Comparator: $numbers\")\n\n    numbers.shuffle()\n    println(\"Shuffle: $numbers\")\n\n    numbers.reverse()\n    println(\"Reverse: $numbers\")\n//sampleEnd\n}\n\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"two\", \"three\", \"four\")\n\n    numbers.sort()\n    println(\"Sort into ascending: $numbers\")\n    numbers.sortDescending()\n    println(\"Sort into descending: $numbers\")\n\n    numbers.sortBy { it.length }\n    println(\"Sort into ascending by length: $numbers\")\n    numbers.sortByDescending { it.last() }\n    println(\"Sort into descending by the last letter: $numbers\")\n    \n    numbers.sortWith(compareBy<String> { it.length }.thenBy { it })\n    println(\"Sort by Comparator: $numbers\")\n\n    numbers.shuffle()\n    println(\"Shuffle: $numbers\")\n\n    numbers.reverse()\n    println(\"Reverse: $numbers\")\n//sampleEnd\n}\n\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"two\", \"three\", \"four\")\n\n    numbers.sort()\n    println(\"Sort into ascending: $numbers\")\n    numbers.sortDescending()\n    println(\"Sort into descending: $numbers\")\n\n    numbers.sortBy { it.length }\n    println(\"Sort into ascending by length: $numbers\")\n    numbers.sortByDescending { it.last() }\n    println(\"Sort into descending by the last letter: $numbers\")\n    \n    numbers.sortWith(compareBy<String> { it.length }.thenBy { it })\n    println(\"Sort by Comparator: $numbers\")\n\n    numbers.shuffle()\n    println(\"Shuffle: $numbers\")\n\n    numbers.reverse()\n    println(\"Reverse: $numbers\")\n//sampleEnd\n}\n\n"}]