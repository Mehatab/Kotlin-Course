[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Null Safety"}, {"type": "h2", "text": "Nullable types and Non-Null Types"}, {"type": "p", "text": "Kotlin's type system is aimed at eliminating the danger of null references from code, also known as the The Billion Dollar Mistake."}, {"type": "a", "text": "The Billion Dollar Mistake"}, {"type": "p", "text": "One of the most common pitfalls in many programming languages, including Java, is that accessing a member of a null reference will result in a null reference exception. In Java this would be the equivalent of a NullPointerException or NPE for short."}, {"type": "code", "text": "NullPointerException"}, {"type": "p", "text": "Kotlin's type system is aimed to eliminate NullPointerException's from our code. The only possible causes of NPE's may be:"}, {"type": "code", "text": "NullPointerException"}, {"type": "ul", "text": "\nAn explicit call to throw NullPointerException();\nUsage of the !! operator that is described below;\nSome data inconsistency with regard to initialization, such as when:\n    \nAn uninitialized this available in a constructor is passed and used somewhere (\"leaking this\");\nA superclass constructor calls an open member whose implementation in the derived class uses uninitialized state;\n\n\nJava interoperation:\n    \nAttempts to access a member on a null reference of a platform type;\nGeneric types used for Java interoperation with incorrect nullability, e.g. a piece of Java code might add null into a Kotlin MutableList<String>, meaning that MutableList<String?> should be used for working with it;\nOther issues caused by external Java code.\n\n\n"}, {"type": "li", "text": "An explicit call to throw NullPointerException();"}, {"type": "code", "text": "throw NullPointerException()"}, {"type": "li", "text": "Usage of the !! operator that is described below;"}, {"type": "code", "text": "!!"}, {"type": "li", "text": "Some data inconsistency with regard to initialization, such as when:\n    \nAn uninitialized this available in a constructor is passed and used somewhere (\"leaking this\");\nA superclass constructor calls an open member whose implementation in the derived class uses uninitialized state;\n\n"}, {"type": "ul", "text": "\nAn uninitialized this available in a constructor is passed and used somewhere (\"leaking this\");\nA superclass constructor calls an open member whose implementation in the derived class uses uninitialized state;\n"}, {"type": "li", "text": "An uninitialized this available in a constructor is passed and used somewhere (\"leaking this\");"}, {"type": "em", "text": "this"}, {"type": "em", "text": "this"}, {"type": "li", "text": "A superclass constructor calls an open member whose implementation in the derived class uses uninitialized state;"}, {"type": "a", "text": "A superclass constructor calls an open member"}, {"type": "li", "text": "Java interoperation:\n    \nAttempts to access a member on a null reference of a platform type;\nGeneric types used for Java interoperation with incorrect nullability, e.g. a piece of Java code might add null into a Kotlin MutableList<String>, meaning that MutableList<String?> should be used for working with it;\nOther issues caused by external Java code.\n\n"}, {"type": "ul", "text": "\nAttempts to access a member on a null reference of a platform type;\nGeneric types used for Java interoperation with incorrect nullability, e.g. a piece of Java code might add null into a Kotlin MutableList<String>, meaning that MutableList<String?> should be used for working with it;\nOther issues caused by external Java code.\n"}, {"type": "li", "text": "Attempts to access a member on a null reference of a platform type;"}, {"type": "code", "text": "null"}, {"type": "a", "text": "platform type"}, {"type": "li", "text": "Generic types used for Java interoperation with incorrect nullability, e.g. a piece of Java code might add null into a Kotlin MutableList<String>, meaning that MutableList<String?> should be used for working with it;"}, {"type": "code", "text": "null"}, {"type": "code", "text": "MutableList<String>"}, {"type": "code", "text": "MutableList<String?>"}, {"type": "li", "text": "Other issues caused by external Java code."}, {"type": "p", "text": "In Kotlin, the type system distinguishes between references that can hold null (nullable references) and those that can not (non-null references).\nFor example, a regular variable of type String can not hold null:"}, {"type": "em", "text": "null"}, {"type": "code", "text": "String"}, {"type": "em", "text": "null"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    var a: String = \"abc\" // Regular initialization means non-null by default\n    a = null // compilation error\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    var a: String = \"abc\" // Regular initialization means non-null by default\n    a = null // compilation error\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    var a: String = \"abc\" // Regular initialization means non-null by default\n    a = null // compilation error\n//sampleEnd\n}\n"}, {"type": "p", "text": "To allow nulls, we can declare a variable as nullable string, written String?:"}, {"type": "code", "text": "String?"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    var b: String? = \"abc\" // can be set null\n    b = null // ok\n    print(b)\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    var b: String? = \"abc\" // can be set null\n    b = null // ok\n    print(b)\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    var b: String? = \"abc\" // can be set null\n    b = null // ok\n    print(b)\n//sampleEnd\n}\n"}, {"type": "p", "text": "Now, if you call a method or access a property on a, it's guaranteed not to cause an NPE, so you can safely say:"}, {"type": "code", "text": "a"}, {"type": "div", "text": "\nval l = a.length\n\n"}, {"type": "pre", "text": "val l = a.length\n"}, {"type": "code", "text": "val l = a.length\n"}, {"type": "p", "text": "But if you want to access the same property on b, that would not be safe, and the compiler reports an error:"}, {"type": "code", "text": "b"}, {"type": "div", "text": "\nval l = b.length // error: variable 'b' can be null\n\n"}, {"type": "pre", "text": "val l = b.length // error: variable 'b' can be null\n"}, {"type": "code", "text": "val l = b.length // error: variable 'b' can be null\n"}, {"type": "p", "text": "But we still need to access that property, right? There are a few ways of doing that."}, {"type": "h2", "text": "Checking for null in conditions"}, {"type": "em", "text": "null"}, {"type": "p", "text": "First, you can explicitly check if b is null, and handle the two options separately:"}, {"type": "code", "text": "b"}, {"type": "em", "text": "null"}, {"type": "div", "text": "\nval l = if (b != null) b.length else -1\n\n"}, {"type": "pre", "text": "val l = if (b != null) b.length else -1\n"}, {"type": "code", "text": "val l = if (b != null) b.length else -1\n"}, {"type": "p", "text": "The compiler tracks the information about the check you performed, and allows the call to length inside the if.\nMore complex conditions are supported as well:"}, {"type": "code", "text": "length"}, {"type": "em", "text": "if"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val b: String? = \"Kotlin\"\n    if (b != null && b.length > 0) {\n        print(\"String of length ${b.length}\")\n    } else {\n        print(\"Empty string\")\n    }\n//sampleEnd\n}\n\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val b: String? = \"Kotlin\"\n    if (b != null && b.length > 0) {\n        print(\"String of length ${b.length}\")\n    } else {\n        print(\"Empty string\")\n    }\n//sampleEnd\n}\n\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val b: String? = \"Kotlin\"\n    if (b != null && b.length > 0) {\n        print(\"String of length ${b.length}\")\n    } else {\n        print(\"Empty string\")\n    }\n//sampleEnd\n}\n\n"}, {"type": "p", "text": "Note that this only works where b is immutable (i.e. a local variable which is not modified between the check and the\nusage or a member val which has a backing field and is not overridable), because otherwise it might\nhappen that b changes to null after the check."}, {"type": "code", "text": "b"}, {"type": "em", "text": "val"}, {"type": "code", "text": "b"}, {"type": "em", "text": "null"}, {"type": "h2", "text": "Safe Calls"}, {"type": "p", "text": "Your second option is the safe call operator, written ?.:"}, {"type": "code", "text": "?."}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val a = \"Kotlin\"\n    val b: String? = null\n    println(b?.length)\n    println(a?.length) // Unnecessary safe call\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val a = \"Kotlin\"\n    val b: String? = null\n    println(b?.length)\n    println(a?.length) // Unnecessary safe call\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val a = \"Kotlin\"\n    val b: String? = null\n    println(b?.length)\n    println(a?.length) // Unnecessary safe call\n//sampleEnd\n}\n"}, {"type": "p", "text": "This returns b.length if b is not null, and null otherwise. The type of this expression is Int?."}, {"type": "code", "text": "b.length"}, {"type": "code", "text": "b"}, {"type": "em", "text": "null"}, {"type": "code", "text": "Int?"}, {"type": "p", "text": "Safe calls are useful in chains. For example, if Bob, an Employee, may be assigned to a Department (or not),\nthat in turn may have another Employee as a department head, then to obtain the name of Bob's department head (if any), we write the following:"}, {"type": "div", "text": "\nbob?.department?.head?.name\n\n"}, {"type": "pre", "text": "bob?.department?.head?.name\n"}, {"type": "code", "text": "bob?.department?.head?.name\n"}, {"type": "p", "text": "Such a chain returns null if any of the properties in it is null."}, {"type": "em", "text": "null"}, {"type": "p", "text": "To perform a certain operation only for non-null values, you can use the safe call operator together with let:"}, {"type": "a", "text": "let"}, {"type": "code", "text": "let"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val listWithNulls: List<String?> = listOf(\"Kotlin\", null)\n    for (item in listWithNulls) {\n         item?.let { println(it) } // prints Kotlin and ignores null\n    }\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val listWithNulls: List<String?> = listOf(\"Kotlin\", null)\n    for (item in listWithNulls) {\n         item?.let { println(it) } // prints Kotlin and ignores null\n    }\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val listWithNulls: List<String?> = listOf(\"Kotlin\", null)\n    for (item in listWithNulls) {\n         item?.let { println(it) } // prints Kotlin and ignores null\n    }\n//sampleEnd\n}\n"}, {"type": "p", "text": "A safe call can also be placed on the left side of an assignment. Then, if one of the receivers in the safe calls chain is null, the assignment is skipped, and the expression on the right is not evaluated at all:"}, {"type": "div", "text": "\n// If either `person` or `person.department` is null, the function is not called:\nperson?.department?.head = managersPool.getManager()\n\n"}, {"type": "pre", "text": "// If either `person` or `person.department` is null, the function is not called:\nperson?.department?.head = managersPool.getManager()\n"}, {"type": "code", "text": "// If either `person` or `person.department` is null, the function is not called:\nperson?.department?.head = managersPool.getManager()\n"}, {"type": "h2", "text": "Elvis Operator"}, {"type": "p", "text": "When we have a nullable reference b, we can say \"if b is not null, use it, otherwise use some non-null value\":"}, {"type": "code", "text": "b"}, {"type": "code", "text": "b"}, {"type": "div", "text": "\nval l: Int = if (b != null) b.length else -1\n\n"}, {"type": "pre", "text": "val l: Int = if (b != null) b.length else -1\n"}, {"type": "code", "text": "val l: Int = if (b != null) b.length else -1\n"}, {"type": "p", "text": "Along with the complete if-expression, this can be expressed with the Elvis operator, written ?::"}, {"type": "em", "text": "if"}, {"type": "code", "text": "?:"}, {"type": "div", "text": "\nval l = b?.length ?: -1\n\n"}, {"type": "pre", "text": "val l = b?.length ?: -1\n"}, {"type": "code", "text": "val l = b?.length ?: -1\n"}, {"type": "p", "text": "If the expression to the left of ?: is not null, the elvis operator returns it, otherwise it returns the expression to the right.\nNote that the right-hand side expression is evaluated only if the left-hand side is null."}, {"type": "code", "text": "?:"}, {"type": "p", "text": "Note that, since throw and return are expressions in Kotlin, they can also be used on\nthe right hand side of the elvis operator. This can be very handy, for example, for checking function arguments:"}, {"type": "em", "text": "throw"}, {"type": "em", "text": "return"}, {"type": "div", "text": "\nfun foo(node: Node): String? {\n    val parent = node.getParent() ?: return null\n    val name = node.getName() ?: throw IllegalArgumentException(\"name expected\")\n    // ...\n}\n\n"}, {"type": "pre", "text": "fun foo(node: Node): String? {\n    val parent = node.getParent() ?: return null\n    val name = node.getName() ?: throw IllegalArgumentException(\"name expected\")\n    // ...\n}\n"}, {"type": "code", "text": "fun foo(node: Node): String? {\n    val parent = node.getParent() ?: return null\n    val name = node.getName() ?: throw IllegalArgumentException(\"name expected\")\n    // ...\n}\n"}, {"type": "h2", "text": "The !! Operator"}, {"type": "code", "text": "!!"}, {"type": "p", "text": "The third option is for NPE-lovers: the not-null assertion operator (!!) converts any value to a non-null\ntype and throws an exception if the value is null. We can write b!!, and this will return a non-null value of b\n(e.g., a String in our example) or throw an NPE if b is null:"}, {"type": "code", "text": "!!"}, {"type": "code", "text": "b!!"}, {"type": "code", "text": "b"}, {"type": "code", "text": "String"}, {"type": "code", "text": "b"}, {"type": "div", "text": "\nval l = b!!.length\n\n"}, {"type": "pre", "text": "val l = b!!.length\n"}, {"type": "code", "text": "val l = b!!.length\n"}, {"type": "p", "text": "Thus, if you want an NPE, you can have it, but you have to ask for it explicitly, and it does not appear out of the blue."}, {"type": "h2", "text": "Safe Casts"}, {"type": "p", "text": "Regular casts may result into a ClassCastException if the object is not of the target type.\nAnother option is to use safe casts that return null if the attempt was not successful:"}, {"type": "code", "text": "ClassCastException"}, {"type": "em", "text": "null"}, {"type": "div", "text": "\nval aInt: Int? = a as? Int\n\n"}, {"type": "pre", "text": "val aInt: Int? = a as? Int\n"}, {"type": "code", "text": "val aInt: Int? = a as? Int\n"}, {"type": "h2", "text": "Collections of Nullable Type"}, {"type": "p", "text": "If you have a collection of elements of a nullable type and want to filter non-null elements, you can do so by using filterNotNull:"}, {"type": "code", "text": "filterNotNull"}, {"type": "div", "text": "\nval nullableList: List<Int?> = listOf(1, 2, null, 4)\nval intList: List<Int> = nullableList.filterNotNull()\n\n"}, {"type": "pre", "text": "val nullableList: List<Int?> = listOf(1, 2, null, 4)\nval intList: List<Int> = nullableList.filterNotNull()\n"}, {"type": "code", "text": "val nullableList: List<Int?> = listOf(1, 2, null, 4)\nval intList: List<Int> = nullableList.filterNotNull()\n"}]