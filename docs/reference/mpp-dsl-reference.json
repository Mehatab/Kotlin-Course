[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Kotlin Multiplatform Gradle DSL Reference"}, {"type": "blockquote", "text": "\nMultiplatform projects are an experimental feature in Kotlin 1.2 and 1.3. All of the language\nand tooling features described in this document are subject to change in future Kotlin versions.\n"}, {"type": "p", "text": "Multiplatform projects are an experimental feature in Kotlin 1.2 and 1.3. All of the language\nand tooling features described in this document are subject to change in future Kotlin versions."}, {"type": "p", "text": "The Kotlin Multiplatform Gradle plugin is a tool for creating Kotlin multiplatform\nprojects. Here we provide a reference of its contents; use it as a reminder when writing Gradle build scripts\nfor Kotlin multiplatform projects. For the concepts of Kotlin multiplatform projects and instructions on writing build scripts\nwith the plugin, see Building Multiplatform Projects with Gradle."}, {"type": "a", "text": "Kotlin multiplatform"}, {"type": "a", "text": "Building Multiplatform Projects with Gradle"}, {"type": "h2", "text": "Table of Contents"}, {"type": "ul", "text": "\nId and version\nTop-level blocks\nTargets\n\nCommon target configuration\nJVM targets\nJavaScript targets\nNative targets\nAndroid targets\n\n\nSource sets\n\nPredefined source sets\nCustom source sets\nSource set parameters\n\n\nCompilations\n\nPredefine compilations\nCustom compilations\nCompilation parameters\n\n\nDependencies\nLanguage settings\n"}, {"type": "li", "text": "Id and version"}, {"type": "a", "text": "Id and version"}, {"type": "li", "text": "Top-level blocks"}, {"type": "a", "text": "Top-level blocks"}, {"type": "li", "text": "Targets\n\nCommon target configuration\nJVM targets\nJavaScript targets\nNative targets\nAndroid targets\n\n"}, {"type": "a", "text": "Targets"}, {"type": "ul", "text": "\nCommon target configuration\nJVM targets\nJavaScript targets\nNative targets\nAndroid targets\n"}, {"type": "li", "text": "Common target configuration"}, {"type": "a", "text": "Common target configuration"}, {"type": "li", "text": "JVM targets"}, {"type": "a", "text": "JVM targets"}, {"type": "li", "text": "JavaScript targets"}, {"type": "a", "text": "JavaScript targets"}, {"type": "li", "text": "Native targets"}, {"type": "a", "text": "Native targets"}, {"type": "li", "text": "Android targets"}, {"type": "a", "text": "Android targets"}, {"type": "li", "text": "Source sets\n\nPredefined source sets\nCustom source sets\nSource set parameters\n\n"}, {"type": "a", "text": "Source sets"}, {"type": "ul", "text": "\nPredefined source sets\nCustom source sets\nSource set parameters\n"}, {"type": "li", "text": "Predefined source sets"}, {"type": "a", "text": "Predefined source sets"}, {"type": "li", "text": "Custom source sets"}, {"type": "a", "text": "Custom source sets"}, {"type": "li", "text": "Source set parameters"}, {"type": "a", "text": "Source set parameters"}, {"type": "li", "text": "Compilations\n\nPredefine compilations\nCustom compilations\nCompilation parameters\n\n"}, {"type": "a", "text": "Compilations"}, {"type": "ul", "text": "\nPredefine compilations\nCustom compilations\nCompilation parameters\n"}, {"type": "li", "text": "Predefine compilations"}, {"type": "a", "text": "Predefine compilations"}, {"type": "li", "text": "Custom compilations"}, {"type": "a", "text": "Custom compilations"}, {"type": "li", "text": "Compilation parameters"}, {"type": "a", "text": "Compilation parameters"}, {"type": "li", "text": "Dependencies"}, {"type": "a", "text": "Dependencies"}, {"type": "li", "text": "Language settings"}, {"type": "a", "text": "Language settings"}, {"type": "h2", "text": "Id and version"}, {"type": "p", "text": "The fully qualified name of the Kotlin Multiplatform Gradle plugin is org.jetbrains.kotlin.multiplatform. \nIf you use the Kotlin Gradle DSL, you can apply the plugin with kotlin(\u201cmultiplatform\u201d).\nThe plugin versions match the Kotlin release versions. The most recent version is 1.3.72."}, {"type": "code", "text": "org.jetbrains.kotlin.multiplatform"}, {"type": "code", "text": "kotlin(\u201cmultiplatform\u201d)"}, {"type": "div", "text": "\n\nplugins {\n    id 'org.jetbrains.kotlin.multiplatform' version '1.3.72'\n}\n\n\n"}, {"type": "div", "text": "\nplugins {\n    id 'org.jetbrains.kotlin.multiplatform' version '1.3.72'\n}\n\n"}, {"type": "pre", "text": "plugins {\n    id 'org.jetbrains.kotlin.multiplatform' version '1.3.72'\n}\n"}, {"type": "code", "text": "plugins {\n    id 'org.jetbrains.kotlin.multiplatform' version '1.3.72'\n}\n"}, {"type": "div", "text": "\n\nplugins {\n    kotlin(\"multiplatform\") version \"1.3.72\"\n}\n\n\n"}, {"type": "div", "text": "\nplugins {\n    kotlin(\"multiplatform\") version \"1.3.72\"\n}\n\n"}, {"type": "pre", "text": "plugins {\n    kotlin(\"multiplatform\") version \"1.3.72\"\n}\n"}, {"type": "code", "text": "plugins {\n    kotlin(\"multiplatform\") version \"1.3.72\"\n}\n"}, {"type": "h2", "text": "Top-level blocks"}, {"type": "p", "text": "kotlin is the top-level block for multiplatform project configuration in the Gradle build script.\nInside kotlin, you can write the following blocks:"}, {"type": "code", "text": "kotlin"}, {"type": "code", "text": "kotlin"}, {"type": "table", "text": "\n\n\nBlock\nDescription\n\n\n\n\n<targetName>\nDeclares a particular target of a project. The names of available targets are listed in the Targets section.\n\n\ntargets\nAll targets of the project.\n\n\npresets\nAll predefined targets. Use this for configuring multiple predefined targets at once.\n\n\nsourceSets\nConfigures predefined and declares custom source sets of the project.\n\n\n"}, {"type": "thead", "text": "\n\nBlock\nDescription\n\n"}, {"type": "tr", "text": "\nBlock\nDescription\n"}, {"type": "th", "text": "Block"}, {"type": "strong", "text": "Block"}, {"type": "th", "text": "Description"}, {"type": "strong", "text": "Description"}, {"type": "tbody", "text": "\n\n<targetName>\nDeclares a particular target of a project. The names of available targets are listed in the Targets section.\n\n\ntargets\nAll targets of the project.\n\n\npresets\nAll predefined targets. Use this for configuring multiple predefined targets at once.\n\n\nsourceSets\nConfigures predefined and declares custom source sets of the project.\n\n"}, {"type": "tr", "text": "\n<targetName>\nDeclares a particular target of a project. The names of available targets are listed in the Targets section.\n"}, {"type": "td", "text": "<targetName>"}, {"type": "em", "text": "<targetName>"}, {"type": "td", "text": "Declares a particular target of a project. The names of available targets are listed in the Targets section."}, {"type": "a", "text": "Targets"}, {"type": "tr", "text": "\ntargets\nAll targets of the project.\n"}, {"type": "td", "text": "targets"}, {"type": "code", "text": "targets"}, {"type": "td", "text": "All targets of the project."}, {"type": "tr", "text": "\npresets\nAll predefined targets. Use this for configuring multiple predefined targets at once.\n"}, {"type": "td", "text": "presets"}, {"type": "code", "text": "presets"}, {"type": "td", "text": "All predefined targets. Use this for configuring multiple predefined targets at once."}, {"type": "a", "text": "configuring multiple predefined targets"}, {"type": "tr", "text": "\nsourceSets\nConfigures predefined and declares custom source sets of the project.\n"}, {"type": "td", "text": "sourceSets"}, {"type": "code", "text": "sourceSets"}, {"type": "td", "text": "Configures predefined and declares custom source sets of the project."}, {"type": "a", "text": "source sets"}, {"type": "h2", "text": "Targets"}, {"type": "p", "text": "Target is a part of the build responsible for compiling, testing, and packaging a piece of software aimed for \none of the supported platforms. The targets of a multiplatform project\n are described in the corresponding blocks inside kotlin, for example, jvm, android, iosArm64.\nThe complete list of available targets is the following:"}, {"type": "em", "text": "Target"}, {"type": "a", "text": "supported platforms"}, {"type": "code", "text": "kotlin"}, {"type": "code", "text": "jvm"}, {"type": "code", "text": "android"}, {"type": "code", "text": "iosArm64"}, {"type": "table", "text": "\n\n\nName\nDescription\n\n\n\n\njvm\nJava Virtual Machine\n\n\njs\nJavaScript\n\n\nandroid\nAndroid (APK)\n\n\nandroidNativeArm32\nAndroid NDK on ARM (ARM32) platforms\n\n\nandroidNativeArm64\nAndroid NDK on ARM64 platforms\n\n\nandroidNativeX86\nAndroid NDK on x86 platforms\n\n\nandroidNativeX64\nAndroid NDK on x86_64 platforms\n\n\niosArm32\nApple iOS on ARM (ARM32) platforms (Apple iPhone 5 and earlier)\n\n\niosArm64\nApple iOS on ARM64 platforms (Apple iPhone 5s and newer)\n\n\niosX64\nApple iOS 64-bit simulator\n\n\nwatchosArm32\nApple watchOS on ARM (ARM32) platforms (Apple Watch Series 3 and earlier)\n\n\nwatchosArm64\nApple watchOS on ARM64_32 platforms (Apple Watch Series 4 and newer)\n\n\nwatchosX86\nApple watchOS simulator\n\n\ntvosArm64\nApple tvOS on ARM64 platforms (Apple TV 4th generation and newer)\n\n\ntvosX64\nApple tvOS simulator\n\n\nlinuxArm64\nLinux on ARM64 platforms, for example, Raspberry Pi\n\n\nlinuxArm32Hfp\nLinux on hard-float ARM (ARM32) platforms\n\n\nlinuxMips32\nLinux on MIPS platforms\n\n\nlinuxMipsel32\nLinux on little-endian MIPS (mipsel) platforms\n\n\nlinuxX64\nLinux on x86_64 platforms\n\n\nmacosX64\nApple macOS\n\n\nmingwX64\n64-bit Microsoft Windows\n\n\nmingwX86\n32-bit Microsoft Windows\n\n\nwasm32\nWebAssembly\n\n\n"}, {"type": "thead", "text": "\n\nName\nDescription\n\n"}, {"type": "tr", "text": "\nName\nDescription\n"}, {"type": "th", "text": "Name"}, {"type": "strong", "text": "Name"}, {"type": "th", "text": "Description"}, {"type": "strong", "text": "Description"}, {"type": "tbody", "text": "\n\njvm\nJava Virtual Machine\n\n\njs\nJavaScript\n\n\nandroid\nAndroid (APK)\n\n\nandroidNativeArm32\nAndroid NDK on ARM (ARM32) platforms\n\n\nandroidNativeArm64\nAndroid NDK on ARM64 platforms\n\n\nandroidNativeX86\nAndroid NDK on x86 platforms\n\n\nandroidNativeX64\nAndroid NDK on x86_64 platforms\n\n\niosArm32\nApple iOS on ARM (ARM32) platforms (Apple iPhone 5 and earlier)\n\n\niosArm64\nApple iOS on ARM64 platforms (Apple iPhone 5s and newer)\n\n\niosX64\nApple iOS 64-bit simulator\n\n\nwatchosArm32\nApple watchOS on ARM (ARM32) platforms (Apple Watch Series 3 and earlier)\n\n\nwatchosArm64\nApple watchOS on ARM64_32 platforms (Apple Watch Series 4 and newer)\n\n\nwatchosX86\nApple watchOS simulator\n\n\ntvosArm64\nApple tvOS on ARM64 platforms (Apple TV 4th generation and newer)\n\n\ntvosX64\nApple tvOS simulator\n\n\nlinuxArm64\nLinux on ARM64 platforms, for example, Raspberry Pi\n\n\nlinuxArm32Hfp\nLinux on hard-float ARM (ARM32) platforms\n\n\nlinuxMips32\nLinux on MIPS platforms\n\n\nlinuxMipsel32\nLinux on little-endian MIPS (mipsel) platforms\n\n\nlinuxX64\nLinux on x86_64 platforms\n\n\nmacosX64\nApple macOS\n\n\nmingwX64\n64-bit Microsoft Windows\n\n\nmingwX86\n32-bit Microsoft Windows\n\n\nwasm32\nWebAssembly\n\n"}, {"type": "tr", "text": "\njvm\nJava Virtual Machine\n"}, {"type": "td", "text": "jvm"}, {"type": "code", "text": "jvm"}, {"type": "td", "text": "Java Virtual Machine"}, {"type": "tr", "text": "\njs\nJavaScript\n"}, {"type": "td", "text": "js"}, {"type": "code", "text": "js"}, {"type": "td", "text": "JavaScript"}, {"type": "tr", "text": "\nandroid\nAndroid (APK)\n"}, {"type": "td", "text": "android"}, {"type": "code", "text": "android"}, {"type": "td", "text": "Android (APK)"}, {"type": "tr", "text": "\nandroidNativeArm32\nAndroid NDK on ARM (ARM32) platforms\n"}, {"type": "td", "text": "androidNativeArm32"}, {"type": "code", "text": "androidNativeArm32"}, {"type": "td", "text": "Android NDK on ARM (ARM32) platforms"}, {"type": "a", "text": "Android NDK"}, {"type": "tr", "text": "\nandroidNativeArm64\nAndroid NDK on ARM64 platforms\n"}, {"type": "td", "text": "androidNativeArm64"}, {"type": "code", "text": "androidNativeArm64"}, {"type": "td", "text": "Android NDK on ARM64 platforms"}, {"type": "a", "text": "Android NDK"}, {"type": "tr", "text": "\nandroidNativeX86\nAndroid NDK on x86 platforms\n"}, {"type": "td", "text": "androidNativeX86"}, {"type": "code", "text": "androidNativeX86"}, {"type": "td", "text": "Android NDK on x86 platforms"}, {"type": "a", "text": "Android NDK"}, {"type": "tr", "text": "\nandroidNativeX64\nAndroid NDK on x86_64 platforms\n"}, {"type": "td", "text": "androidNativeX64"}, {"type": "code", "text": "androidNativeX64"}, {"type": "td", "text": "Android NDK on x86_64 platforms"}, {"type": "a", "text": "Android NDK"}, {"type": "tr", "text": "\niosArm32\nApple iOS on ARM (ARM32) platforms (Apple iPhone 5 and earlier)\n"}, {"type": "td", "text": "iosArm32"}, {"type": "code", "text": "iosArm32"}, {"type": "td", "text": "Apple iOS on ARM (ARM32) platforms (Apple iPhone 5 and earlier)"}, {"type": "tr", "text": "\niosArm64\nApple iOS on ARM64 platforms (Apple iPhone 5s and newer)\n"}, {"type": "td", "text": "iosArm64"}, {"type": "code", "text": "iosArm64"}, {"type": "td", "text": "Apple iOS on ARM64 platforms (Apple iPhone 5s and newer)"}, {"type": "tr", "text": "\niosX64\nApple iOS 64-bit simulator\n"}, {"type": "td", "text": "iosX64"}, {"type": "code", "text": "iosX64"}, {"type": "td", "text": "Apple iOS 64-bit simulator"}, {"type": "tr", "text": "\nwatchosArm32\nApple watchOS on ARM (ARM32) platforms (Apple Watch Series 3 and earlier)\n"}, {"type": "td", "text": "watchosArm32"}, {"type": "code", "text": "watchosArm32"}, {"type": "td", "text": "Apple watchOS on ARM (ARM32) platforms (Apple Watch Series 3 and earlier)"}, {"type": "tr", "text": "\nwatchosArm64\nApple watchOS on ARM64_32 platforms (Apple Watch Series 4 and newer)\n"}, {"type": "td", "text": "watchosArm64"}, {"type": "code", "text": "watchosArm64"}, {"type": "td", "text": "Apple watchOS on ARM64_32 platforms (Apple Watch Series 4 and newer)"}, {"type": "tr", "text": "\nwatchosX86\nApple watchOS simulator\n"}, {"type": "td", "text": "watchosX86"}, {"type": "code", "text": "watchosX86"}, {"type": "td", "text": "Apple watchOS simulator"}, {"type": "tr", "text": "\ntvosArm64\nApple tvOS on ARM64 platforms (Apple TV 4th generation and newer)\n"}, {"type": "td", "text": "tvosArm64"}, {"type": "code", "text": "tvosArm64"}, {"type": "td", "text": "Apple tvOS on ARM64 platforms (Apple TV 4th generation and newer)"}, {"type": "tr", "text": "\ntvosX64\nApple tvOS simulator\n"}, {"type": "td", "text": "tvosX64"}, {"type": "code", "text": "tvosX64"}, {"type": "td", "text": "Apple tvOS simulator"}, {"type": "tr", "text": "\nlinuxArm64\nLinux on ARM64 platforms, for example, Raspberry Pi\n"}, {"type": "td", "text": "linuxArm64"}, {"type": "code", "text": "linuxArm64"}, {"type": "td", "text": "Linux on ARM64 platforms, for example, Raspberry Pi"}, {"type": "tr", "text": "\nlinuxArm32Hfp\nLinux on hard-float ARM (ARM32) platforms\n"}, {"type": "td", "text": "linuxArm32Hfp"}, {"type": "code", "text": "linuxArm32Hfp"}, {"type": "td", "text": "Linux on hard-float ARM (ARM32) platforms"}, {"type": "tr", "text": "\nlinuxMips32\nLinux on MIPS platforms\n"}, {"type": "td", "text": "linuxMips32"}, {"type": "code", "text": "linuxMips32"}, {"type": "td", "text": "Linux on MIPS platforms"}, {"type": "tr", "text": "\nlinuxMipsel32\nLinux on little-endian MIPS (mipsel) platforms\n"}, {"type": "td", "text": "linuxMipsel32"}, {"type": "code", "text": "linuxMipsel32"}, {"type": "td", "text": "Linux on little-endian MIPS (mipsel) platforms"}, {"type": "tr", "text": "\nlinuxX64\nLinux on x86_64 platforms\n"}, {"type": "td", "text": "linuxX64"}, {"type": "code", "text": "linuxX64"}, {"type": "td", "text": "Linux on x86_64 platforms"}, {"type": "tr", "text": "\nmacosX64\nApple macOS\n"}, {"type": "td", "text": "macosX64"}, {"type": "code", "text": "macosX64"}, {"type": "td", "text": "Apple macOS"}, {"type": "tr", "text": "\nmingwX64\n64-bit Microsoft Windows\n"}, {"type": "td", "text": "mingwX64"}, {"type": "code", "text": "mingwX64"}, {"type": "td", "text": "64-bit Microsoft Windows"}, {"type": "tr", "text": "\nmingwX86\n32-bit Microsoft Windows\n"}, {"type": "td", "text": "mingwX86"}, {"type": "code", "text": "mingwX86"}, {"type": "td", "text": "32-bit Microsoft Windows"}, {"type": "tr", "text": "\nwasm32\nWebAssembly\n"}, {"type": "td", "text": "wasm32"}, {"type": "code", "text": "wasm32"}, {"type": "td", "text": "WebAssembly"}, {"type": "div", "text": "\nkotlin {\n    jvm()\n    iosX64()\n    macosX64()\n    js().browser()\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    jvm()\n    iosX64()\n    macosX64()\n    js().browser()\n}\n"}, {"type": "code", "text": "kotlin {\n    jvm()\n    iosX64()\n    macosX64()\n    js().browser()\n}\n"}, {"type": "p", "text": "Configuration of a target can include two parts:"}, {"type": "ul", "text": "\nCommon configuration available for all targets.\nTarget-specific configuration.\n"}, {"type": "li", "text": "Common configuration available for all targets."}, {"type": "a", "text": "Common configuration"}, {"type": "li", "text": "Target-specific configuration."}, {"type": "h3", "text": "Common target configuration"}, {"type": "p", "text": "In any target block, you can use the following declarations:"}, {"type": "table", "text": "\n\n\nName\nDescription\n\n\n\n\nattributes\nAttributes used for disambiguating targets for a single platform.\n\n\npreset\nThe preset that the target has been created from, if any.\n\n\nplatformType\nDesignates the Kotlin platform of this target. Avaiable values: jvm, androidJvm, js, native, common.\n\n\nartifactsTaskName\nThe name of the task that builds the resulting artifacts of this target.\n\n\ncomponents\nThe components used to setup Gradle publications.\n\n\n"}, {"type": "thead", "text": "\n\nName\nDescription\n\n"}, {"type": "tr", "text": "\nName\nDescription\n"}, {"type": "th", "text": "Name"}, {"type": "strong", "text": "Name"}, {"type": "th", "text": "Description"}, {"type": "strong", "text": "Description"}, {"type": "tbody", "text": "\n\nattributes\nAttributes used for disambiguating targets for a single platform.\n\n\npreset\nThe preset that the target has been created from, if any.\n\n\nplatformType\nDesignates the Kotlin platform of this target. Avaiable values: jvm, androidJvm, js, native, common.\n\n\nartifactsTaskName\nThe name of the task that builds the resulting artifacts of this target.\n\n\ncomponents\nThe components used to setup Gradle publications.\n\n"}, {"type": "tr", "text": "\nattributes\nAttributes used for disambiguating targets for a single platform.\n"}, {"type": "td", "text": "attributes"}, {"type": "code", "text": "attributes"}, {"type": "td", "text": "Attributes used for disambiguating targets for a single platform."}, {"type": "a", "text": "disambiguating targets"}, {"type": "tr", "text": "\npreset\nThe preset that the target has been created from, if any.\n"}, {"type": "td", "text": "preset"}, {"type": "code", "text": "preset"}, {"type": "td", "text": "The preset that the target has been created from, if any."}, {"type": "tr", "text": "\nplatformType\nDesignates the Kotlin platform of this target. Avaiable values: jvm, androidJvm, js, native, common.\n"}, {"type": "td", "text": "platformType"}, {"type": "code", "text": "platformType"}, {"type": "td", "text": "Designates the Kotlin platform of this target. Avaiable values: jvm, androidJvm, js, native, common."}, {"type": "code", "text": "jvm"}, {"type": "code", "text": "androidJvm"}, {"type": "code", "text": "js"}, {"type": "code", "text": "native"}, {"type": "code", "text": "common"}, {"type": "tr", "text": "\nartifactsTaskName\nThe name of the task that builds the resulting artifacts of this target.\n"}, {"type": "td", "text": "artifactsTaskName"}, {"type": "code", "text": "artifactsTaskName"}, {"type": "td", "text": "The name of the task that builds the resulting artifacts of this target."}, {"type": "tr", "text": "\ncomponents\nThe components used to setup Gradle publications.\n"}, {"type": "td", "text": "components"}, {"type": "code", "text": "components"}, {"type": "td", "text": "The components used to setup Gradle publications."}, {"type": "h3", "text": "JVM targets"}, {"type": "p", "text": "In addition to common target configuration, jvm targets have a specific function:"}, {"type": "a", "text": "common target configuration"}, {"type": "table", "text": "\n\n\nName\nDescription\n\n\n\n\nwithJava()\nIncludes Java sources into the JVM target\u2019s compilations.\n\n\n"}, {"type": "thead", "text": "\n\nName\nDescription\n\n"}, {"type": "tr", "text": "\nName\nDescription\n"}, {"type": "th", "text": "Name"}, {"type": "strong", "text": "Name"}, {"type": "th", "text": "Description"}, {"type": "strong", "text": "Description"}, {"type": "tbody", "text": "\n\nwithJava()\nIncludes Java sources into the JVM target\u2019s compilations.\n\n"}, {"type": "tr", "text": "\nwithJava()\nIncludes Java sources into the JVM target\u2019s compilations.\n"}, {"type": "td", "text": "withJava()"}, {"type": "code", "text": "withJava()"}, {"type": "td", "text": "Includes Java sources into the JVM target\u2019s compilations."}, {"type": "p", "text": "Use this function for projects that contain both Java and Kotlin source files. Note that the default source directories for Java sources\ndon't follow the Java plugin's defaults. Instead, they are derived from the Kotlin source sets. For example, if the JVM target\nhas the default name jvm, the paths are src/jvmMain/java (for production Java sources) and src/jvmTest/java for test Java sources.\nFor more information, see Java support in JVM targets."}, {"type": "code", "text": "jvm"}, {"type": "code", "text": "src/jvmMain/java"}, {"type": "code", "text": "src/jvmTest/java"}, {"type": "a", "text": "Java support in JVM targets"}, {"type": "div", "text": "\nkotlin {\n    jvm {\n        withJava()\n    } \n}\n\n"}, {"type": "pre", "text": "kotlin {\n    jvm {\n        withJava()\n    } \n}\n"}, {"type": "code", "text": "kotlin {\n    jvm {\n        withJava()\n    } \n}\n"}, {"type": "h3", "text": "JavaScript targets"}, {"type": "p", "text": "The js block describes the configuration of JavaScript targets. It can contain one of two blocks depending on the target execution environment:"}, {"type": "code", "text": "js"}, {"type": "table", "text": "\n\n\nName\nDescription\n\n\n\n\nbrowser\nConfiguration of the browser target.\n\n\nnodejs\nConfiguration of the Node.js target.\n\n\n"}, {"type": "thead", "text": "\n\nName\nDescription\n\n"}, {"type": "tr", "text": "\nName\nDescription\n"}, {"type": "th", "text": "Name"}, {"type": "strong", "text": "Name"}, {"type": "th", "text": "Description"}, {"type": "strong", "text": "Description"}, {"type": "tbody", "text": "\n\nbrowser\nConfiguration of the browser target.\n\n\nnodejs\nConfiguration of the Node.js target.\n\n"}, {"type": "tr", "text": "\nbrowser\nConfiguration of the browser target.\n"}, {"type": "td", "text": "browser"}, {"type": "code", "text": "browser"}, {"type": "td", "text": "Configuration of the browser target."}, {"type": "tr", "text": "\nnodejs\nConfiguration of the Node.js target.\n"}, {"type": "td", "text": "nodejs"}, {"type": "code", "text": "nodejs"}, {"type": "td", "text": "Configuration of the Node.js target."}, {"type": "p", "text": "For details about configuring Kotlin/JS projects, see Setting up a Kotlin/JS project."}, {"type": "a", "text": "Setting up a Kotlin/JS project"}, {"type": "h4", "text": "Browser"}, {"type": "p", "text": "browser can contain the following configuration blocks:"}, {"type": "code", "text": "browser"}, {"type": "table", "text": "\n\n\nName\nDescription\n\n\n\n\ntestRuns\nConfiguration of test execution.\n\n\nrunTask\nConfiguration of project running.\n\n\nwebpackTask\nConfiguration of project bundling with Webpack.\n\n\ndceTask\nConfiguration of Dead Code Elimination.\n\n\ndistribution\nPath to output files.\n\n\n"}, {"type": "thead", "text": "\n\nName\nDescription\n\n"}, {"type": "tr", "text": "\nName\nDescription\n"}, {"type": "th", "text": "Name"}, {"type": "strong", "text": "Name"}, {"type": "th", "text": "Description"}, {"type": "strong", "text": "Description"}, {"type": "tbody", "text": "\n\ntestRuns\nConfiguration of test execution.\n\n\nrunTask\nConfiguration of project running.\n\n\nwebpackTask\nConfiguration of project bundling with Webpack.\n\n\ndceTask\nConfiguration of Dead Code Elimination.\n\n\ndistribution\nPath to output files.\n\n"}, {"type": "tr", "text": "\ntestRuns\nConfiguration of test execution.\n"}, {"type": "td", "text": "testRuns"}, {"type": "code", "text": "testRuns"}, {"type": "td", "text": "Configuration of test execution."}, {"type": "tr", "text": "\nrunTask\nConfiguration of project running.\n"}, {"type": "td", "text": "runTask"}, {"type": "code", "text": "runTask"}, {"type": "td", "text": "Configuration of project running."}, {"type": "tr", "text": "\nwebpackTask\nConfiguration of project bundling with Webpack.\n"}, {"type": "td", "text": "webpackTask"}, {"type": "code", "text": "webpackTask"}, {"type": "td", "text": "Configuration of project bundling with Webpack."}, {"type": "a", "text": "Webpack"}, {"type": "tr", "text": "\ndceTask\nConfiguration of Dead Code Elimination.\n"}, {"type": "td", "text": "dceTask"}, {"type": "code", "text": "dceTask"}, {"type": "td", "text": "Configuration of Dead Code Elimination."}, {"type": "a", "text": "Dead Code Elimination"}, {"type": "tr", "text": "\ndistribution\nPath to output files.\n"}, {"type": "td", "text": "distribution"}, {"type": "code", "text": "distribution"}, {"type": "td", "text": "Path to output files."}, {"type": "div", "text": "\nkotlin {\n    js().browser {\n        webpackTask { /* ... */ }\n        testRuns { /* ... */ }\n        dceTask {\n            keep(\"myKotlinJsApplication.org.example.keepFromDce\")\n        }\n        distribution {\n            directory = File(\"$projectDir/customdir/\")\n        }        \n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    js().browser {\n        webpackTask { /* ... */ }\n        testRuns { /* ... */ }\n        dceTask {\n            keep(\"myKotlinJsApplication.org.example.keepFromDce\")\n        }\n        distribution {\n            directory = File(\"$projectDir/customdir/\")\n        }        \n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    js().browser {\n        webpackTask { /* ... */ }\n        testRuns { /* ... */ }\n        dceTask {\n            keep(\"myKotlinJsApplication.org.example.keepFromDce\")\n        }\n        distribution {\n            directory = File(\"$projectDir/customdir/\")\n        }        \n    }\n}\n"}, {"type": "h4", "text": "Node.js"}, {"type": "p", "text": "nodejs can contain configurations of test and run tasks:"}, {"type": "code", "text": "nodejs"}, {"type": "table", "text": "\n\n\nName\nDescription\n\n\n\n\ntestRuns\nConfiguration of test execution.\n\n\nrunTask\nConfiguration of project running.\n\n\n"}, {"type": "thead", "text": "\n\nName\nDescription\n\n"}, {"type": "tr", "text": "\nName\nDescription\n"}, {"type": "th", "text": "Name"}, {"type": "strong", "text": "Name"}, {"type": "th", "text": "Description"}, {"type": "strong", "text": "Description"}, {"type": "tbody", "text": "\n\ntestRuns\nConfiguration of test execution.\n\n\nrunTask\nConfiguration of project running.\n\n"}, {"type": "tr", "text": "\ntestRuns\nConfiguration of test execution.\n"}, {"type": "td", "text": "testRuns"}, {"type": "code", "text": "testRuns"}, {"type": "td", "text": "Configuration of test execution."}, {"type": "tr", "text": "\nrunTask\nConfiguration of project running.\n"}, {"type": "td", "text": "runTask"}, {"type": "code", "text": "runTask"}, {"type": "td", "text": "Configuration of project running."}, {"type": "div", "text": "\nkotlin {\n    js().nodejs {\n        runTask { /* ... */ }\n        testRuns { /* ... */ }\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    js().nodejs {\n        runTask { /* ... */ }\n        testRuns { /* ... */ }\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    js().nodejs {\n        runTask { /* ... */ }\n        testRuns { /* ... */ }\n    }\n}\n"}, {"type": "h3", "text": "Native targets"}, {"type": "p", "text": "For native targets, the following specific blocks are available:"}, {"type": "table", "text": "\n\n\nName\nDescription\n\n\n\n\nbinaries\nConfiguration of binaries to produce.\n\n\ncinterops\nConfiguration of interop with C libraries.\n\n\n"}, {"type": "thead", "text": "\n\nName\nDescription\n\n"}, {"type": "tr", "text": "\nName\nDescription\n"}, {"type": "th", "text": "Name"}, {"type": "strong", "text": "Name"}, {"type": "th", "text": "Description"}, {"type": "strong", "text": "Description"}, {"type": "tbody", "text": "\n\nbinaries\nConfiguration of binaries to produce.\n\n\ncinterops\nConfiguration of interop with C libraries.\n\n"}, {"type": "tr", "text": "\nbinaries\nConfiguration of binaries to produce.\n"}, {"type": "td", "text": "binaries"}, {"type": "code", "text": "binaries"}, {"type": "td", "text": "Configuration of binaries to produce."}, {"type": "a", "text": "binaries"}, {"type": "tr", "text": "\ncinterops\nConfiguration of interop with C libraries.\n"}, {"type": "td", "text": "cinterops"}, {"type": "code", "text": "cinterops"}, {"type": "td", "text": "Configuration of interop with C libraries."}, {"type": "a", "text": "interop with C libraries"}, {"type": "h4", "text": "Binaries"}, {"type": "p", "text": "There are the following kinds of binaries:"}, {"type": "table", "text": "\n\n\nName\nDescription\n\n\n\n\nexecutable\nProduct executable.\n\n\ntest\nTest executable.\n\n\nsharedLib\nShared library.\n\n\nstaticLib\nStatic library.\n\n\nframework\nObjective-C framework.\n\n\n"}, {"type": "thead", "text": "\n\nName\nDescription\n\n"}, {"type": "tr", "text": "\nName\nDescription\n"}, {"type": "th", "text": "Name"}, {"type": "strong", "text": "Name"}, {"type": "th", "text": "Description"}, {"type": "strong", "text": "Description"}, {"type": "tbody", "text": "\n\nexecutable\nProduct executable.\n\n\ntest\nTest executable.\n\n\nsharedLib\nShared library.\n\n\nstaticLib\nStatic library.\n\n\nframework\nObjective-C framework.\n\n"}, {"type": "tr", "text": "\nexecutable\nProduct executable.\n"}, {"type": "td", "text": "executable"}, {"type": "code", "text": "executable"}, {"type": "td", "text": "Product executable."}, {"type": "tr", "text": "\ntest\nTest executable.\n"}, {"type": "td", "text": "test"}, {"type": "code", "text": "test"}, {"type": "td", "text": "Test executable."}, {"type": "tr", "text": "\nsharedLib\nShared library.\n"}, {"type": "td", "text": "sharedLib"}, {"type": "code", "text": "sharedLib"}, {"type": "td", "text": "Shared library."}, {"type": "tr", "text": "\nstaticLib\nStatic library.\n"}, {"type": "td", "text": "staticLib"}, {"type": "code", "text": "staticLib"}, {"type": "td", "text": "Static library."}, {"type": "tr", "text": "\nframework\nObjective-C framework.\n"}, {"type": "td", "text": "framework"}, {"type": "code", "text": "framework"}, {"type": "td", "text": "Objective-C framework."}, {"type": "div", "text": "\nkotlin {\n    linuxX64 { // Use your target instead.\n        binaries {\n            executable {\n                // Binary configuration.\n            }\n        }\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    linuxX64 { // Use your target instead.\n        binaries {\n            executable {\n                // Binary configuration.\n            }\n        }\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    linuxX64 { // Use your target instead.\n        binaries {\n            executable {\n                // Binary configuration.\n            }\n        }\n    }\n}\n"}, {"type": "p", "text": "For binaries configuration, the following parameters are available:"}, {"type": "table", "text": "\n\n\nName\nDescription\n\n\n\n\ncompilation\nThe compilation from which the binary is built. By default, test binaries are based on the test compilation while other binaries - on the main compilation.\n\n\nlinkerOpts\nOptions passed to a system linker during binary building.\n\n\nbaseName\nCustom base name for the output file. The final file name will be formed by adding system-dependent prefix and postfix to this base name.\n\n\nentryPoint\nThe entry point function for executable binaries. By default, it's main() in the root package.\n\n\noutputFile\nAccess to the output file.\n\n\nlinkTask\nAccess to the link task.\n\n\nrunTask\nAccess to the run task for executable binaries. For targets other than linuxX64, macosX64, or mingwX64 the value is null.\n\n\nisStatic\nFor Objective-C frameworks. Includes a static library instead of a dynamic one.\n\n\n"}, {"type": "thead", "text": "\n\nName\nDescription\n\n"}, {"type": "tr", "text": "\nName\nDescription\n"}, {"type": "th", "text": "Name"}, {"type": "strong", "text": "Name"}, {"type": "th", "text": "Description"}, {"type": "strong", "text": "Description"}, {"type": "tbody", "text": "\n\ncompilation\nThe compilation from which the binary is built. By default, test binaries are based on the test compilation while other binaries - on the main compilation.\n\n\nlinkerOpts\nOptions passed to a system linker during binary building.\n\n\nbaseName\nCustom base name for the output file. The final file name will be formed by adding system-dependent prefix and postfix to this base name.\n\n\nentryPoint\nThe entry point function for executable binaries. By default, it's main() in the root package.\n\n\noutputFile\nAccess to the output file.\n\n\nlinkTask\nAccess to the link task.\n\n\nrunTask\nAccess to the run task for executable binaries. For targets other than linuxX64, macosX64, or mingwX64 the value is null.\n\n\nisStatic\nFor Objective-C frameworks. Includes a static library instead of a dynamic one.\n\n"}, {"type": "tr", "text": "\ncompilation\nThe compilation from which the binary is built. By default, test binaries are based on the test compilation while other binaries - on the main compilation.\n"}, {"type": "td", "text": "compilation"}, {"type": "code", "text": "compilation"}, {"type": "td", "text": "The compilation from which the binary is built. By default, test binaries are based on the test compilation while other binaries - on the main compilation."}, {"type": "code", "text": "test"}, {"type": "code", "text": "test"}, {"type": "code", "text": "main"}, {"type": "tr", "text": "\nlinkerOpts\nOptions passed to a system linker during binary building.\n"}, {"type": "td", "text": "linkerOpts"}, {"type": "code", "text": "linkerOpts"}, {"type": "td", "text": "Options passed to a system linker during binary building."}, {"type": "tr", "text": "\nbaseName\nCustom base name for the output file. The final file name will be formed by adding system-dependent prefix and postfix to this base name.\n"}, {"type": "td", "text": "baseName"}, {"type": "code", "text": "baseName"}, {"type": "td", "text": "Custom base name for the output file. The final file name will be formed by adding system-dependent prefix and postfix to this base name."}, {"type": "tr", "text": "\nentryPoint\nThe entry point function for executable binaries. By default, it's main() in the root package.\n"}, {"type": "td", "text": "entryPoint"}, {"type": "code", "text": "entryPoint"}, {"type": "td", "text": "The entry point function for executable binaries. By default, it's main() in the root package."}, {"type": "code", "text": "main()"}, {"type": "tr", "text": "\noutputFile\nAccess to the output file.\n"}, {"type": "td", "text": "outputFile"}, {"type": "code", "text": "outputFile"}, {"type": "td", "text": "Access to the output file."}, {"type": "tr", "text": "\nlinkTask\nAccess to the link task.\n"}, {"type": "td", "text": "linkTask"}, {"type": "code", "text": "linkTask"}, {"type": "td", "text": "Access to the link task."}, {"type": "tr", "text": "\nrunTask\nAccess to the run task for executable binaries. For targets other than linuxX64, macosX64, or mingwX64 the value is null.\n"}, {"type": "td", "text": "runTask"}, {"type": "code", "text": "runTask"}, {"type": "td", "text": "Access to the run task for executable binaries. For targets other than linuxX64, macosX64, or mingwX64 the value is null."}, {"type": "code", "text": "linuxX64"}, {"type": "code", "text": "macosX64"}, {"type": "code", "text": "mingwX64"}, {"type": "code", "text": "null"}, {"type": "tr", "text": "\nisStatic\nFor Objective-C frameworks. Includes a static library instead of a dynamic one.\n"}, {"type": "td", "text": "isStatic"}, {"type": "code", "text": "isStatic"}, {"type": "td", "text": "For Objective-C frameworks. Includes a static library instead of a dynamic one."}, {"type": "div", "text": "\n\nbinaries {\n    executable('my_executable', [RELEASE]) {\n        // Build a binary on the basis of the test compilation.\n        compilation = compilations.test\n\n        // Custom command line options for the linker.\n        linkerOpts = ['-L/lib/search/path', '-L/another/search/path', '-lmylib']\n\n        // Base name for the output file.\n        baseName = 'foo'\n\n        // Custom entry point function.\n        entryPoint = 'org.example.main'\n\n        // Accessing the output file.\n        println(\"Executable path: ${outputFile.absolutePath}\")\n\n        // Accessing the link task.\n        linkTask.dependsOn(additionalPreprocessingTask)\n\n        // Accessing the run task.\n        // Note that the runTask is null for non-host platforms.\n        runTask?.dependsOn(prepareForRun)\n    }\n\n    framework('my_framework' [RELEASE]) {\n        // Include a static library instead of a dynamic one into the framework.\n        isStatic = true\n    }\n}\n\n\n"}, {"type": "div", "text": "\nbinaries {\n    executable('my_executable', [RELEASE]) {\n        // Build a binary on the basis of the test compilation.\n        compilation = compilations.test\n\n        // Custom command line options for the linker.\n        linkerOpts = ['-L/lib/search/path', '-L/another/search/path', '-lmylib']\n\n        // Base name for the output file.\n        baseName = 'foo'\n\n        // Custom entry point function.\n        entryPoint = 'org.example.main'\n\n        // Accessing the output file.\n        println(\"Executable path: ${outputFile.absolutePath}\")\n\n        // Accessing the link task.\n        linkTask.dependsOn(additionalPreprocessingTask)\n\n        // Accessing the run task.\n        // Note that the runTask is null for non-host platforms.\n        runTask?.dependsOn(prepareForRun)\n    }\n\n    framework('my_framework' [RELEASE]) {\n        // Include a static library instead of a dynamic one into the framework.\n        isStatic = true\n    }\n}\n\n"}, {"type": "pre", "text": "binaries {\n    executable('my_executable', [RELEASE]) {\n        // Build a binary on the basis of the test compilation.\n        compilation = compilations.test\n\n        // Custom command line options for the linker.\n        linkerOpts = ['-L/lib/search/path', '-L/another/search/path', '-lmylib']\n\n        // Base name for the output file.\n        baseName = 'foo'\n\n        // Custom entry point function.\n        entryPoint = 'org.example.main'\n\n        // Accessing the output file.\n        println(\"Executable path: ${outputFile.absolutePath}\")\n\n        // Accessing the link task.\n        linkTask.dependsOn(additionalPreprocessingTask)\n\n        // Accessing the run task.\n        // Note that the runTask is null for non-host platforms.\n        runTask?.dependsOn(prepareForRun)\n    }\n\n    framework('my_framework' [RELEASE]) {\n        // Include a static library instead of a dynamic one into the framework.\n        isStatic = true\n    }\n}\n"}, {"type": "code", "text": "binaries {\n    executable('my_executable', [RELEASE]) {\n        // Build a binary on the basis of the test compilation.\n        compilation = compilations.test\n\n        // Custom command line options for the linker.\n        linkerOpts = ['-L/lib/search/path', '-L/another/search/path', '-lmylib']\n\n        // Base name for the output file.\n        baseName = 'foo'\n\n        // Custom entry point function.\n        entryPoint = 'org.example.main'\n\n        // Accessing the output file.\n        println(\"Executable path: ${outputFile.absolutePath}\")\n\n        // Accessing the link task.\n        linkTask.dependsOn(additionalPreprocessingTask)\n\n        // Accessing the run task.\n        // Note that the runTask is null for non-host platforms.\n        runTask?.dependsOn(prepareForRun)\n    }\n\n    framework('my_framework' [RELEASE]) {\n        // Include a static library instead of a dynamic one into the framework.\n        isStatic = true\n    }\n}\n"}, {"type": "div", "text": "\n\nbinaries {\n    executable(\"my_executable\", listOf(RELEASE)) {\n        // Build a binary on the basis of the test compilation.\n        compilation = compilations[\"test\"]\n\n        // Custom command line options for the linker.\n        linkerOpts = mutableListOf(\"-L/lib/search/path\", \"-L/another/search/path\", \"-lmylib\")\n\n        // Base name for the output file.\n        baseName = \"foo\"\n\n        // Custom entry point function.\n        entryPoint = \"org.example.main\"\n\n        // Accessing the output file.\n        println(\"Executable path: ${outputFile.absolutePath}\")\n\n        // Accessing the link task.\n        linkTask.dependsOn(additionalPreprocessingTask)\n\n        // Accessing the run task.\n        // Note that the runTask is null for non-host platforms.\n        runTask?.dependsOn(prepareForRun)\n    }\n\n    framework(\"my_framework\" listOf(RELEASE)) {\n        // Include a static library instead of a dynamic one into the framework.\n        isStatic = true\n    }\n}\n\n\n"}, {"type": "div", "text": "\nbinaries {\n    executable(\"my_executable\", listOf(RELEASE)) {\n        // Build a binary on the basis of the test compilation.\n        compilation = compilations[\"test\"]\n\n        // Custom command line options for the linker.\n        linkerOpts = mutableListOf(\"-L/lib/search/path\", \"-L/another/search/path\", \"-lmylib\")\n\n        // Base name for the output file.\n        baseName = \"foo\"\n\n        // Custom entry point function.\n        entryPoint = \"org.example.main\"\n\n        // Accessing the output file.\n        println(\"Executable path: ${outputFile.absolutePath}\")\n\n        // Accessing the link task.\n        linkTask.dependsOn(additionalPreprocessingTask)\n\n        // Accessing the run task.\n        // Note that the runTask is null for non-host platforms.\n        runTask?.dependsOn(prepareForRun)\n    }\n\n    framework(\"my_framework\" listOf(RELEASE)) {\n        // Include a static library instead of a dynamic one into the framework.\n        isStatic = true\n    }\n}\n\n"}, {"type": "pre", "text": "binaries {\n    executable(\"my_executable\", listOf(RELEASE)) {\n        // Build a binary on the basis of the test compilation.\n        compilation = compilations[\"test\"]\n\n        // Custom command line options for the linker.\n        linkerOpts = mutableListOf(\"-L/lib/search/path\", \"-L/another/search/path\", \"-lmylib\")\n\n        // Base name for the output file.\n        baseName = \"foo\"\n\n        // Custom entry point function.\n        entryPoint = \"org.example.main\"\n\n        // Accessing the output file.\n        println(\"Executable path: ${outputFile.absolutePath}\")\n\n        // Accessing the link task.\n        linkTask.dependsOn(additionalPreprocessingTask)\n\n        // Accessing the run task.\n        // Note that the runTask is null for non-host platforms.\n        runTask?.dependsOn(prepareForRun)\n    }\n\n    framework(\"my_framework\" listOf(RELEASE)) {\n        // Include a static library instead of a dynamic one into the framework.\n        isStatic = true\n    }\n}\n"}, {"type": "code", "text": "binaries {\n    executable(\"my_executable\", listOf(RELEASE)) {\n        // Build a binary on the basis of the test compilation.\n        compilation = compilations[\"test\"]\n\n        // Custom command line options for the linker.\n        linkerOpts = mutableListOf(\"-L/lib/search/path\", \"-L/another/search/path\", \"-lmylib\")\n\n        // Base name for the output file.\n        baseName = \"foo\"\n\n        // Custom entry point function.\n        entryPoint = \"org.example.main\"\n\n        // Accessing the output file.\n        println(\"Executable path: ${outputFile.absolutePath}\")\n\n        // Accessing the link task.\n        linkTask.dependsOn(additionalPreprocessingTask)\n\n        // Accessing the run task.\n        // Note that the runTask is null for non-host platforms.\n        runTask?.dependsOn(prepareForRun)\n    }\n\n    framework(\"my_framework\" listOf(RELEASE)) {\n        // Include a static library instead of a dynamic one into the framework.\n        isStatic = true\n    }\n}\n"}, {"type": "p", "text": "For more information on configuring binaries, see Building final native binaries."}, {"type": "a", "text": "Building final native binaries"}, {"type": "h4", "text": "CInterops"}, {"type": "p", "text": "cinterops is a collection of descriptions for interop with native libraries.\nTo provide an interop with a library, add an entry to cinterops and define its parameters:"}, {"type": "code", "text": "cinterops"}, {"type": "code", "text": "cinterops"}, {"type": "table", "text": "\n\n\nName\nDescription\n\n\n\n\ndefFile\ndef file describing the native API.\n\n\npackageName\nPackage prefix for the generated Kotlin API.\n\n\ncompilerOpts\nOptions to pass to the compiler by the cinterop tool.\n\n\nincludeDirs\nDirectories to look for headers.\n\n\n"}, {"type": "thead", "text": "\n\nName\nDescription\n\n"}, {"type": "tr", "text": "\nName\nDescription\n"}, {"type": "th", "text": "Name"}, {"type": "strong", "text": "Name"}, {"type": "th", "text": "Description"}, {"type": "strong", "text": "Description"}, {"type": "tbody", "text": "\n\ndefFile\ndef file describing the native API.\n\n\npackageName\nPackage prefix for the generated Kotlin API.\n\n\ncompilerOpts\nOptions to pass to the compiler by the cinterop tool.\n\n\nincludeDirs\nDirectories to look for headers.\n\n"}, {"type": "tr", "text": "\ndefFile\ndef file describing the native API.\n"}, {"type": "td", "text": "defFile"}, {"type": "code", "text": "defFile"}, {"type": "td", "text": "def file describing the native API."}, {"type": "code", "text": "def"}, {"type": "tr", "text": "\npackageName\nPackage prefix for the generated Kotlin API.\n"}, {"type": "td", "text": "packageName"}, {"type": "code", "text": "packageName"}, {"type": "td", "text": "Package prefix for the generated Kotlin API."}, {"type": "tr", "text": "\ncompilerOpts\nOptions to pass to the compiler by the cinterop tool.\n"}, {"type": "td", "text": "compilerOpts"}, {"type": "code", "text": "compilerOpts"}, {"type": "td", "text": "Options to pass to the compiler by the cinterop tool."}, {"type": "tr", "text": "\nincludeDirs\nDirectories to look for headers.\n"}, {"type": "td", "text": "includeDirs"}, {"type": "code", "text": "includeDirs"}, {"type": "td", "text": "Directories to look for headers."}, {"type": "p", "text": "For more information on Kotlin interop with C libraries, see CInterop support."}, {"type": "a", "text": "CInterop support"}, {"type": "div", "text": "\n\nkotlin {\n    linuxX64 { // Replace with a target you need.\n        compilations.main {\n            cinterops {\n                myInterop {\n                    // Def-file describing the native API.\n                    // The default path is src/nativeInterop/cinterop/<interop-name>.def\n                    defFile project.file(\"def-file.def\")\n\n                    // Package to place the Kotlin API generated.\n                    packageName 'org.sample'\n\n                    // Options to be passed to compiler by cinterop tool.\n                    compilerOpts '-Ipath/to/headers'\n\n                    // Directories for header search (an analogue of the -I<path> compiler option).\n                    includeDirs.allHeaders(\"path1\", \"path2\")\n\n                    // A shortcut for includeDirs.allHeaders.\n                    includeDirs(\"include/directory\", \"another/directory\")\n                }\n\n                anotherInterop { /* ... */ }\n            }\n        }\n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin {\n    linuxX64 { // Replace with a target you need.\n        compilations.main {\n            cinterops {\n                myInterop {\n                    // Def-file describing the native API.\n                    // The default path is src/nativeInterop/cinterop/<interop-name>.def\n                    defFile project.file(\"def-file.def\")\n\n                    // Package to place the Kotlin API generated.\n                    packageName 'org.sample'\n\n                    // Options to be passed to compiler by cinterop tool.\n                    compilerOpts '-Ipath/to/headers'\n\n                    // Directories for header search (an analogue of the -I<path> compiler option).\n                    includeDirs.allHeaders(\"path1\", \"path2\")\n\n                    // A shortcut for includeDirs.allHeaders.\n                    includeDirs(\"include/directory\", \"another/directory\")\n                }\n\n                anotherInterop { /* ... */ }\n            }\n        }\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    linuxX64 { // Replace with a target you need.\n        compilations.main {\n            cinterops {\n                myInterop {\n                    // Def-file describing the native API.\n                    // The default path is src/nativeInterop/cinterop/<interop-name>.def\n                    defFile project.file(\"def-file.def\")\n\n                    // Package to place the Kotlin API generated.\n                    packageName 'org.sample'\n\n                    // Options to be passed to compiler by cinterop tool.\n                    compilerOpts '-Ipath/to/headers'\n\n                    // Directories for header search (an analogue of the -I<path> compiler option).\n                    includeDirs.allHeaders(\"path1\", \"path2\")\n\n                    // A shortcut for includeDirs.allHeaders.\n                    includeDirs(\"include/directory\", \"another/directory\")\n                }\n\n                anotherInterop { /* ... */ }\n            }\n        }\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    linuxX64 { // Replace with a target you need.\n        compilations.main {\n            cinterops {\n                myInterop {\n                    // Def-file describing the native API.\n                    // The default path is src/nativeInterop/cinterop/<interop-name>.def\n                    defFile project.file(\"def-file.def\")\n\n                    // Package to place the Kotlin API generated.\n                    packageName 'org.sample'\n\n                    // Options to be passed to compiler by cinterop tool.\n                    compilerOpts '-Ipath/to/headers'\n\n                    // Directories for header search (an analogue of the -I<path> compiler option).\n                    includeDirs.allHeaders(\"path1\", \"path2\")\n\n                    // A shortcut for includeDirs.allHeaders.\n                    includeDirs(\"include/directory\", \"another/directory\")\n                }\n\n                anotherInterop { /* ... */ }\n            }\n        }\n    }\n}\n"}, {"type": "div", "text": "\n\nkotlin {\n    linuxX64 {  // Replace with a target you need.\n        compilations.getByName(\"main\") {\n            val myInterop by cinterops.creating {\n                // Def-file describing the native API.\n                // The default path is src/nativeInterop/cinterop/<interop-name>.def\n                defFile(project.file(\"def-file.def\"))\n\n                // Package to place the Kotlin API generated.\n                packageName(\"org.sample\")\n\n                // Options to be passed to compiler by cinterop tool.\n                compilerOpts(\"-Ipath/to/headers\")\n\n                // Directories for header search (an analogue of the -I<path> compiler option).\n                includeDirs.allHeaders(\"path1\", \"path2\")\n\n                // A shortcut for includeDirs.allHeaders.\n                includeDirs(\"include/directory\", \"another/directory\")\n            }\n\n            val anotherInterop by cinterops.creating { /* ... */ }\n        }\n    }\n}\n\n\n\n"}, {"type": "div", "text": "\nkotlin {\n    linuxX64 {  // Replace with a target you need.\n        compilations.getByName(\"main\") {\n            val myInterop by cinterops.creating {\n                // Def-file describing the native API.\n                // The default path is src/nativeInterop/cinterop/<interop-name>.def\n                defFile(project.file(\"def-file.def\"))\n\n                // Package to place the Kotlin API generated.\n                packageName(\"org.sample\")\n\n                // Options to be passed to compiler by cinterop tool.\n                compilerOpts(\"-Ipath/to/headers\")\n\n                // Directories for header search (an analogue of the -I<path> compiler option).\n                includeDirs.allHeaders(\"path1\", \"path2\")\n\n                // A shortcut for includeDirs.allHeaders.\n                includeDirs(\"include/directory\", \"another/directory\")\n            }\n\n            val anotherInterop by cinterops.creating { /* ... */ }\n        }\n    }\n}\n\n\n"}, {"type": "pre", "text": "kotlin {\n    linuxX64 {  // Replace with a target you need.\n        compilations.getByName(\"main\") {\n            val myInterop by cinterops.creating {\n                // Def-file describing the native API.\n                // The default path is src/nativeInterop/cinterop/<interop-name>.def\n                defFile(project.file(\"def-file.def\"))\n\n                // Package to place the Kotlin API generated.\n                packageName(\"org.sample\")\n\n                // Options to be passed to compiler by cinterop tool.\n                compilerOpts(\"-Ipath/to/headers\")\n\n                // Directories for header search (an analogue of the -I<path> compiler option).\n                includeDirs.allHeaders(\"path1\", \"path2\")\n\n                // A shortcut for includeDirs.allHeaders.\n                includeDirs(\"include/directory\", \"another/directory\")\n            }\n\n            val anotherInterop by cinterops.creating { /* ... */ }\n        }\n    }\n}\n\n"}, {"type": "code", "text": "kotlin {\n    linuxX64 {  // Replace with a target you need.\n        compilations.getByName(\"main\") {\n            val myInterop by cinterops.creating {\n                // Def-file describing the native API.\n                // The default path is src/nativeInterop/cinterop/<interop-name>.def\n                defFile(project.file(\"def-file.def\"))\n\n                // Package to place the Kotlin API generated.\n                packageName(\"org.sample\")\n\n                // Options to be passed to compiler by cinterop tool.\n                compilerOpts(\"-Ipath/to/headers\")\n\n                // Directories for header search (an analogue of the -I<path> compiler option).\n                includeDirs.allHeaders(\"path1\", \"path2\")\n\n                // A shortcut for includeDirs.allHeaders.\n                includeDirs(\"include/directory\", \"another/directory\")\n            }\n\n            val anotherInterop by cinterops.creating { /* ... */ }\n        }\n    }\n}\n\n"}, {"type": "h3", "text": "Android targets"}, {"type": "p", "text": "The Kotlin multiplatform plugin contains two specific functions for android targets.\nTwo functions help you configure build variants:"}, {"type": "a", "text": "build variants"}, {"type": "table", "text": "\n\n\nName\nDescription\n\n\n\n\npublishLibraryVariants()\nSpecifies build variants to publish. For usage instructions, see Publishing Android libraries.\n\n\npublishAllLibraryVariants()\nPublishes all build variants.\n\n\n"}, {"type": "thead", "text": "\n\nName\nDescription\n\n"}, {"type": "tr", "text": "\nName\nDescription\n"}, {"type": "th", "text": "Name"}, {"type": "strong", "text": "Name"}, {"type": "th", "text": "Description"}, {"type": "strong", "text": "Description"}, {"type": "tbody", "text": "\n\npublishLibraryVariants()\nSpecifies build variants to publish. For usage instructions, see Publishing Android libraries.\n\n\npublishAllLibraryVariants()\nPublishes all build variants.\n\n"}, {"type": "tr", "text": "\npublishLibraryVariants()\nSpecifies build variants to publish. For usage instructions, see Publishing Android libraries.\n"}, {"type": "td", "text": "publishLibraryVariants()"}, {"type": "code", "text": "publishLibraryVariants()"}, {"type": "td", "text": "Specifies build variants to publish. For usage instructions, see Publishing Android libraries."}, {"type": "a", "text": "Publishing Android libraries"}, {"type": "tr", "text": "\npublishAllLibraryVariants()\nPublishes all build variants.\n"}, {"type": "td", "text": "publishAllLibraryVariants()"}, {"type": "code", "text": "publishAllLibraryVariants()"}, {"type": "td", "text": "Publishes all build variants."}, {"type": "div", "text": "\nkotlin {\n    android {\n        publishLibraryVariants(\"release\", \"debug\")\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    android {\n        publishLibraryVariants(\"release\", \"debug\")\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    android {\n        publishLibraryVariants(\"release\", \"debug\")\n    }\n}\n"}, {"type": "p", "text": "For more details about configuring Android targets of multiplatform projects, see Android Support."}, {"type": "a", "text": "Android Support"}, {"type": "blockquote", "text": "\nNote that the android configuration inside kotlin doesn\u2019t replace the build configuration of any Android project.\nFor information on writing build scripts for Android projects, see the Android developer documentation.\n"}, {"type": "p", "text": "Note that the android configuration inside kotlin doesn\u2019t replace the build configuration of any Android project.\nFor information on writing build scripts for Android projects, see the Android developer documentation."}, {"type": "code", "text": "android"}, {"type": "code", "text": "kotlin"}, {"type": "a", "text": "Android developer documentation"}, {"type": "h2", "text": "Source sets"}, {"type": "p", "text": "The sourceSets block describes source sets of the project. A source set contains Kotlin source files that participate\nin compilations together, along with their resources, dependencies, and language settings."}, {"type": "code", "text": "sourceSets"}, {"type": "p", "text": "A multiplatform project contains predefined source sets for its targets;\ndevelopers can also create custom source sets for their needs.\nFor instructions on creating and configuring source sets, see Configuring source sets."}, {"type": "a", "text": "predefined"}, {"type": "a", "text": "custom"}, {"type": "a", "text": "Configuring source sets"}, {"type": "h3", "text": "Predefined source sets"}, {"type": "p", "text": "Predefined source sets are set up automatically upon creation of a multiplatform project.\nAvailable predefined source sets are the following:"}, {"type": "table", "text": "\n\n\nName\nDescription\n\n\n\n\ncommonMain\nCode and resources shared between all platforms. Available in all multiplatform projects. Used in all main compilations of a project.\n\n\ncommonTest\nTest code and resources shared between all platforms. Available in all multiplatform projects. Used in all test compilations of a project.\n\n\n<targetName><compilationName>\nTarget-specific sources for a compilation. <targetName> is the name of a predefined target and <compilationName> is the name of a compilation for this target. Examples: jsTest, jvmMain.\n\n\n"}, {"type": "thead", "text": "\n\nName\nDescription\n\n"}, {"type": "tr", "text": "\nName\nDescription\n"}, {"type": "th", "text": "Name"}, {"type": "strong", "text": "Name"}, {"type": "th", "text": "Description"}, {"type": "strong", "text": "Description"}, {"type": "tbody", "text": "\n\ncommonMain\nCode and resources shared between all platforms. Available in all multiplatform projects. Used in all main compilations of a project.\n\n\ncommonTest\nTest code and resources shared between all platforms. Available in all multiplatform projects. Used in all test compilations of a project.\n\n\n<targetName><compilationName>\nTarget-specific sources for a compilation. <targetName> is the name of a predefined target and <compilationName> is the name of a compilation for this target. Examples: jsTest, jvmMain.\n\n"}, {"type": "tr", "text": "\ncommonMain\nCode and resources shared between all platforms. Available in all multiplatform projects. Used in all main compilations of a project.\n"}, {"type": "td", "text": "commonMain"}, {"type": "code", "text": "commonMain"}, {"type": "td", "text": "Code and resources shared between all platforms. Available in all multiplatform projects. Used in all main compilations of a project."}, {"type": "tr", "text": "\ncommonTest\nTest code and resources shared between all platforms. Available in all multiplatform projects. Used in all test compilations of a project.\n"}, {"type": "td", "text": "commonTest"}, {"type": "code", "text": "commonTest"}, {"type": "td", "text": "Test code and resources shared between all platforms. Available in all multiplatform projects. Used in all test compilations of a project."}, {"type": "tr", "text": "\n<targetName><compilationName>\nTarget-specific sources for a compilation. <targetName> is the name of a predefined target and <compilationName> is the name of a compilation for this target. Examples: jsTest, jvmMain.\n"}, {"type": "td", "text": "<targetName><compilationName>"}, {"type": "em", "text": "<targetName><compilationName>"}, {"type": "td", "text": "Target-specific sources for a compilation. <targetName> is the name of a predefined target and <compilationName> is the name of a compilation for this target. Examples: jsTest, jvmMain."}, {"type": "em", "text": "<targetName>"}, {"type": "em", "text": "<compilationName>"}, {"type": "code", "text": "jsTest"}, {"type": "code", "text": "jvmMain"}, {"type": "p", "text": "With Kotlin Gradle DSL, the sections of predefined source sets should be marked by getting."}, {"type": "code", "text": "by getting"}, {"type": "div", "text": "\n\nkotlin { \n    sourceSets { \n        commonMain { /* ... */ } \n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin { \n    sourceSets { \n        commonMain { /* ... */ } \n    }\n}\n\n"}, {"type": "pre", "text": "kotlin { \n    sourceSets { \n        commonMain { /* ... */ } \n    }\n}\n"}, {"type": "code", "text": "kotlin { \n    sourceSets { \n        commonMain { /* ... */ } \n    }\n}\n"}, {"type": "div", "text": "\n\nkotlin { \n    sourceSets { \n        val commonMain by getting { /* ... */ } \n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin { \n    sourceSets { \n        val commonMain by getting { /* ... */ } \n    }\n}\n\n"}, {"type": "pre", "text": "kotlin { \n    sourceSets { \n        val commonMain by getting { /* ... */ } \n    }\n}\n"}, {"type": "code", "text": "kotlin { \n    sourceSets { \n        val commonMain by getting { /* ... */ } \n    }\n}\n"}, {"type": "p", "text": "For more information about the predefined source sets, see Default Project Layout."}, {"type": "a", "text": "Default Project Layout"}, {"type": "h3", "text": "Custom source sets"}, {"type": "p", "text": "Custom source sets are created by the project developers manually.\nTo create a custom source set, add a section with its name inside the sourceSets section.\nIf using Kotlin Gradle DSL, mark custom source sets by creating."}, {"type": "code", "text": "sourceSets"}, {"type": "code", "text": "by creating"}, {"type": "div", "text": "\n\nkotlin { \n    sourceSets { \n        myMain { /* ... */ } // create or configure a source set by the name 'myMain' \n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin { \n    sourceSets { \n        myMain { /* ... */ } // create or configure a source set by the name 'myMain' \n    }\n}\n\n"}, {"type": "pre", "text": "kotlin { \n    sourceSets { \n        myMain { /* ... */ } // create or configure a source set by the name 'myMain' \n    }\n}\n"}, {"type": "code", "text": "kotlin { \n    sourceSets { \n        myMain { /* ... */ } // create or configure a source set by the name 'myMain' \n    }\n}\n"}, {"type": "div", "text": "\n\nkotlin { \n    sourceSets { \n        val myMain by creating { /* ... */ } // create a new source set by the name 'MyMain'\n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin { \n    sourceSets { \n        val myMain by creating { /* ... */ } // create a new source set by the name 'MyMain'\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin { \n    sourceSets { \n        val myMain by creating { /* ... */ } // create a new source set by the name 'MyMain'\n    }\n}\n"}, {"type": "code", "text": "kotlin { \n    sourceSets { \n        val myMain by creating { /* ... */ } // create a new source set by the name 'MyMain'\n    }\n}\n"}, {"type": "p", "text": "Note that a newly created source set isn\u2019t connected to other ones. To use it in the project\u2019s compilations,\nconnect it with other source sets as described in Connecting source sets."}, {"type": "a", "text": "Connecting source sets"}, {"type": "h3", "text": "Source set parameters"}, {"type": "p", "text": "Configurations of source sets are stored inside the corresponding blocks of sourceSets. A source set has the following parameters:"}, {"type": "code", "text": "sourceSets"}, {"type": "table", "text": "\n\n\nName\nDescription\n\n\n\n\nkotlin.srcDir\nLocation of Kotlin source files inside the source set directory.\n\n\nresources.srcDir\nLocation of resources inside the source set directory.\n\n\ndependsOn\nConnection with another source set. The instructions on connecting source sets are provided in Connecting source sets.\n\n\ndependencies\nDependencies of the source set.\n\n\nlanguageSettings\nLanguage settings applied to the source set.\n\n\n"}, {"type": "thead", "text": "\n\nName\nDescription\n\n"}, {"type": "tr", "text": "\nName\nDescription\n"}, {"type": "th", "text": "Name"}, {"type": "strong", "text": "Name"}, {"type": "th", "text": "Description"}, {"type": "strong", "text": "Description"}, {"type": "tbody", "text": "\n\nkotlin.srcDir\nLocation of Kotlin source files inside the source set directory.\n\n\nresources.srcDir\nLocation of resources inside the source set directory.\n\n\ndependsOn\nConnection with another source set. The instructions on connecting source sets are provided in Connecting source sets.\n\n\ndependencies\nDependencies of the source set.\n\n\nlanguageSettings\nLanguage settings applied to the source set.\n\n"}, {"type": "tr", "text": "\nkotlin.srcDir\nLocation of Kotlin source files inside the source set directory.\n"}, {"type": "td", "text": "kotlin.srcDir"}, {"type": "code", "text": "kotlin.srcDir"}, {"type": "td", "text": "Location of Kotlin source files inside the source set directory."}, {"type": "tr", "text": "\nresources.srcDir\nLocation of resources inside the source set directory.\n"}, {"type": "td", "text": "resources.srcDir"}, {"type": "code", "text": "resources.srcDir"}, {"type": "td", "text": "Location of resources inside the source set directory."}, {"type": "tr", "text": "\ndependsOn\nConnection with another source set. The instructions on connecting source sets are provided in Connecting source sets.\n"}, {"type": "td", "text": "dependsOn"}, {"type": "code", "text": "dependsOn"}, {"type": "td", "text": "Connection with another source set. The instructions on connecting source sets are provided in Connecting source sets."}, {"type": "a", "text": "Connecting source sets"}, {"type": "tr", "text": "\ndependencies\nDependencies of the source set.\n"}, {"type": "td", "text": "dependencies"}, {"type": "code", "text": "dependencies"}, {"type": "td", "text": "Dependencies of the source set."}, {"type": "a", "text": "Dependencies"}, {"type": "tr", "text": "\nlanguageSettings\nLanguage settings applied to the source set.\n"}, {"type": "td", "text": "languageSettings"}, {"type": "code", "text": "languageSettings"}, {"type": "td", "text": "Language settings applied to the source set."}, {"type": "a", "text": "Language settings"}, {"type": "div", "text": "\n\nkotlin { \n    sourceSets { \n        commonMain {\n            kotlin.srcDir('src')\n            resources.srcDir('res')\n            \n            dependencies {\n                /* ... */\n            }           \n        } \n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin { \n    sourceSets { \n        commonMain {\n            kotlin.srcDir('src')\n            resources.srcDir('res')\n            \n            dependencies {\n                /* ... */\n            }           \n        } \n    }\n}\n\n"}, {"type": "pre", "text": "kotlin { \n    sourceSets { \n        commonMain {\n            kotlin.srcDir('src')\n            resources.srcDir('res')\n            \n            dependencies {\n                /* ... */\n            }           \n        } \n    }\n}\n"}, {"type": "code", "text": "kotlin { \n    sourceSets { \n        commonMain {\n            kotlin.srcDir('src')\n            resources.srcDir('res')\n            \n            dependencies {\n                /* ... */\n            }           \n        } \n    }\n}\n"}, {"type": "div", "text": "\n\nkotlin { \n    sourceSets { \n        val commonMain by getting {\n            kotlin.srcDir(\"src\")\n            resources.srcDir(\"res\")\n            \n            dependencies {\n                /* ... */\n            } \n        } \n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin { \n    sourceSets { \n        val commonMain by getting {\n            kotlin.srcDir(\"src\")\n            resources.srcDir(\"res\")\n            \n            dependencies {\n                /* ... */\n            } \n        } \n    }\n}\n\n"}, {"type": "pre", "text": "kotlin { \n    sourceSets { \n        val commonMain by getting {\n            kotlin.srcDir(\"src\")\n            resources.srcDir(\"res\")\n            \n            dependencies {\n                /* ... */\n            } \n        } \n    }\n}\n"}, {"type": "code", "text": "kotlin { \n    sourceSets { \n        val commonMain by getting {\n            kotlin.srcDir(\"src\")\n            resources.srcDir(\"res\")\n            \n            dependencies {\n                /* ... */\n            } \n        } \n    }\n}\n"}, {"type": "h2", "text": "Compilations"}, {"type": "p", "text": "A target can have one or more compilations, for example, for production or testing. There are predefined compilations\nthat are added automatically upon target creation. Developers can additionally create custom compilations."}, {"type": "a", "text": "predefined compilations"}, {"type": "a", "text": "custom compilations"}, {"type": "p", "text": "To refer to all or some particular compilations of a target, use the compilations object collection.\nFrom compilations, you can refer to a compilation by its name."}, {"type": "code", "text": "compilations"}, {"type": "code", "text": "compilations"}, {"type": "h3", "text": "Predefined compilations"}, {"type": "p", "text": "Predefined compilations are created automatically for each target of a project except for Android targets.\nAvailable predefined compilations are the following:"}, {"type": "table", "text": "\n\n\nName\nDescription\n\n\n\n\nmain\nCompilation for production sources.\n\n\ntest\nCompilation for tests.\n\n\n"}, {"type": "thead", "text": "\n\nName\nDescription\n\n"}, {"type": "tr", "text": "\nName\nDescription\n"}, {"type": "th", "text": "Name"}, {"type": "strong", "text": "Name"}, {"type": "th", "text": "Description"}, {"type": "strong", "text": "Description"}, {"type": "tbody", "text": "\n\nmain\nCompilation for production sources.\n\n\ntest\nCompilation for tests.\n\n"}, {"type": "tr", "text": "\nmain\nCompilation for production sources.\n"}, {"type": "td", "text": "main"}, {"type": "code", "text": "main"}, {"type": "td", "text": "Compilation for production sources."}, {"type": "tr", "text": "\ntest\nCompilation for tests.\n"}, {"type": "td", "text": "test"}, {"type": "code", "text": "test"}, {"type": "td", "text": "Compilation for tests."}, {"type": "div", "text": "\n\nkotlin {\n    jvm {\n        compilations.main.output // get the main compilation output\n        compilations.test.runtimeDependencyFiles // get the test runtime classpath\n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin {\n    jvm {\n        compilations.main.output // get the main compilation output\n        compilations.test.runtimeDependencyFiles // get the test runtime classpath\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    jvm {\n        compilations.main.output // get the main compilation output\n        compilations.test.runtimeDependencyFiles // get the test runtime classpath\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    jvm {\n        compilations.main.output // get the main compilation output\n        compilations.test.runtimeDependencyFiles // get the test runtime classpath\n    }\n}\n"}, {"type": "div", "text": "\n\nkotlin {\n    jvm {\n        val main by compilations.getting {\n            output // get the main compilation output\n        }\n        \n        compilations[\"test\"].runtimeDependencyFiles // get the test runtime classpath\n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin {\n    jvm {\n        val main by compilations.getting {\n            output // get the main compilation output\n        }\n        \n        compilations[\"test\"].runtimeDependencyFiles // get the test runtime classpath\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    jvm {\n        val main by compilations.getting {\n            output // get the main compilation output\n        }\n        \n        compilations[\"test\"].runtimeDependencyFiles // get the test runtime classpath\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    jvm {\n        val main by compilations.getting {\n            output // get the main compilation output\n        }\n        \n        compilations[\"test\"].runtimeDependencyFiles // get the test runtime classpath\n    }\n}\n"}, {"type": "h3", "text": "Custom compilations"}, {"type": "p", "text": "In addition to predefined compilations, developers can create their own custom compilations.\nTo create a custom compilation, add a new item into the compilations collection.\nIf using Kotlin Gradle DSL, mark custom compilations by creating."}, {"type": "code", "text": "compilations"}, {"type": "code", "text": "by creating"}, {"type": "div", "text": "\n\nkotlin {\n    jvm() {\n        compilations.create('integrationTest') {\n            defaultSourceSet {\n                dependencies {\n                    /* ... */\n                }\n            }\n\n            // Create a test task to run the tests produced by this compilation:\n            tasks.create('jvmIntegrationTest', Test) {\n                /* ... */\n            }\n        }\n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin {\n    jvm() {\n        compilations.create('integrationTest') {\n            defaultSourceSet {\n                dependencies {\n                    /* ... */\n                }\n            }\n\n            // Create a test task to run the tests produced by this compilation:\n            tasks.create('jvmIntegrationTest', Test) {\n                /* ... */\n            }\n        }\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    jvm() {\n        compilations.create('integrationTest') {\n            defaultSourceSet {\n                dependencies {\n                    /* ... */\n                }\n            }\n\n            // Create a test task to run the tests produced by this compilation:\n            tasks.create('jvmIntegrationTest', Test) {\n                /* ... */\n            }\n        }\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    jvm() {\n        compilations.create('integrationTest') {\n            defaultSourceSet {\n                dependencies {\n                    /* ... */\n                }\n            }\n\n            // Create a test task to run the tests produced by this compilation:\n            tasks.create('jvmIntegrationTest', Test) {\n                /* ... */\n            }\n        }\n    }\n}\n"}, {"type": "div", "text": "\n\nkotlin {\n    jvm() {\n        compilations {\n            val integrationTest by compilations.creating {\n                defaultSourceSet {\n                    dependencies {\n                        /* ... */\n                    }\n                }\n\n                // Create a test task to run the tests produced by this compilation:\n                tasks.create<Test>(\"integrationTest\") {\n                    /* ... */\n                }\n            }\n        }\n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin {\n    jvm() {\n        compilations {\n            val integrationTest by compilations.creating {\n                defaultSourceSet {\n                    dependencies {\n                        /* ... */\n                    }\n                }\n\n                // Create a test task to run the tests produced by this compilation:\n                tasks.create<Test>(\"integrationTest\") {\n                    /* ... */\n                }\n            }\n        }\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    jvm() {\n        compilations {\n            val integrationTest by compilations.creating {\n                defaultSourceSet {\n                    dependencies {\n                        /* ... */\n                    }\n                }\n\n                // Create a test task to run the tests produced by this compilation:\n                tasks.create<Test>(\"integrationTest\") {\n                    /* ... */\n                }\n            }\n        }\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    jvm() {\n        compilations {\n            val integrationTest by compilations.creating {\n                defaultSourceSet {\n                    dependencies {\n                        /* ... */\n                    }\n                }\n\n                // Create a test task to run the tests produced by this compilation:\n                tasks.create<Test>(\"integrationTest\") {\n                    /* ... */\n                }\n            }\n        }\n    }\n}\n"}, {"type": "h3", "text": "Compilation parameters"}, {"type": "p", "text": "A compilation has the following parameters:"}, {"type": "table", "text": "\n\n\nName\nDescription\n\n\n\n\ndefaultSourceSet\nThe compilation\u2019s default source set.\n\n\nkotlinSourceSets\nSource sets participating in the compilation.\n\n\nallKotlinSourceSets\nSource sets participating in the compilation and their connections via dependsOn().\n\n\nkotlinOptions\nCompiler options applied to the compilation. For the list of available options, see Compiler options.\n\n\ncompileKotlinTask\nGradle task for compiling Kotlin sources.\n\n\ncompileKotlinTaskName\nName of compileKotlinTask.\n\n\ncompileAllTaskName\nName of the Gradle task for compiling all sources of a compilation.\n\n\noutput\nThe compilation output.\n\n\ncompileDependencyFiles\nCompile-time dependency files (classpath) of the compilation.\n\n\nruntimeDependencyFiles\nRuntime dependency files (classpath) of the compilation.\n\n\n"}, {"type": "thead", "text": "\n\nName\nDescription\n\n"}, {"type": "tr", "text": "\nName\nDescription\n"}, {"type": "th", "text": "Name"}, {"type": "strong", "text": "Name"}, {"type": "th", "text": "Description"}, {"type": "strong", "text": "Description"}, {"type": "tbody", "text": "\n\ndefaultSourceSet\nThe compilation\u2019s default source set.\n\n\nkotlinSourceSets\nSource sets participating in the compilation.\n\n\nallKotlinSourceSets\nSource sets participating in the compilation and their connections via dependsOn().\n\n\nkotlinOptions\nCompiler options applied to the compilation. For the list of available options, see Compiler options.\n\n\ncompileKotlinTask\nGradle task for compiling Kotlin sources.\n\n\ncompileKotlinTaskName\nName of compileKotlinTask.\n\n\ncompileAllTaskName\nName of the Gradle task for compiling all sources of a compilation.\n\n\noutput\nThe compilation output.\n\n\ncompileDependencyFiles\nCompile-time dependency files (classpath) of the compilation.\n\n\nruntimeDependencyFiles\nRuntime dependency files (classpath) of the compilation.\n\n"}, {"type": "tr", "text": "\ndefaultSourceSet\nThe compilation\u2019s default source set.\n"}, {"type": "td", "text": "defaultSourceSet"}, {"type": "code", "text": "defaultSourceSet"}, {"type": "td", "text": "The compilation\u2019s default source set."}, {"type": "tr", "text": "\nkotlinSourceSets\nSource sets participating in the compilation.\n"}, {"type": "td", "text": "kotlinSourceSets"}, {"type": "code", "text": "kotlinSourceSets"}, {"type": "td", "text": "Source sets participating in the compilation."}, {"type": "tr", "text": "\nallKotlinSourceSets\nSource sets participating in the compilation and their connections via dependsOn().\n"}, {"type": "td", "text": "allKotlinSourceSets"}, {"type": "code", "text": "allKotlinSourceSets"}, {"type": "td", "text": "Source sets participating in the compilation and their connections via dependsOn()."}, {"type": "code", "text": "dependsOn()"}, {"type": "tr", "text": "\nkotlinOptions\nCompiler options applied to the compilation. For the list of available options, see Compiler options.\n"}, {"type": "td", "text": "kotlinOptions"}, {"type": "code", "text": "kotlinOptions"}, {"type": "td", "text": "Compiler options applied to the compilation. For the list of available options, see Compiler options."}, {"type": "a", "text": "Compiler options"}, {"type": "tr", "text": "\ncompileKotlinTask\nGradle task for compiling Kotlin sources.\n"}, {"type": "td", "text": "compileKotlinTask"}, {"type": "code", "text": "compileKotlinTask"}, {"type": "td", "text": "Gradle task for compiling Kotlin sources."}, {"type": "tr", "text": "\ncompileKotlinTaskName\nName of compileKotlinTask.\n"}, {"type": "td", "text": "compileKotlinTaskName"}, {"type": "code", "text": "compileKotlinTaskName"}, {"type": "td", "text": "Name of compileKotlinTask."}, {"type": "code", "text": "compileKotlinTask"}, {"type": "tr", "text": "\ncompileAllTaskName\nName of the Gradle task for compiling all sources of a compilation.\n"}, {"type": "td", "text": "compileAllTaskName"}, {"type": "code", "text": "compileAllTaskName"}, {"type": "td", "text": "Name of the Gradle task for compiling all sources of a compilation."}, {"type": "tr", "text": "\noutput\nThe compilation output.\n"}, {"type": "td", "text": "output"}, {"type": "code", "text": "output"}, {"type": "td", "text": "The compilation output."}, {"type": "tr", "text": "\ncompileDependencyFiles\nCompile-time dependency files (classpath) of the compilation.\n"}, {"type": "td", "text": "compileDependencyFiles"}, {"type": "code", "text": "compileDependencyFiles"}, {"type": "td", "text": "Compile-time dependency files (classpath) of the compilation."}, {"type": "tr", "text": "\nruntimeDependencyFiles\nRuntime dependency files (classpath) of the compilation.\n"}, {"type": "td", "text": "runtimeDependencyFiles"}, {"type": "code", "text": "runtimeDependencyFiles"}, {"type": "td", "text": "Runtime dependency files (classpath) of the compilation."}, {"type": "div", "text": "\n\nkotlin {\n    jvm {\n        compilations.main.kotlinOptions { \n            // Setup the Kotlin compiler options for the 'main' compilation:\n            jvmTarget = \"1.8\"\n        }\n        \n        compilations.main.compileKotlinTask // get the Kotlin task 'compileKotlinJvm' \n        compilations.main.output // get the main compilation output\n        compilations.test.runtimeDependencyFiles // get the test runtime classpath\n    }\n    \n    // Configure all compilations of all targets:\n    targets.all {\n        compilations.all {\n            kotlinOptions {\n                allWarningsAsErrors = true\n            }\n        }\n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin {\n    jvm {\n        compilations.main.kotlinOptions { \n            // Setup the Kotlin compiler options for the 'main' compilation:\n            jvmTarget = \"1.8\"\n        }\n        \n        compilations.main.compileKotlinTask // get the Kotlin task 'compileKotlinJvm' \n        compilations.main.output // get the main compilation output\n        compilations.test.runtimeDependencyFiles // get the test runtime classpath\n    }\n    \n    // Configure all compilations of all targets:\n    targets.all {\n        compilations.all {\n            kotlinOptions {\n                allWarningsAsErrors = true\n            }\n        }\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    jvm {\n        compilations.main.kotlinOptions { \n            // Setup the Kotlin compiler options for the 'main' compilation:\n            jvmTarget = \"1.8\"\n        }\n        \n        compilations.main.compileKotlinTask // get the Kotlin task 'compileKotlinJvm' \n        compilations.main.output // get the main compilation output\n        compilations.test.runtimeDependencyFiles // get the test runtime classpath\n    }\n    \n    // Configure all compilations of all targets:\n    targets.all {\n        compilations.all {\n            kotlinOptions {\n                allWarningsAsErrors = true\n            }\n        }\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    jvm {\n        compilations.main.kotlinOptions { \n            // Setup the Kotlin compiler options for the 'main' compilation:\n            jvmTarget = \"1.8\"\n        }\n        \n        compilations.main.compileKotlinTask // get the Kotlin task 'compileKotlinJvm' \n        compilations.main.output // get the main compilation output\n        compilations.test.runtimeDependencyFiles // get the test runtime classpath\n    }\n    \n    // Configure all compilations of all targets:\n    targets.all {\n        compilations.all {\n            kotlinOptions {\n                allWarningsAsErrors = true\n            }\n        }\n    }\n}\n"}, {"type": "div", "text": "\n\nkotlin {\n    jvm {\n        val main by compilations.getting {\n            kotlinOptions { \n                // Setup the Kotlin compiler options for the 'main' compilation:\n                jvmTarget = \"1.8\"\n            }\n        \n            compileKotlinTask // get the Kotlin task 'compileKotlinJvm' \n            output // get the main compilation output\n        }\n        \n        compilations[\"test\"].runtimeDependencyFiles // get the test runtime classpath\n    }\n    \n    // Configure all compilations of all targets:\n    targets.all {\n        compilations.all {\n            kotlinOptions {\n                allWarningsAsErrors = true\n            }\n        }\n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin {\n    jvm {\n        val main by compilations.getting {\n            kotlinOptions { \n                // Setup the Kotlin compiler options for the 'main' compilation:\n                jvmTarget = \"1.8\"\n            }\n        \n            compileKotlinTask // get the Kotlin task 'compileKotlinJvm' \n            output // get the main compilation output\n        }\n        \n        compilations[\"test\"].runtimeDependencyFiles // get the test runtime classpath\n    }\n    \n    // Configure all compilations of all targets:\n    targets.all {\n        compilations.all {\n            kotlinOptions {\n                allWarningsAsErrors = true\n            }\n        }\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    jvm {\n        val main by compilations.getting {\n            kotlinOptions { \n                // Setup the Kotlin compiler options for the 'main' compilation:\n                jvmTarget = \"1.8\"\n            }\n        \n            compileKotlinTask // get the Kotlin task 'compileKotlinJvm' \n            output // get the main compilation output\n        }\n        \n        compilations[\"test\"].runtimeDependencyFiles // get the test runtime classpath\n    }\n    \n    // Configure all compilations of all targets:\n    targets.all {\n        compilations.all {\n            kotlinOptions {\n                allWarningsAsErrors = true\n            }\n        }\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    jvm {\n        val main by compilations.getting {\n            kotlinOptions { \n                // Setup the Kotlin compiler options for the 'main' compilation:\n                jvmTarget = \"1.8\"\n            }\n        \n            compileKotlinTask // get the Kotlin task 'compileKotlinJvm' \n            output // get the main compilation output\n        }\n        \n        compilations[\"test\"].runtimeDependencyFiles // get the test runtime classpath\n    }\n    \n    // Configure all compilations of all targets:\n    targets.all {\n        compilations.all {\n            kotlinOptions {\n                allWarningsAsErrors = true\n            }\n        }\n    }\n}\n"}, {"type": "h2", "text": "Dependencies"}, {"type": "p", "text": "The dependencies block of the source set declaration contains the dependencies of this source set.\nThere are four kinds of dependencies:"}, {"type": "table", "text": "\n\n\nName\nDescription\n\n\n\n\napi\nDependencies used in the API of the current module.\n\n\nimplementation\nDependencies used in the module but not exposed outside it.\n\n\ncompileOnly\nDependencies used only for compilation of the current module.\n\n\nruntimeOnly\nDependencies available at runtime but not visible during compilation of any module.\n\n\n"}, {"type": "thead", "text": "\n\nName\nDescription\n\n"}, {"type": "tr", "text": "\nName\nDescription\n"}, {"type": "th", "text": "Name"}, {"type": "strong", "text": "Name"}, {"type": "th", "text": "Description"}, {"type": "strong", "text": "Description"}, {"type": "tbody", "text": "\n\napi\nDependencies used in the API of the current module.\n\n\nimplementation\nDependencies used in the module but not exposed outside it.\n\n\ncompileOnly\nDependencies used only for compilation of the current module.\n\n\nruntimeOnly\nDependencies available at runtime but not visible during compilation of any module.\n\n"}, {"type": "tr", "text": "\napi\nDependencies used in the API of the current module.\n"}, {"type": "td", "text": "api"}, {"type": "code", "text": "api"}, {"type": "td", "text": "Dependencies used in the API of the current module."}, {"type": "tr", "text": "\nimplementation\nDependencies used in the module but not exposed outside it.\n"}, {"type": "td", "text": "implementation"}, {"type": "code", "text": "implementation"}, {"type": "td", "text": "Dependencies used in the module but not exposed outside it."}, {"type": "tr", "text": "\ncompileOnly\nDependencies used only for compilation of the current module.\n"}, {"type": "td", "text": "compileOnly"}, {"type": "code", "text": "compileOnly"}, {"type": "td", "text": "Dependencies used only for compilation of the current module."}, {"type": "tr", "text": "\nruntimeOnly\nDependencies available at runtime but not visible during compilation of any module.\n"}, {"type": "td", "text": "runtimeOnly"}, {"type": "code", "text": "runtimeOnly"}, {"type": "td", "text": "Dependencies available at runtime but not visible during compilation of any module."}, {"type": "div", "text": "\n\nkotlin {\n    sourceSets {\n        commonMain {\n            dependencies {\n                api 'com.example:foo-metadata:1.0'\n            }\n        }\n        jvm6Main {\n            dependencies {\n                implementation 'com.example:foo-jvm6:1.0'\n            }\n        }\n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin {\n    sourceSets {\n        commonMain {\n            dependencies {\n                api 'com.example:foo-metadata:1.0'\n            }\n        }\n        jvm6Main {\n            dependencies {\n                implementation 'com.example:foo-jvm6:1.0'\n            }\n        }\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    sourceSets {\n        commonMain {\n            dependencies {\n                api 'com.example:foo-metadata:1.0'\n            }\n        }\n        jvm6Main {\n            dependencies {\n                implementation 'com.example:foo-jvm6:1.0'\n            }\n        }\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    sourceSets {\n        commonMain {\n            dependencies {\n                api 'com.example:foo-metadata:1.0'\n            }\n        }\n        jvm6Main {\n            dependencies {\n                implementation 'com.example:foo-jvm6:1.0'\n            }\n        }\n    }\n}\n"}, {"type": "div", "text": "\n\nkotlin {\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                api(\"com.example:foo-metadata:1.0\")\n            }\n        }\n        val jvm6Main by getting {\n            dependencies {\n                implementation(\"com.example:foo-jvm6:1.0\")\n            }\n        }\n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin {\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                api(\"com.example:foo-metadata:1.0\")\n            }\n        }\n        val jvm6Main by getting {\n            dependencies {\n                implementation(\"com.example:foo-jvm6:1.0\")\n            }\n        }\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                api(\"com.example:foo-metadata:1.0\")\n            }\n        }\n        val jvm6Main by getting {\n            dependencies {\n                implementation(\"com.example:foo-jvm6:1.0\")\n            }\n        }\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                api(\"com.example:foo-metadata:1.0\")\n            }\n        }\n        val jvm6Main by getting {\n            dependencies {\n                implementation(\"com.example:foo-jvm6:1.0\")\n            }\n        }\n    }\n}\n"}, {"type": "p", "text": "Additionally, source sets can depend on each other. In this case, the dependsOn() function is used.\nSource set dependencies can also be declared in the top-level dependencies block of the build script.\nIn this case, their declarations follow the pattern <sourceSetName><DependencyKind>, for example, commonMainApi."}, {"type": "a", "text": "dependsOn()"}, {"type": "code", "text": "dependencies"}, {"type": "code", "text": "<sourceSetName><DependencyKind>"}, {"type": "code", "text": "commonMainApi"}, {"type": "div", "text": "\n\ndependencies {\n    commonMainApi 'com.example:foo-common:1.0'\n    jvm6MainApi 'com.example:foo-jvm6:1.0'\n}\n\n\n"}, {"type": "div", "text": "\ndependencies {\n    commonMainApi 'com.example:foo-common:1.0'\n    jvm6MainApi 'com.example:foo-jvm6:1.0'\n}\n\n"}, {"type": "pre", "text": "dependencies {\n    commonMainApi 'com.example:foo-common:1.0'\n    jvm6MainApi 'com.example:foo-jvm6:1.0'\n}\n"}, {"type": "code", "text": "dependencies {\n    commonMainApi 'com.example:foo-common:1.0'\n    jvm6MainApi 'com.example:foo-jvm6:1.0'\n}\n"}, {"type": "div", "text": "\n\ndependencies {\n    \"commonMainApi\"(\"com.example:foo-common:1.0\")\n    \"jvm6MainApi\"(\"com.example:foo-jvm6:1.0\")\n}\n\n\n"}, {"type": "div", "text": "\ndependencies {\n    \"commonMainApi\"(\"com.example:foo-common:1.0\")\n    \"jvm6MainApi\"(\"com.example:foo-jvm6:1.0\")\n}\n\n"}, {"type": "pre", "text": "dependencies {\n    \"commonMainApi\"(\"com.example:foo-common:1.0\")\n    \"jvm6MainApi\"(\"com.example:foo-jvm6:1.0\")\n}\n"}, {"type": "code", "text": "dependencies {\n    \"commonMainApi\"(\"com.example:foo-common:1.0\")\n    \"jvm6MainApi\"(\"com.example:foo-jvm6:1.0\")\n}\n"}, {"type": "h2", "text": "Language settings"}, {"type": "p", "text": "The languageSettings block of a source set defines certain aspects of project analysis and build. The following language settings are available:"}, {"type": "table", "text": "\n\n\nName\nDescription\n\n\n\n\nlanguageVersion\nProvides source compatibility with the specified version of Kotlin.\n\n\napiVersion\nAllows using declarations only from the specified version of Kotlin bundled libraries.\n\n\nenableLanguageFeature\nEnables the specified language feature. The available values correspond to the language features that are currently experimental or have been introduced as such at some point.\n\n\nuseExperimentalAnnotation\nAllows using the specified opt-in annotation.\n\n\nprogressiveMode\nEnables the progressive mode.\n\n\n"}, {"type": "thead", "text": "\n\nName\nDescription\n\n"}, {"type": "tr", "text": "\nName\nDescription\n"}, {"type": "th", "text": "Name"}, {"type": "strong", "text": "Name"}, {"type": "th", "text": "Description"}, {"type": "strong", "text": "Description"}, {"type": "tbody", "text": "\n\nlanguageVersion\nProvides source compatibility with the specified version of Kotlin.\n\n\napiVersion\nAllows using declarations only from the specified version of Kotlin bundled libraries.\n\n\nenableLanguageFeature\nEnables the specified language feature. The available values correspond to the language features that are currently experimental or have been introduced as such at some point.\n\n\nuseExperimentalAnnotation\nAllows using the specified opt-in annotation.\n\n\nprogressiveMode\nEnables the progressive mode.\n\n"}, {"type": "tr", "text": "\nlanguageVersion\nProvides source compatibility with the specified version of Kotlin.\n"}, {"type": "td", "text": "languageVersion"}, {"type": "code", "text": "languageVersion"}, {"type": "td", "text": "Provides source compatibility with the specified version of Kotlin."}, {"type": "tr", "text": "\napiVersion\nAllows using declarations only from the specified version of Kotlin bundled libraries.\n"}, {"type": "td", "text": "apiVersion"}, {"type": "code", "text": "apiVersion"}, {"type": "td", "text": "Allows using declarations only from the specified version of Kotlin bundled libraries."}, {"type": "tr", "text": "\nenableLanguageFeature\nEnables the specified language feature. The available values correspond to the language features that are currently experimental or have been introduced as such at some point.\n"}, {"type": "td", "text": "enableLanguageFeature"}, {"type": "code", "text": "enableLanguageFeature"}, {"type": "td", "text": "Enables the specified language feature. The available values correspond to the language features that are currently experimental or have been introduced as such at some point."}, {"type": "tr", "text": "\nuseExperimentalAnnotation\nAllows using the specified opt-in annotation.\n"}, {"type": "td", "text": "useExperimentalAnnotation"}, {"type": "code", "text": "useExperimentalAnnotation"}, {"type": "td", "text": "Allows using the specified opt-in annotation."}, {"type": "a", "text": "opt-in annotation"}, {"type": "tr", "text": "\nprogressiveMode\nEnables the progressive mode.\n"}, {"type": "td", "text": "progressiveMode"}, {"type": "code", "text": "progressiveMode"}, {"type": "td", "text": "Enables the progressive mode."}, {"type": "a", "text": "progressive mode"}, {"type": "div", "text": "\n\nkotlin {\n    sourceSets {\n        commonMain {\n            languageSettings {\n                languageVersion = '1.3' // possible values: '1.0', '1.1', '1.2', '1.3'\n                apiVersion = '1.3' // possible values: '1.0', '1.1', '1.2', '1.3'\n                enableLanguageFeature('InlineClasses') // language feature name\n                useExperimentalAnnotation('kotlin.ExperimentalUnsignedTypes') // annotation FQ-name\n                progressiveMode = true // false by default\n            }\n        }\n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin {\n    sourceSets {\n        commonMain {\n            languageSettings {\n                languageVersion = '1.3' // possible values: '1.0', '1.1', '1.2', '1.3'\n                apiVersion = '1.3' // possible values: '1.0', '1.1', '1.2', '1.3'\n                enableLanguageFeature('InlineClasses') // language feature name\n                useExperimentalAnnotation('kotlin.ExperimentalUnsignedTypes') // annotation FQ-name\n                progressiveMode = true // false by default\n            }\n        }\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    sourceSets {\n        commonMain {\n            languageSettings {\n                languageVersion = '1.3' // possible values: '1.0', '1.1', '1.2', '1.3'\n                apiVersion = '1.3' // possible values: '1.0', '1.1', '1.2', '1.3'\n                enableLanguageFeature('InlineClasses') // language feature name\n                useExperimentalAnnotation('kotlin.ExperimentalUnsignedTypes') // annotation FQ-name\n                progressiveMode = true // false by default\n            }\n        }\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    sourceSets {\n        commonMain {\n            languageSettings {\n                languageVersion = '1.3' // possible values: '1.0', '1.1', '1.2', '1.3'\n                apiVersion = '1.3' // possible values: '1.0', '1.1', '1.2', '1.3'\n                enableLanguageFeature('InlineClasses') // language feature name\n                useExperimentalAnnotation('kotlin.ExperimentalUnsignedTypes') // annotation FQ-name\n                progressiveMode = true // false by default\n            }\n        }\n    }\n}\n"}, {"type": "div", "text": "\n\nkotlin {\n    sourceSets {\n        val commonMain by getting {\n            languageSettings.apply {\n                languageVersion = \"1.3\" // possible values: '1.0', '1.1', '1.2', '1.3'\n                apiVersion = \"1.3\" // possible values: '1.0', '1.1', '1.2', '1.3'\n                enableLanguageFeature(\"InlineClasses\") // language feature name\n                useExperimentalAnnotation(\"kotlin.ExperimentalUnsignedTypes\") // annotation FQ-name\n                progressiveMode = true // false by default\n            }\n        }\n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin {\n    sourceSets {\n        val commonMain by getting {\n            languageSettings.apply {\n                languageVersion = \"1.3\" // possible values: '1.0', '1.1', '1.2', '1.3'\n                apiVersion = \"1.3\" // possible values: '1.0', '1.1', '1.2', '1.3'\n                enableLanguageFeature(\"InlineClasses\") // language feature name\n                useExperimentalAnnotation(\"kotlin.ExperimentalUnsignedTypes\") // annotation FQ-name\n                progressiveMode = true // false by default\n            }\n        }\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    sourceSets {\n        val commonMain by getting {\n            languageSettings.apply {\n                languageVersion = \"1.3\" // possible values: '1.0', '1.1', '1.2', '1.3'\n                apiVersion = \"1.3\" // possible values: '1.0', '1.1', '1.2', '1.3'\n                enableLanguageFeature(\"InlineClasses\") // language feature name\n                useExperimentalAnnotation(\"kotlin.ExperimentalUnsignedTypes\") // annotation FQ-name\n                progressiveMode = true // false by default\n            }\n        }\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    sourceSets {\n        val commonMain by getting {\n            languageSettings.apply {\n                languageVersion = \"1.3\" // possible values: '1.0', '1.1', '1.2', '1.3'\n                apiVersion = \"1.3\" // possible values: '1.0', '1.1', '1.2', '1.3'\n                enableLanguageFeature(\"InlineClasses\") // language feature name\n                useExperimentalAnnotation(\"kotlin.ExperimentalUnsignedTypes\") // annotation FQ-name\n                progressiveMode = true // false by default\n            }\n        }\n    }\n}\n"}]