[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Kotlin/Native Gradle plugin"}, {"type": "p", "text": "Since 1.3.40, a separate Gradle plugin for Kotlin/Native is deprecated in favor of the kotlin-multiplatform plugin.\nThis plugin provides an IDE support along with support of the new multiplatform project model introduced in Kotlin 1.3.0.\nBelow you can find a short list of differences between kotlin-platform-native and kotlin-muliplatform plugins. \nFor more information see the kotlin-muliplatform documentation page.\nFor kotlin-platform-native reference see the corresponding section."}, {"type": "code", "text": "kotlin-multiplatform"}, {"type": "code", "text": "kotlin-platform-native"}, {"type": "code", "text": "kotlin-muliplatform"}, {"type": "code", "text": "kotlin-muliplatform"}, {"type": "a", "text": "documentation page"}, {"type": "code", "text": "kotlin-platform-native"}, {"type": "a", "text": "corresponding section"}, {"type": "h3", "text": "Applying the multiplatform plugin"}, {"type": "p", "text": "To apply the kotlin-multiplatform plugin, just add the following snippet into your build script:"}, {"type": "code", "text": "kotlin-multiplatform"}, {"type": "div", "text": "\nplugins {\n    id(\"org.jetbrains.kotlin.multiplatform\") version '1.3.40'\n}\n\n"}, {"type": "pre", "text": "plugins {\n    id(\"org.jetbrains.kotlin.multiplatform\") version '1.3.40'\n}\n"}, {"type": "code", "text": "plugins {\n    id(\"org.jetbrains.kotlin.multiplatform\") version '1.3.40'\n}\n"}, {"type": "h3", "text": "Managing targets"}, {"type": "p", "text": "With the kotlin-platform-native plugin a set of target platforms is specified as a list in properties of the main component:"}, {"type": "code", "text": "kotlin-platform-native"}, {"type": "div", "text": "\ncomponents.main {\n    targets = ['macos_x64', 'linux_x64', 'mingw_x64']\n}\n\n"}, {"type": "pre", "text": "components.main {\n    targets = ['macos_x64', 'linux_x64', 'mingw_x64']\n}\n"}, {"type": "code", "text": "components.main {\n    targets = ['macos_x64', 'linux_x64', 'mingw_x64']\n}\n"}, {"type": "p", "text": "With the kotlin-multiplatform plugin target platforms can be added into a project using special methods available in the kotlin extension.\nEach method adds into a project one target which can be accessed using the targets property. Each target can be configured independently\nincluding output kinds, additional compiler options etc. See details about targets at the corresponding page."}, {"type": "code", "text": "kotlin-multiplatform"}, {"type": "code", "text": "kotlin"}, {"type": "strong", "text": "target"}, {"type": "code", "text": "targets"}, {"type": "a", "text": "corresponding page"}, {"type": "div", "text": "\nimport org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget\n\nkotlin {\n    // These targets are declared without any target-specific settings. \n    macosX64()\n    linuxX64()\n    \n    // You can specify a custom name used to access the target.\n    mingwX64(\"windows\") \n    \n    iosArm64 {\n        // Additional settings for ios_arm64.\n    }\n    \n    // You can access declared targets using the `targets` property.\n    println(targets.macosX64)\n    println(targets.windows)\n    \n    // You also can configure all native targets in a single block.\n    targets.withType(KotlinNativeTarget) {\n        // Native target configuration.\n    }\n}\n\n"}, {"type": "pre", "text": "import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget\n\nkotlin {\n    // These targets are declared without any target-specific settings. \n    macosX64()\n    linuxX64()\n    \n    // You can specify a custom name used to access the target.\n    mingwX64(\"windows\") \n    \n    iosArm64 {\n        // Additional settings for ios_arm64.\n    }\n    \n    // You can access declared targets using the `targets` property.\n    println(targets.macosX64)\n    println(targets.windows)\n    \n    // You also can configure all native targets in a single block.\n    targets.withType(KotlinNativeTarget) {\n        // Native target configuration.\n    }\n}\n"}, {"type": "code", "text": "import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget\n\nkotlin {\n    // These targets are declared without any target-specific settings. \n    macosX64()\n    linuxX64()\n    \n    // You can specify a custom name used to access the target.\n    mingwX64(\"windows\") \n    \n    iosArm64 {\n        // Additional settings for ios_arm64.\n    }\n    \n    // You can access declared targets using the `targets` property.\n    println(targets.macosX64)\n    println(targets.windows)\n    \n    // You also can configure all native targets in a single block.\n    targets.withType(KotlinNativeTarget) {\n        // Native target configuration.\n    }\n}\n"}, {"type": "p", "text": "Each target includes two compilations: main and test compiling product and test sources respectively. A compilation is an abstraction\nover a compiler invocation and described at the corresponding page."}, {"type": "strong", "text": "compilations"}, {"type": "code", "text": "main"}, {"type": "code", "text": "test"}, {"type": "a", "text": "corresponding page"}, {"type": "h3", "text": "Managing sources"}, {"type": "p", "text": "With the kotlin-platform-native plugin source sets are used to separate test and product sources. Also you can specify different sources\nfor different platforms in the same source set:"}, {"type": "code", "text": "kotlin-platform-native"}, {"type": "div", "text": "\nsourceSets {\n    // Adding target-independent sources.\n    main.kotlin.srcDirs += 'src/main/mySources'\n    \n    // Adding Linux-specific code.\n    main.target('linux_x64').srcDirs += 'src/main/linux'\n}\n\n"}, {"type": "pre", "text": "sourceSets {\n    // Adding target-independent sources.\n    main.kotlin.srcDirs += 'src/main/mySources'\n    \n    // Adding Linux-specific code.\n    main.target('linux_x64').srcDirs += 'src/main/linux'\n}\n"}, {"type": "code", "text": "sourceSets {\n    // Adding target-independent sources.\n    main.kotlin.srcDirs += 'src/main/mySources'\n    \n    // Adding Linux-specific code.\n    main.target('linux_x64').srcDirs += 'src/main/linux'\n}\n"}, {"type": "p", "text": "With the kotlin-multiplatform plugin source sets are also used to group sources but source files for different platforms are located in different source sets.\nFor each declared target two source sets are created: <target-name>Main and <target-name>Test containing product and test sources for this platform. Common for all\nplatforms sources are located in commonMain and commonTest source sets created by default. More information about source sets can be found\nhere."}, {"type": "code", "text": "kotlin-multiplatform"}, {"type": "strong", "text": "source"}, {"type": "strong", "text": "sets"}, {"type": "code", "text": "<target-name>Main"}, {"type": "code", "text": "<target-name>Test"}, {"type": "code", "text": "commonMain"}, {"type": "code", "text": "commonTest"}, {"type": "a", "text": "here"}, {"type": "div", "text": "\nkotlin {\n    sourceSets {\n        // Adding target-independent sources.\n        commonMain.kotlin.srcDirs += file(\"src/main/mySources\")\n\n        // Adding Linux-specific code.\n        linuxX64Main.kotlin.srcDirs += file(\"src/main/linux\")\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    sourceSets {\n        // Adding target-independent sources.\n        commonMain.kotlin.srcDirs += file(\"src/main/mySources\")\n\n        // Adding Linux-specific code.\n        linuxX64Main.kotlin.srcDirs += file(\"src/main/linux\")\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    sourceSets {\n        // Adding target-independent sources.\n        commonMain.kotlin.srcDirs += file(\"src/main/mySources\")\n\n        // Adding Linux-specific code.\n        linuxX64Main.kotlin.srcDirs += file(\"src/main/linux\")\n    }\n}\n"}, {"type": "h3", "text": "Managing dependencies"}, {"type": "p", "text": "With the kotlin-platform-native plugin dependencies are configured in a traditional for Gradle way by grouping them into configurations\nusing the project dependencies block:"}, {"type": "code", "text": "kotlin-platform-native"}, {"type": "code", "text": "dependencies"}, {"type": "div", "text": "\ndependencies {\n    implementation 'org.sample.test:mylibrary:1.0'\n    testImplementation 'org.sample.test:testlibrary:1.0'\n}\n\n"}, {"type": "pre", "text": "dependencies {\n    implementation 'org.sample.test:mylibrary:1.0'\n    testImplementation 'org.sample.test:testlibrary:1.0'\n}\n"}, {"type": "code", "text": "dependencies {\n    implementation 'org.sample.test:mylibrary:1.0'\n    testImplementation 'org.sample.test:testlibrary:1.0'\n}\n"}, {"type": "p", "text": "The kotlin-multiplatform plugin also uses configurations under the hood but it also provides a dependencies block for each source set\nallowing configuring dependencies of this sources set:"}, {"type": "code", "text": "kotlin-multiplatform"}, {"type": "code", "text": "dependencies"}, {"type": "div", "text": "\nkotlin.sourceSets {\n    commonMain {\n        dependencies {\n            implementation(\"org.sample.test:mylibrary:1.0\")\n        }\n    }\n    \n    commonTest {\n        dependencies {\n            implementation(\"org.sample.test:testlibrary:1.0\")\n        }\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin.sourceSets {\n    commonMain {\n        dependencies {\n            implementation(\"org.sample.test:mylibrary:1.0\")\n        }\n    }\n    \n    commonTest {\n        dependencies {\n            implementation(\"org.sample.test:testlibrary:1.0\")\n        }\n    }\n}\n"}, {"type": "code", "text": "kotlin.sourceSets {\n    commonMain {\n        dependencies {\n            implementation(\"org.sample.test:mylibrary:1.0\")\n        }\n    }\n    \n    commonTest {\n        dependencies {\n            implementation(\"org.sample.test:testlibrary:1.0\")\n        }\n    }\n}\n"}, {"type": "p", "text": "Note that a module referenced by a dependency declared for commonMain or commonTest source set must be published using the kotlin-multiplatform plugin.\nIf you want to use libraries published by the kotlin-platform-native plugin, you need to declare a separate source set for common native sources."}, {"type": "code", "text": "commonMain"}, {"type": "code", "text": "commonTest"}, {"type": "code", "text": "kotlin-multiplatform"}, {"type": "code", "text": "kotlin-platform-native"}, {"type": "div", "text": "\nkotlin.sourceSets {\n    // Create a common source set used by native targets only.\n    nativeMain {\n        dependsOn(commonMain)\n        dependencies {\n            // Depend on a library published by the kotlin-platform-naive plugin.\n            implementation(\"org.sample.test:mylibrary:1.0\")\n        }\n    }\n\n    // Configure all native platform sources sets to use it as a common one.\n    linuxX64Main.dependsOn(nativeMain)\n    macosX64Main.dependsOn(nativeMain)\n    //...\n}\n\n"}, {"type": "pre", "text": "kotlin.sourceSets {\n    // Create a common source set used by native targets only.\n    nativeMain {\n        dependsOn(commonMain)\n        dependencies {\n            // Depend on a library published by the kotlin-platform-naive plugin.\n            implementation(\"org.sample.test:mylibrary:1.0\")\n        }\n    }\n\n    // Configure all native platform sources sets to use it as a common one.\n    linuxX64Main.dependsOn(nativeMain)\n    macosX64Main.dependsOn(nativeMain)\n    //...\n}\n"}, {"type": "code", "text": "kotlin.sourceSets {\n    // Create a common source set used by native targets only.\n    nativeMain {\n        dependsOn(commonMain)\n        dependencies {\n            // Depend on a library published by the kotlin-platform-naive plugin.\n            implementation(\"org.sample.test:mylibrary:1.0\")\n        }\n    }\n\n    // Configure all native platform sources sets to use it as a common one.\n    linuxX64Main.dependsOn(nativeMain)\n    macosX64Main.dependsOn(nativeMain)\n    //...\n}\n"}, {"type": "p", "text": "See more info about dependencies at the corresponding page."}, {"type": "a", "text": "corresponding page"}, {"type": "h3", "text": "Output kinds"}, {"type": "p", "text": "With the kotlin-platform-native plugin output kinds are specified as a list in properties of a component:"}, {"type": "code", "text": "kotlin-platform-native"}, {"type": "div", "text": "\ncomponents.main {\n    // Compile the component into an executable and a Kotlin/Native library.\n    outputKinds = [EXECUTABLE, KLIBRARY]\n}\n\n"}, {"type": "pre", "text": "components.main {\n    // Compile the component into an executable and a Kotlin/Native library.\n    outputKinds = [EXECUTABLE, KLIBRARY]\n}\n"}, {"type": "code", "text": "components.main {\n    // Compile the component into an executable and a Kotlin/Native library.\n    outputKinds = [EXECUTABLE, KLIBRARY]\n}\n"}, {"type": "p", "text": "With the kotlin-multiplatform plugin a compilation always produces a *.klib file. A separate binaries block is used to configure what\nfinal native binaries should be produced by each target. Each binary can be configured independently including linker options, executable entry point etc."}, {"type": "code", "text": "kotlin-multiplatform"}, {"type": "code", "text": "*.klib"}, {"type": "code", "text": "binaries"}, {"type": "div", "text": "\nkotlin {\n    macosX64 {\n        binaries {\n            executable {\n                // Binary configuration: linker options, name, etc.\n            }\n            framework {\n                // ...\n            }\n            \n        }\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    macosX64 {\n        binaries {\n            executable {\n                // Binary configuration: linker options, name, etc.\n            }\n            framework {\n                // ...\n            }\n            \n        }\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    macosX64 {\n        binaries {\n            executable {\n                // Binary configuration: linker options, name, etc.\n            }\n            framework {\n                // ...\n            }\n            \n        }\n    }\n}\n"}, {"type": "p", "text": "See more about native binaries declaration at the corresponding page."}, {"type": "a", "text": "corresponding page"}, {"type": "h3", "text": "Publishing"}, {"type": "p", "text": "Both kotlin-platform-native and kotlin-multiplatform plugins automatically set up artifact publication when the\nmaven-publish plugin is applied. See details about publication at the corresponding page.\nNote that currently only Kotlin/Native libraries (*.klib) can be published for native targets."}, {"type": "code", "text": "kotlin-platform-native"}, {"type": "code", "text": "kotlin-multiplatform"}, {"type": "code", "text": "maven-publish"}, {"type": "a", "text": "corresponding page"}, {"type": "code", "text": "*.klib"}, {"type": "h3", "text": "Cinterop support"}, {"type": "p", "text": "With the kotlin-platform-native plugin interop with a native library can be declared in component dependencies:"}, {"type": "code", "text": "kotlin-platform-native"}, {"type": "div", "text": "\ncomponents.main {\n    dependencies {\n        cinterop('mystdio') {\n            // Cinterop configuration.\n        }\n    }\n}\n\n"}, {"type": "pre", "text": "components.main {\n    dependencies {\n        cinterop('mystdio') {\n            // Cinterop configuration.\n        }\n    }\n}\n"}, {"type": "code", "text": "components.main {\n    dependencies {\n        cinterop('mystdio') {\n            // Cinterop configuration.\n        }\n    }\n}\n"}, {"type": "p", "text": "With the kotlin-multiplatform plugin interops are configured as a part of a compilation (see details here).\nThe rest of an interop configuration is the same as for the kotlin-platform-native plugin."}, {"type": "code", "text": "kotlin-multiplatform"}, {"type": "a", "text": "here"}, {"type": "code", "text": "kotlin-platform-native"}, {"type": "div", "text": "\nkotlin {\n    macosX64 {\n        compilations.main.cinterops {\n            mystdio {\n                // Cinterop configuration.\n            }\n        }\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    macosX64 {\n        compilations.main.cinterops {\n            mystdio {\n                // Cinterop configuration.\n            }\n        }\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    macosX64 {\n        compilations.main.cinterops {\n            mystdio {\n                // Cinterop configuration.\n            }\n        }\n    }\n}\n"}, {"type": "h2", "text": "kotlin-platform-native reference"}, {"type": "code", "text": "kotlin-platform-native"}, {"type": "h3", "text": "Overview"}, {"type": "p", "text": "You may use the Gradle plugin to build Kotlin/Native projects. Builds of the plugin are\navailable at the Gradle plugin portal, so you can apply it\nusing Gradle plugin DSL:"}, {"type": "em", "text": "Kotlin/Native"}, {"type": "a", "text": "available"}, {"type": "div", "text": "\nplugins {\n    id \"org.jetbrains.kotlin.platform.native\" version \"1.3.0-rc-146\"\n}\n\n"}, {"type": "pre", "text": "plugins {\n    id \"org.jetbrains.kotlin.platform.native\" version \"1.3.0-rc-146\"\n}\n"}, {"type": "code", "text": "plugins {\n    id \"org.jetbrains.kotlin.platform.native\" version \"1.3.0-rc-146\"\n}\n"}, {"type": "p", "text": "You also can get the plugin from a Bintray repository. In addition to releases, this repo contains old and development\nversions of the plugin which are not available at the plugin portal. To get the plugin from the Bintray repo, include\nthe following snippet in your build script:"}, {"type": "div", "text": "\nbuildscript {\n   repositories {\n       mavenCentral()\n       maven {\n           url \"https://dl.bintray.com/jetbrains/kotlin-native-dependencies\"\n       }\n   }\n\n   dependencies {\n       classpath \"org.jetbrains.kotlin:kotlin-native-gradle-plugin:1.3.0-rc-146\"\n   }\n}\n\napply plugin: 'org.jetbrains.kotlin.platform.native'\n\n"}, {"type": "pre", "text": "buildscript {\n   repositories {\n       mavenCentral()\n       maven {\n           url \"https://dl.bintray.com/jetbrains/kotlin-native-dependencies\"\n       }\n   }\n\n   dependencies {\n       classpath \"org.jetbrains.kotlin:kotlin-native-gradle-plugin:1.3.0-rc-146\"\n   }\n}\n\napply plugin: 'org.jetbrains.kotlin.platform.native'\n"}, {"type": "code", "text": "buildscript {\n   repositories {\n       mavenCentral()\n       maven {\n           url \"https://dl.bintray.com/jetbrains/kotlin-native-dependencies\"\n       }\n   }\n\n   dependencies {\n       classpath \"org.jetbrains.kotlin:kotlin-native-gradle-plugin:1.3.0-rc-146\"\n   }\n}\n\napply plugin: 'org.jetbrains.kotlin.platform.native'\n"}, {"type": "p", "text": "By default the plugin downloads the Kotlin/Native compiler during the first run. If you have already downloaded the compiler\nmanually you can specify the path to its root directory using org.jetbrains.kotlin.native.home project property (e.g. in gradle.properties)."}, {"type": "code", "text": "org.jetbrains.kotlin.native.home"}, {"type": "code", "text": "gradle.properties"}, {"type": "div", "text": "\norg.jetbrains.kotlin.native.home=/home/user/kotlin-native-0.8\n\n"}, {"type": "pre", "text": "org.jetbrains.kotlin.native.home=/home/user/kotlin-native-0.8\n"}, {"type": "code", "text": "org.jetbrains.kotlin.native.home=/home/user/kotlin-native-0.8\n"}, {"type": "p", "text": "In this case the compiler will not be downloaded by the plugin."}, {"type": "h3", "text": "Source management"}, {"type": "p", "text": "Source management in the kotlin.platform.native plugin is uniform with other Kotlin plugins and is based on source sets.\nA source set is a group of Kotlin/Native source which may contain both common and platform-specific code. The plugin\nprovides a top-level script block sourceSets allowing you to configure source sets. Also it creates the default\nsource sets main and test (for production and test code respectively)."}, {"type": "code", "text": "kotlin.platform.native"}, {"type": "code", "text": "sourceSets"}, {"type": "code", "text": "main"}, {"type": "code", "text": "test"}, {"type": "p", "text": "By default the production sources are located in src/main/kotlin and the test sources - in src/test/kotlin."}, {"type": "code", "text": "src/main/kotlin"}, {"type": "code", "text": "src/test/kotlin"}, {"type": "div", "text": "\nsourceSets {\n    // Adding target-independent sources.\n    main.kotlin.srcDirs += 'src/main/mySources'\n    \n    // Adding Linux-specific code. It will be compiled in Linux binaries only.\n    main.target('linux_x64').srcDirs += 'src/main/linux'\n}\n\n"}, {"type": "pre", "text": "sourceSets {\n    // Adding target-independent sources.\n    main.kotlin.srcDirs += 'src/main/mySources'\n    \n    // Adding Linux-specific code. It will be compiled in Linux binaries only.\n    main.target('linux_x64').srcDirs += 'src/main/linux'\n}\n"}, {"type": "code", "text": "sourceSets {\n    // Adding target-independent sources.\n    main.kotlin.srcDirs += 'src/main/mySources'\n    \n    // Adding Linux-specific code. It will be compiled in Linux binaries only.\n    main.target('linux_x64').srcDirs += 'src/main/linux'\n}\n"}, {"type": "h3", "text": "Targets and output kinds"}, {"type": "p", "text": "By default the plugin creates software components for the main and test source sets. You can access them via the\ncomponents container provided by Gradle or via the component property of a corresponding source set:"}, {"type": "code", "text": "components"}, {"type": "code", "text": "component"}, {"type": "div", "text": "\n// Main component.\ncomponents.main\nsourceSets.main.component\n\n// Test component.\ncomponents.test\nsourceSets.test.component\n\n"}, {"type": "pre", "text": "// Main component.\ncomponents.main\nsourceSets.main.component\n\n// Test component.\ncomponents.test\nsourceSets.test.component\n"}, {"type": "code", "text": "// Main component.\ncomponents.main\nsourceSets.main.component\n\n// Test component.\ncomponents.test\nsourceSets.test.component\n"}, {"type": "p", "text": "Components allow you to specify:"}, {"type": "ul", "text": "\nTargets (e.g. Linux/x64 or iOS/arm64 etc)\nOutput kinds (e.g. executable, library, framework etc)\nDependencies (including interop ones)\n"}, {"type": "li", "text": "Targets (e.g. Linux/x64 or iOS/arm64 etc)"}, {"type": "li", "text": "Output kinds (e.g. executable, library, framework etc)"}, {"type": "li", "text": "Dependencies (including interop ones)"}, {"type": "p", "text": "Targets can be specified by setting a corresponding component property:"}, {"type": "div", "text": "\ncomponents.main {\n    // Compile this component for 64-bit MacOS, Linux and Windows.\n    targets = ['macos_x64', 'linux_x64', 'mingw_x64']\n}\n\n"}, {"type": "pre", "text": "components.main {\n    // Compile this component for 64-bit MacOS, Linux and Windows.\n    targets = ['macos_x64', 'linux_x64', 'mingw_x64']\n}\n"}, {"type": "code", "text": "components.main {\n    // Compile this component for 64-bit MacOS, Linux and Windows.\n    targets = ['macos_x64', 'linux_x64', 'mingw_x64']\n}\n"}, {"type": "p", "text": "The plugin uses the same notation as the compiler. By default, test component uses the same targets as specified for the main one."}, {"type": "p", "text": "Output kinds can also be specified using a special property:"}, {"type": "div", "text": "\ncomponents.main {\n    // Compile the component into an executable and a Kotlin/Native library.\n    outputKinds = [EXECUTABLE, KLIBRARY]\n}\n\n"}, {"type": "pre", "text": "components.main {\n    // Compile the component into an executable and a Kotlin/Native library.\n    outputKinds = [EXECUTABLE, KLIBRARY]\n}\n"}, {"type": "code", "text": "components.main {\n    // Compile the component into an executable and a Kotlin/Native library.\n    outputKinds = [EXECUTABLE, KLIBRARY]\n}\n"}, {"type": "p", "text": "All constants used here are available inside a component configuration script block.\nThe plugin supports producing binaries of the following kinds:"}, {"type": "ul", "text": "\nEXECUTABLE - an executable file;\nKLIBRARY - a Kotlin/Native library (*.klib);\nFRAMEWORK - an Objective-C framework;\nDYNAMIC - shared native library;\nSTATIC - static native library.\n"}, {"type": "li", "text": "EXECUTABLE - an executable file;"}, {"type": "code", "text": "EXECUTABLE"}, {"type": "li", "text": "KLIBRARY - a Kotlin/Native library (*.klib);"}, {"type": "code", "text": "KLIBRARY"}, {"type": "li", "text": "FRAMEWORK - an Objective-C framework;"}, {"type": "code", "text": "FRAMEWORK"}, {"type": "li", "text": "DYNAMIC - shared native library;"}, {"type": "code", "text": "DYNAMIC"}, {"type": "li", "text": "STATIC - static native library."}, {"type": "code", "text": "STATIC"}, {"type": "p", "text": "Also each native binary is built in two variants (build types): debug (debuggable, not optimized) and release (not debuggable, optimized).\nNote that Kotlin/Native libraries have only debug variant because optimizations are preformed only during compilation\nof a final binary (executable, static lib etc) and affect all libraries used to build it."}, {"type": "code", "text": "debug"}, {"type": "code", "text": "release"}, {"type": "code", "text": "debug"}, {"type": "h3", "text": "Compile tasks"}, {"type": "p", "text": "The plugin creates a compilation task for each combination of the target, output kind, and build type. The tasks have the following naming convention:"}, {"type": "pre", "text": "compile<ComponentName><BuildType><OutputKind><Target>KotlinNative\n"}, {"type": "code", "text": "compile<ComponentName><BuildType><OutputKind><Target>KotlinNative\n"}, {"type": "p", "text": "For example compileDebugKlibraryMacos_x64KotlinNative, compileTestDebugKotlinNative."}, {"type": "code", "text": "compileDebugKlibraryMacos_x64KotlinNative"}, {"type": "code", "text": "compileTestDebugKotlinNative"}, {"type": "p", "text": "The name contains the following parts (some of them may be empty):"}, {"type": "ul", "text": "\n<ComponentName> - name of a component. Empty for the main component.\n<BuildType> - Debug or Release.\n<OutputKind> - output kind name, e.g. Executabe or Dynamic. Empty if the component has only one output kind.\n<Target> - target the component is built for, e.g. Macos_x64 or Wasm32. Empty if the component is built only for one target.\n"}, {"type": "li", "text": "<ComponentName> - name of a component. Empty for the main component."}, {"type": "code", "text": "<ComponentName>"}, {"type": "li", "text": "<BuildType> - Debug or Release."}, {"type": "code", "text": "<BuildType>"}, {"type": "code", "text": "Debug"}, {"type": "code", "text": "Release"}, {"type": "li", "text": "<OutputKind> - output kind name, e.g. Executabe or Dynamic. Empty if the component has only one output kind."}, {"type": "code", "text": "<OutputKind>"}, {"type": "code", "text": "Executabe"}, {"type": "code", "text": "Dynamic"}, {"type": "li", "text": "<Target> - target the component is built for, e.g. Macos_x64 or Wasm32. Empty if the component is built only for one target."}, {"type": "code", "text": "<Target>"}, {"type": "code", "text": "Macos_x64"}, {"type": "code", "text": "Wasm32"}, {"type": "p", "text": "Also the plugin creates a number of aggregate tasks allowing you to build all the binaries for a build type (e.g.\nassembleAllDebug) or all the binaries for a particular target (e.g. assembleAllWasm32)."}, {"type": "code", "text": "assembleAllDebug"}, {"type": "code", "text": "assembleAllWasm32"}, {"type": "p", "text": "Basic lifecycle tasks like assemble, build, and clean are also available."}, {"type": "code", "text": "assemble"}, {"type": "code", "text": "build"}, {"type": "code", "text": "clean"}, {"type": "h3", "text": "Running tests"}, {"type": "p", "text": "The plugin builds a test executable for all the targets specified for the test component. If the current host platform is\nincluded in this list the test running tasks are also created. To run tests, execute the standard lifecycle check task:"}, {"type": "code", "text": "test"}, {"type": "code", "text": "check"}, {"type": "div", "text": "\n./gradlew check\n\n"}, {"type": "pre", "text": "./gradlew check\n"}, {"type": "code", "text": "./gradlew check\n"}, {"type": "h3", "text": "Dependencies"}, {"type": "p", "text": "The plugin allows you to declare dependencies on files and other projects using traditional Gradle's mechanism of\nconfigurations. The plugin supports Kotlin multiplatform projects allowing you to declare the expectedBy dependencies"}, {"type": "code", "text": "expectedBy"}, {"type": "div", "text": "\ndependencies {\n    implementation files('path/to/file/dependencies')\n    implementation project('library')\n    testImplementation project('testLibrary')\n    expectedBy project('common')\n}\n\n"}, {"type": "pre", "text": "dependencies {\n    implementation files('path/to/file/dependencies')\n    implementation project('library')\n    testImplementation project('testLibrary')\n    expectedBy project('common')\n}\n"}, {"type": "code", "text": "dependencies {\n    implementation files('path/to/file/dependencies')\n    implementation project('library')\n    testImplementation project('testLibrary')\n    expectedBy project('common')\n}\n"}, {"type": "p", "text": "It's possible to depend on a Kotlin/Native library published earlier in a maven repo. The plugin relies on Gradle's\nmetadata\nsupport so the corresponding feature must be enabled. Add the following line in your settings.gradle:"}, {"type": "a", "text": "metadata"}, {"type": "code", "text": "settings.gradle"}, {"type": "div", "text": "\nenableFeaturePreview('GRADLE_METADATA')\n\n"}, {"type": "pre", "text": "enableFeaturePreview('GRADLE_METADATA')\n"}, {"type": "code", "text": "enableFeaturePreview('GRADLE_METADATA')\n"}, {"type": "p", "text": "Now you can declare a dependency on a Kotlin/Native library in the traditional group:artifact:version notation:"}, {"type": "code", "text": "group:artifact:version"}, {"type": "div", "text": "\ndependencies {\n    implementation 'org.sample.test:mylibrary:1.0'\n    testImplementation 'org.sample.test:testlibrary:1.0'\n}\n\n"}, {"type": "pre", "text": "dependencies {\n    implementation 'org.sample.test:mylibrary:1.0'\n    testImplementation 'org.sample.test:testlibrary:1.0'\n}\n"}, {"type": "code", "text": "dependencies {\n    implementation 'org.sample.test:mylibrary:1.0'\n    testImplementation 'org.sample.test:testlibrary:1.0'\n}\n"}, {"type": "p", "text": "Dependency declaration is also possible in the component block:"}, {"type": "div", "text": "\ncomponents.main {\n    dependencies {\n        implementation 'org.sample.test:mylibrary:1.0'\n    }\n}\n\ncomponents.test {\n    dependencies {\n        implementation 'org.sample.test:testlibrary:1.0'\n    }\n}\n\n"}, {"type": "pre", "text": "components.main {\n    dependencies {\n        implementation 'org.sample.test:mylibrary:1.0'\n    }\n}\n\ncomponents.test {\n    dependencies {\n        implementation 'org.sample.test:testlibrary:1.0'\n    }\n}\n"}, {"type": "code", "text": "components.main {\n    dependencies {\n        implementation 'org.sample.test:mylibrary:1.0'\n    }\n}\n\ncomponents.test {\n    dependencies {\n        implementation 'org.sample.test:testlibrary:1.0'\n    }\n}\n"}, {"type": "h3", "text": "Using cinterop"}, {"type": "p", "text": "It's possible to declare a cinterop dependency for a component:"}, {"type": "div", "text": "\ncomponents.main {\n    dependencies {\n        cinterop('mystdio') {\n            // src/main/c_interop/mystdio.def is used as a def file.\n\n            // Set up compiler options\n            compilerOpts '-I/my/include/path'\n\n            // It's possible to set up different options for different targets\n            target('linux') {\n                compilerOpts '-I/linux/include/path'\n            }\n        }\n    }\n}\n\n"}, {"type": "pre", "text": "components.main {\n    dependencies {\n        cinterop('mystdio') {\n            // src/main/c_interop/mystdio.def is used as a def file.\n\n            // Set up compiler options\n            compilerOpts '-I/my/include/path'\n\n            // It's possible to set up different options for different targets\n            target('linux') {\n                compilerOpts '-I/linux/include/path'\n            }\n        }\n    }\n}\n"}, {"type": "code", "text": "components.main {\n    dependencies {\n        cinterop('mystdio') {\n            // src/main/c_interop/mystdio.def is used as a def file.\n\n            // Set up compiler options\n            compilerOpts '-I/my/include/path'\n\n            // It's possible to set up different options for different targets\n            target('linux') {\n                compilerOpts '-I/linux/include/path'\n            }\n        }\n    }\n}\n"}, {"type": "p", "text": "Here an interop library will be built and added in the component dependencies."}, {"type": "p", "text": "Often it's necessary to specify target-specific linker options for a Kotlin/Native binary using an interop. It can be\ndone using the target script block:"}, {"type": "code", "text": "target"}, {"type": "div", "text": "\ncomponents.main {\n    target('linux') {\n        linkerOpts '-L/path/to/linux/libs'\n    }\n}\n\n"}, {"type": "pre", "text": "components.main {\n    target('linux') {\n        linkerOpts '-L/path/to/linux/libs'\n    }\n}\n"}, {"type": "code", "text": "components.main {\n    target('linux') {\n        linkerOpts '-L/path/to/linux/libs'\n    }\n}\n"}, {"type": "p", "text": "Also the allTargets block is available."}, {"type": "code", "text": "allTargets"}, {"type": "div", "text": "\ncomponents.main {\n    // Configure all targets.\n    allTargets {\n        linkerOpts '-L/path/to/libs'\n    }\n}\n\n"}, {"type": "pre", "text": "components.main {\n    // Configure all targets.\n    allTargets {\n        linkerOpts '-L/path/to/libs'\n    }\n}\n"}, {"type": "code", "text": "components.main {\n    // Configure all targets.\n    allTargets {\n        linkerOpts '-L/path/to/libs'\n    }\n}\n"}, {"type": "h3", "text": "Publishing"}, {"type": "p", "text": "In the presence of maven-publish plugin the publications for all the binaries built are created. The plugin uses Gradle\nmetadata to publish the artifacts so this feature must be enabled (see the dependencies section)."}, {"type": "code", "text": "maven-publish"}, {"type": "a", "text": "dependencies"}, {"type": "p", "text": "Now you can publish the artifacts with the standard Gradle publish task:"}, {"type": "code", "text": "publish"}, {"type": "div", "text": "\n./gradlew publish\n\n"}, {"type": "pre", "text": "./gradlew publish\n"}, {"type": "code", "text": "./gradlew publish\n"}, {"type": "p", "text": "Only EXECUTABLE and KLIBRARY binaries are published currently."}, {"type": "code", "text": "EXECUTABLE"}, {"type": "code", "text": "KLIBRARY"}, {"type": "p", "text": "The plugin allows you to customize the pom generated for the publication with the pom code block available for every component:"}, {"type": "code", "text": "pom"}, {"type": "div", "text": "\ncomponents.main {\n    pom {\n        withXml {\n            def root = asNode()\n            root.appendNode('name', 'My library')\n            root.appendNode('description', 'A Kotlin/Native library')\n        }\n    }\n}\n\n"}, {"type": "pre", "text": "components.main {\n    pom {\n        withXml {\n            def root = asNode()\n            root.appendNode('name', 'My library')\n            root.appendNode('description', 'A Kotlin/Native library')\n        }\n    }\n}\n"}, {"type": "code", "text": "components.main {\n    pom {\n        withXml {\n            def root = asNode()\n            root.appendNode('name', 'My library')\n            root.appendNode('description', 'A Kotlin/Native library')\n        }\n    }\n}\n"}, {"type": "h3", "text": "Serialization plugin"}, {"type": "p", "text": "The plugin is shipped with a customized version of the kotlinx.serialization plugin. To use it you don't have to \nadd new buildscript dependencies, just apply the plugins and add a dependency on the serialization library:"}, {"type": "code", "text": "kotlinx.serialization"}, {"type": "div", "text": "\napply plugin: 'org.jetbrains.kotlin.platform.native'\napply plugin: 'kotlinx-serialization-native'\n\ndependencies {\n    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime-native'\n}\n\n"}, {"type": "pre", "text": "apply plugin: 'org.jetbrains.kotlin.platform.native'\napply plugin: 'kotlinx-serialization-native'\n\ndependencies {\n    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime-native'\n}\n"}, {"type": "code", "text": "apply plugin: 'org.jetbrains.kotlin.platform.native'\napply plugin: 'kotlinx-serialization-native'\n\ndependencies {\n    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime-native'\n}\n"}, {"type": "p", "text": "The example project for details."}, {"type": "a", "text": "example project"}, {"type": "h3", "text": "DSL example"}, {"type": "p", "text": "In this section a commented DSL is shown. \nSee also the example projects that use this plugin, e.g.\nKotlinx.coroutines,\nMPP http client"}, {"type": "a", "text": "Kotlinx.coroutines"}, {"type": "a", "text": "MPP http client"}, {"type": "div", "text": "\nplugins {\n    id \"org.jetbrains.kotlin.platform.native\" version \"1.3.0-rc-146\"\n}\n\nsourceSets.main {\n    // Plugin uses Gradle's source directory sets here,\n    // so all the DSL methods available in SourceDirectorySet can be called here.\n    // Platform independent sources.\n    kotlin.srcDirs += 'src/main/customDir'\n\n    // Linux-specific sources\n    target('linux').srcDirs += 'src/main/linux'\n}\n\ncomponents.main {\n\n    // Set up targets\n    targets = ['linux_x64', 'macos_x64', 'mingw_x64']\n\n    // Set up output kinds\n    outputKinds = [EXECUTABLE, KLIBRARY, FRAMEWORK, DYNAMIC, STATIC]\n    \n    // Specify custom entry point for executables\n    entryPoint = \"org.test.myMain\"\n\n    // Target-specific options\n    target('linux_x64') {\n        linkerOpts '-L/linux/lib/path'\n    }\n\n    // Targets independent options\n    allTargets {\n        linkerOpts '-L/common/lib/path'\n    }\n\n    dependencies {\n\n        // Dependency on a published Kotlin/Native library.\n        implementation 'org.test:mylib:1.0'\n\n        // Dependency on a project\n        implementation project('library')\n\n        // Cinterop dependency\n        cinterop('interop-name') {\n            // Def-file describing the native API.\n            // The default path is src/main/c_interop/<interop-name>.def\n            defFile project.file(\"deffile.def\")\n\n            // Package to place the Kotlin API generated.\n            packageName 'org.sample'\n\n            // Options to be passed to compiler and linker by cinterop tool.\n            compilerOpts 'Options for native stubs compilation'\n            linkerOpts 'Options for native stubs'\n\n            // Additional headers to parse.\n            headers project.files('header1.h', 'header2.h')\n\n            // Directories to look for headers.\n            includeDirs {\n                // All objects accepted by the Project.file method may be used with both options.\n\n                // Directories for header search (an analogue of the -I<path> compiler option).\n                allHeaders 'path1', 'path2'\n\n                // Additional directories to search headers listed in the 'headerFilter' def-file option.\n                // -headerFilterAdditionalSearchPrefix command line option analogue.\n                headerFilterOnly 'path1', 'path2'\n            }\n            // A shortcut for includeDirs.allHeaders.\n            includeDirs \"include/directory\" \"another/directory\"\n\n            // Pass additional command line options to the cinterop tool.\n            extraOpts '-verbose'\n\n            // Additional configuration for Linux.\n            target('linux') {\n                compilerOpts 'Linux-specific options'\n            }\n        }\n    }\n\n    // Additional pom settings for publication.\n    pom {\n        withXml {\n            def root = asNode()\n            root.appendNode('name', 'My library')\n            root.appendNode('description', 'A Kotlin/Native library')\n        }\n    }\n\n    // Additional options passed to the compiler.\n    extraOpts '--time'\n}\n\n"}, {"type": "pre", "text": "plugins {\n    id \"org.jetbrains.kotlin.platform.native\" version \"1.3.0-rc-146\"\n}\n\nsourceSets.main {\n    // Plugin uses Gradle's source directory sets here,\n    // so all the DSL methods available in SourceDirectorySet can be called here.\n    // Platform independent sources.\n    kotlin.srcDirs += 'src/main/customDir'\n\n    // Linux-specific sources\n    target('linux').srcDirs += 'src/main/linux'\n}\n\ncomponents.main {\n\n    // Set up targets\n    targets = ['linux_x64', 'macos_x64', 'mingw_x64']\n\n    // Set up output kinds\n    outputKinds = [EXECUTABLE, KLIBRARY, FRAMEWORK, DYNAMIC, STATIC]\n    \n    // Specify custom entry point for executables\n    entryPoint = \"org.test.myMain\"\n\n    // Target-specific options\n    target('linux_x64') {\n        linkerOpts '-L/linux/lib/path'\n    }\n\n    // Targets independent options\n    allTargets {\n        linkerOpts '-L/common/lib/path'\n    }\n\n    dependencies {\n\n        // Dependency on a published Kotlin/Native library.\n        implementation 'org.test:mylib:1.0'\n\n        // Dependency on a project\n        implementation project('library')\n\n        // Cinterop dependency\n        cinterop('interop-name') {\n            // Def-file describing the native API.\n            // The default path is src/main/c_interop/<interop-name>.def\n            defFile project.file(\"deffile.def\")\n\n            // Package to place the Kotlin API generated.\n            packageName 'org.sample'\n\n            // Options to be passed to compiler and linker by cinterop tool.\n            compilerOpts 'Options for native stubs compilation'\n            linkerOpts 'Options for native stubs'\n\n            // Additional headers to parse.\n            headers project.files('header1.h', 'header2.h')\n\n            // Directories to look for headers.\n            includeDirs {\n                // All objects accepted by the Project.file method may be used with both options.\n\n                // Directories for header search (an analogue of the -I<path> compiler option).\n                allHeaders 'path1', 'path2'\n\n                // Additional directories to search headers listed in the 'headerFilter' def-file option.\n                // -headerFilterAdditionalSearchPrefix command line option analogue.\n                headerFilterOnly 'path1', 'path2'\n            }\n            // A shortcut for includeDirs.allHeaders.\n            includeDirs \"include/directory\" \"another/directory\"\n\n            // Pass additional command line options to the cinterop tool.\n            extraOpts '-verbose'\n\n            // Additional configuration for Linux.\n            target('linux') {\n                compilerOpts 'Linux-specific options'\n            }\n        }\n    }\n\n    // Additional pom settings for publication.\n    pom {\n        withXml {\n            def root = asNode()\n            root.appendNode('name', 'My library')\n            root.appendNode('description', 'A Kotlin/Native library')\n        }\n    }\n\n    // Additional options passed to the compiler.\n    extraOpts '--time'\n}\n"}, {"type": "code", "text": "plugins {\n    id \"org.jetbrains.kotlin.platform.native\" version \"1.3.0-rc-146\"\n}\n\nsourceSets.main {\n    // Plugin uses Gradle's source directory sets here,\n    // so all the DSL methods available in SourceDirectorySet can be called here.\n    // Platform independent sources.\n    kotlin.srcDirs += 'src/main/customDir'\n\n    // Linux-specific sources\n    target('linux').srcDirs += 'src/main/linux'\n}\n\ncomponents.main {\n\n    // Set up targets\n    targets = ['linux_x64', 'macos_x64', 'mingw_x64']\n\n    // Set up output kinds\n    outputKinds = [EXECUTABLE, KLIBRARY, FRAMEWORK, DYNAMIC, STATIC]\n    \n    // Specify custom entry point for executables\n    entryPoint = \"org.test.myMain\"\n\n    // Target-specific options\n    target('linux_x64') {\n        linkerOpts '-L/linux/lib/path'\n    }\n\n    // Targets independent options\n    allTargets {\n        linkerOpts '-L/common/lib/path'\n    }\n\n    dependencies {\n\n        // Dependency on a published Kotlin/Native library.\n        implementation 'org.test:mylib:1.0'\n\n        // Dependency on a project\n        implementation project('library')\n\n        // Cinterop dependency\n        cinterop('interop-name') {\n            // Def-file describing the native API.\n            // The default path is src/main/c_interop/<interop-name>.def\n            defFile project.file(\"deffile.def\")\n\n            // Package to place the Kotlin API generated.\n            packageName 'org.sample'\n\n            // Options to be passed to compiler and linker by cinterop tool.\n            compilerOpts 'Options for native stubs compilation'\n            linkerOpts 'Options for native stubs'\n\n            // Additional headers to parse.\n            headers project.files('header1.h', 'header2.h')\n\n            // Directories to look for headers.\n            includeDirs {\n                // All objects accepted by the Project.file method may be used with both options.\n\n                // Directories for header search (an analogue of the -I<path> compiler option).\n                allHeaders 'path1', 'path2'\n\n                // Additional directories to search headers listed in the 'headerFilter' def-file option.\n                // -headerFilterAdditionalSearchPrefix command line option analogue.\n                headerFilterOnly 'path1', 'path2'\n            }\n            // A shortcut for includeDirs.allHeaders.\n            includeDirs \"include/directory\" \"another/directory\"\n\n            // Pass additional command line options to the cinterop tool.\n            extraOpts '-verbose'\n\n            // Additional configuration for Linux.\n            target('linux') {\n                compilerOpts 'Linux-specific options'\n            }\n        }\n    }\n\n    // Additional pom settings for publication.\n    pom {\n        withXml {\n            def root = asNode()\n            root.appendNode('name', 'My library')\n            root.appendNode('description', 'A Kotlin/Native library')\n        }\n    }\n\n    // Additional options passed to the compiler.\n    extraOpts '--time'\n}\n"}]