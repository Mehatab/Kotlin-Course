[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Comparison to Java Programming Language"}, {"type": "h2", "text": "Some Java issues addressed in Kotlin"}, {"type": "p", "text": "Kotlin fixes a series of issues that Java suffers from:"}, {"type": "ul", "text": "\nNull references are controlled by the type system.\nNo raw types\nArrays in Kotlin are invariant\nKotlin has proper function types, as opposed to Java's SAM-conversions\nUse-site variance without wildcards\nKotlin does not have checked exceptions\n"}, {"type": "li", "text": "Null references are controlled by the type system."}, {"type": "a", "text": "controlled by the type system"}, {"type": "li", "text": "No raw types"}, {"type": "a", "text": "No raw types"}, {"type": "li", "text": "Arrays in Kotlin are invariant"}, {"type": "a", "text": "invariant"}, {"type": "li", "text": "Kotlin has proper function types, as opposed to Java's SAM-conversions"}, {"type": "a", "text": "function types"}, {"type": "li", "text": "Use-site variance without wildcards"}, {"type": "a", "text": "Use-site variance"}, {"type": "li", "text": "Kotlin does not have checked exceptions"}, {"type": "a", "text": "exceptions"}, {"type": "h2", "text": "What Java has that Kotlin does not"}, {"type": "ul", "text": "\nChecked exceptions\nPrimitive types that are not classes\nStatic members\nNon-private fields\nWildcard-types\nTernary-operator a ? b : c\n"}, {"type": "li", "text": "Checked exceptions"}, {"type": "a", "text": "Checked exceptions"}, {"type": "li", "text": "Primitive types that are not classes"}, {"type": "a", "text": "Primitive types"}, {"type": "li", "text": "Static members"}, {"type": "a", "text": "Static members"}, {"type": "li", "text": "Non-private fields"}, {"type": "a", "text": "Non-private fields"}, {"type": "li", "text": "Wildcard-types"}, {"type": "a", "text": "Wildcard-types"}, {"type": "li", "text": "Ternary-operator a ? b : c"}, {"type": "a", "text": "Ternary-operator a ? b : c"}, {"type": "code", "text": "a ? b : c"}, {"type": "h2", "text": "What Kotlin has that Java does not"}, {"type": "ul", "text": "\nLambda expressions + Inline functions = performant custom control structures\nExtension functions\nNull-safety\nSmart casts\nString templates\nProperties\nPrimary constructors\nFirst-class delegation\nType inference for variable and property types\nSingletons\nDeclaration-site variance & Type projections\nRange expressions\nOperator overloading\nCompanion objects\nData classes\nSeparate interfaces for read-only and mutable collections\nCoroutines\n"}, {"type": "li", "text": "Lambda expressions + Inline functions = performant custom control structures"}, {"type": "a", "text": "Lambda expressions"}, {"type": "a", "text": "Inline functions"}, {"type": "li", "text": "Extension functions"}, {"type": "a", "text": "Extension functions"}, {"type": "li", "text": "Null-safety"}, {"type": "a", "text": "Null-safety"}, {"type": "li", "text": "Smart casts"}, {"type": "a", "text": "Smart casts"}, {"type": "li", "text": "String templates"}, {"type": "a", "text": "String templates"}, {"type": "li", "text": "Properties"}, {"type": "a", "text": "Properties"}, {"type": "li", "text": "Primary constructors"}, {"type": "a", "text": "Primary constructors"}, {"type": "li", "text": "First-class delegation"}, {"type": "a", "text": "First-class delegation"}, {"type": "li", "text": "Type inference for variable and property types"}, {"type": "a", "text": "Type inference for variable and property types"}, {"type": "li", "text": "Singletons"}, {"type": "a", "text": "Singletons"}, {"type": "li", "text": "Declaration-site variance & Type projections"}, {"type": "a", "text": "Declaration-site variance & Type projections"}, {"type": "li", "text": "Range expressions"}, {"type": "a", "text": "Range expressions"}, {"type": "li", "text": "Operator overloading"}, {"type": "a", "text": "Operator overloading"}, {"type": "li", "text": "Companion objects"}, {"type": "a", "text": "Companion objects"}, {"type": "li", "text": "Data classes"}, {"type": "a", "text": "Data classes"}, {"type": "li", "text": "Separate interfaces for read-only and mutable collections"}, {"type": "a", "text": "Separate interfaces for read-only and mutable collections"}, {"type": "li", "text": "Coroutines"}, {"type": "a", "text": "Coroutines"}]