[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Dynamic Type"}, {"type": "blockquote", "text": "\nThe dynamic type is not supported in code targeting the JVM\n"}, {"type": "p", "text": "The dynamic type is not supported in code targeting the JVM"}, {"type": "p", "text": "Being a statically typed language, Kotlin still has to interoperate with untyped or loosely typed environments,\nsuch as the JavaScript ecosystem. To facilitate these use cases, the dynamic type is available in the language:"}, {"type": "code", "text": "dynamic"}, {"type": "div", "text": "\nval dyn: dynamic = ...\n\n"}, {"type": "pre", "text": "val dyn: dynamic = ...\n"}, {"type": "code", "text": "val dyn: dynamic = ...\n"}, {"type": "p", "text": "The dynamic type basically turns off Kotlin's type checker:"}, {"type": "code", "text": "dynamic"}, {"type": "ul", "text": "\na value of this type can be assigned to any variable or passed anywhere as a parameter;\nany value can be assigned to a variable of type dynamic or passed to a function that takes dynamic as a parameter;\nnull-checks are disabled for such values.\n"}, {"type": "li", "text": "a value of this type can be assigned to any variable or passed anywhere as a parameter;"}, {"type": "li", "text": "any value can be assigned to a variable of type dynamic or passed to a function that takes dynamic as a parameter;"}, {"type": "code", "text": "dynamic"}, {"type": "code", "text": "dynamic"}, {"type": "li", "text": "null-checks are disabled for such values."}, {"type": "code", "text": "null"}, {"type": "p", "text": "The most peculiar feature of dynamic is that we are allowed to call any property or function with any parameters\non a dynamic variable:"}, {"type": "code", "text": "dynamic"}, {"type": "strong", "text": "any"}, {"type": "code", "text": "dynamic"}, {"type": "div", "text": "\ndyn.whatever(1, \"foo\", dyn) // 'whatever' is not defined anywhere\ndyn.whatever(*arrayOf(1, 2, 3))\n\n"}, {"type": "pre", "text": "dyn.whatever(1, \"foo\", dyn) // 'whatever' is not defined anywhere\ndyn.whatever(*arrayOf(1, 2, 3))\n"}, {"type": "code", "text": "dyn.whatever(1, \"foo\", dyn) // 'whatever' is not defined anywhere\ndyn.whatever(*arrayOf(1, 2, 3))\n"}, {"type": "p", "text": "On the JavaScript platform this code will be compiled \"as is\": dyn.whatever(1) in Kotlin becomes dyn.whatever(1) in\nthe generated JavaScript code."}, {"type": "code", "text": "dyn.whatever(1)"}, {"type": "code", "text": "dyn.whatever(1)"}, {"type": "p", "text": "When calling functions written in Kotlin on values of dynamic type, keep in mind the name mangling performed by the\nKotlin to JavaScript compiler. You may need to use the @JsName annotation\nto assign well-defined names to the functions that you need to call."}, {"type": "code", "text": "dynamic"}, {"type": "a", "text": "@JsName annotation"}, {"type": "p", "text": "A dynamic call always returns dynamic as a result, so we can chain such calls freely:"}, {"type": "code", "text": "dynamic"}, {"type": "div", "text": "\ndyn.foo().bar.baz()\n\n"}, {"type": "pre", "text": "dyn.foo().bar.baz()\n"}, {"type": "code", "text": "dyn.foo().bar.baz()\n"}, {"type": "p", "text": "When we pass a lambda to a dynamic call, all of its parameters by default have the type dynamic:"}, {"type": "code", "text": "dynamic"}, {"type": "div", "text": "\ndyn.foo {\n    x -> x.bar() // x is dynamic\n}\n\n"}, {"type": "pre", "text": "dyn.foo {\n    x -> x.bar() // x is dynamic\n}\n"}, {"type": "code", "text": "dyn.foo {\n    x -> x.bar() // x is dynamic\n}\n"}, {"type": "p", "text": "Expressions using values of dynamic type are translated to JavaScript \"as is\", and do not use the Kotlin operator conventions.\nThe following operators are supported:"}, {"type": "code", "text": "dynamic"}, {"type": "ul", "text": "\nbinary: +, -, *, /, %, >, < >=, <=, ==, !=, ===, !==, &&, ||\nunary\n    \nprefix: -, +, !\nprefix and postfix: ++, --\n\n\nassignments: +=, -=, *=, /=, %=\nindexed access:\n    \nread: d[a], more than one argument is an error\nwrite: d[a1] = a2, more than one argument in [] is an error\n\n\n"}, {"type": "li", "text": "binary: +, -, *, /, %, >, < >=, <=, ==, !=, ===, !==, &&, ||"}, {"type": "code", "text": "+"}, {"type": "code", "text": "-"}, {"type": "code", "text": "*"}, {"type": "code", "text": "/"}, {"type": "code", "text": "%"}, {"type": "code", "text": ">"}, {"type": "code", "text": "<"}, {"type": "code", "text": ">="}, {"type": "code", "text": "<="}, {"type": "code", "text": "=="}, {"type": "code", "text": "!="}, {"type": "code", "text": "==="}, {"type": "code", "text": "!=="}, {"type": "code", "text": "&&"}, {"type": "code", "text": "||"}, {"type": "li", "text": "unary\n    \nprefix: -, +, !\nprefix and postfix: ++, --\n\n"}, {"type": "ul", "text": "\nprefix: -, +, !\nprefix and postfix: ++, --\n"}, {"type": "li", "text": "prefix: -, +, !"}, {"type": "code", "text": "-"}, {"type": "code", "text": "+"}, {"type": "code", "text": "!"}, {"type": "li", "text": "prefix and postfix: ++, --"}, {"type": "code", "text": "++"}, {"type": "code", "text": "--"}, {"type": "li", "text": "assignments: +=, -=, *=, /=, %="}, {"type": "code", "text": "+="}, {"type": "code", "text": "-="}, {"type": "code", "text": "*="}, {"type": "code", "text": "/="}, {"type": "code", "text": "%="}, {"type": "li", "text": "indexed access:\n    \nread: d[a], more than one argument is an error\nwrite: d[a1] = a2, more than one argument in [] is an error\n\n"}, {"type": "ul", "text": "\nread: d[a], more than one argument is an error\nwrite: d[a1] = a2, more than one argument in [] is an error\n"}, {"type": "li", "text": "read: d[a], more than one argument is an error"}, {"type": "code", "text": "d[a]"}, {"type": "li", "text": "write: d[a1] = a2, more than one argument in [] is an error"}, {"type": "code", "text": "d[a1] = a2"}, {"type": "code", "text": "[]"}, {"type": "p", "text": "in, !in and .. operations with values of type dynamic are forbidden."}, {"type": "code", "text": "in"}, {"type": "code", "text": "!in"}, {"type": "code", "text": ".."}, {"type": "code", "text": "dynamic"}, {"type": "p", "text": "For a more technical description, see the spec document."}, {"type": "a", "text": "spec document"}]