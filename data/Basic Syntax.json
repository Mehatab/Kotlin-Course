[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Basic Syntax"}, {"type": "h2", "text": "Package definition and imports"}, {"type": "p", "text": "Package specification should be at the top of the source file:"}, {"type": "div", "text": "\npackage my.demo\n\nimport kotlin.text.*\n\n// ...\n\n"}, {"type": "pre", "text": "package my.demo\n\nimport kotlin.text.*\n\n// ...\n"}, {"type": "code", "text": "package my.demo\n\nimport kotlin.text.*\n\n// ...\n"}, {"type": "p", "text": "It is not required to match directories and packages: source files can be placed arbitrarily in the file system."}, {"type": "p", "text": "See Packages."}, {"type": "a", "text": "Packages"}, {"type": "h2", "text": "Program entry point"}, {"type": "p", "text": "An entry point of a Kotlin application is the main function."}, {"type": "code", "text": "main"}, {"type": "div", "text": "\nfun main() {\n    println(\"Hello world!\")\n}\n\n"}, {"type": "pre", "text": "fun main() {\n    println(\"Hello world!\")\n}\n"}, {"type": "code", "text": "fun main() {\n    println(\"Hello world!\")\n}\n"}, {"type": "h2", "text": "Functions"}, {"type": "p", "text": "Function having two Int parameters with Int return type:"}, {"type": "code", "text": "Int"}, {"type": "code", "text": "Int"}, {"type": "div", "text": "\n//sampleStart\nfun sum(a: Int, b: Int): Int {\n    return a + b\n}\n//sampleEnd\n\nfun main() {\n    print(\"sum of 3 and 5 is \")\n    println(sum(3, 5))\n}\n\n"}, {"type": "pre", "text": "//sampleStart\nfun sum(a: Int, b: Int): Int {\n    return a + b\n}\n//sampleEnd\n\nfun main() {\n    print(\"sum of 3 and 5 is \")\n    println(sum(3, 5))\n}\n"}, {"type": "code", "text": "//sampleStart\nfun sum(a: Int, b: Int): Int {\n    return a + b\n}\n//sampleEnd\n\nfun main() {\n    print(\"sum of 3 and 5 is \")\n    println(sum(3, 5))\n}\n"}, {"type": "p", "text": "Function with an expression body and inferred return type:"}, {"type": "div", "text": "\n//sampleStart\nfun sum(a: Int, b: Int) = a + b\n//sampleEnd\n\nfun main() {\n    println(\"sum of 19 and 23 is ${sum(19, 23)}\")\n}\n\n"}, {"type": "pre", "text": "//sampleStart\nfun sum(a: Int, b: Int) = a + b\n//sampleEnd\n\nfun main() {\n    println(\"sum of 19 and 23 is ${sum(19, 23)}\")\n}\n"}, {"type": "code", "text": "//sampleStart\nfun sum(a: Int, b: Int) = a + b\n//sampleEnd\n\nfun main() {\n    println(\"sum of 19 and 23 is ${sum(19, 23)}\")\n}\n"}, {"type": "p", "text": "Function returning no meaningful value:"}, {"type": "div", "text": "\n//sampleStart\nfun printSum(a: Int, b: Int): Unit {\n    println(\"sum of $a and $b is ${a + b}\")\n}\n//sampleEnd\n\nfun main() {\n    printSum(-1, 8)\n}\n\n"}, {"type": "pre", "text": "//sampleStart\nfun printSum(a: Int, b: Int): Unit {\n    println(\"sum of $a and $b is ${a + b}\")\n}\n//sampleEnd\n\nfun main() {\n    printSum(-1, 8)\n}\n"}, {"type": "code", "text": "//sampleStart\nfun printSum(a: Int, b: Int): Unit {\n    println(\"sum of $a and $b is ${a + b}\")\n}\n//sampleEnd\n\nfun main() {\n    printSum(-1, 8)\n}\n"}, {"type": "p", "text": "Unit return type can be omitted:"}, {"type": "code", "text": "Unit"}, {"type": "div", "text": "\n//sampleStart\nfun printSum(a: Int, b: Int) {\n    println(\"sum of $a and $b is ${a + b}\")\n}\n//sampleEnd\n\nfun main() {\n    printSum(-1, 8)\n}\n\n"}, {"type": "pre", "text": "//sampleStart\nfun printSum(a: Int, b: Int) {\n    println(\"sum of $a and $b is ${a + b}\")\n}\n//sampleEnd\n\nfun main() {\n    printSum(-1, 8)\n}\n"}, {"type": "code", "text": "//sampleStart\nfun printSum(a: Int, b: Int) {\n    println(\"sum of $a and $b is ${a + b}\")\n}\n//sampleEnd\n\nfun main() {\n    printSum(-1, 8)\n}\n"}, {"type": "p", "text": "See Functions."}, {"type": "a", "text": "Functions"}, {"type": "h2", "text": "Variables"}, {"type": "p", "text": "Read-only local variables are defined using the keyword val. They can be assigned a value only once."}, {"type": "code", "text": "val"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val a: Int = 1  // immediate assignment\n    val b = 2   // `Int` type is inferred\n    val c: Int  // Type required when no initializer is provided\n    c = 3       // deferred assignment\n//sampleEnd\n    println(\"a = $a, b = $b, c = $c\")\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val a: Int = 1  // immediate assignment\n    val b = 2   // `Int` type is inferred\n    val c: Int  // Type required when no initializer is provided\n    c = 3       // deferred assignment\n//sampleEnd\n    println(\"a = $a, b = $b, c = $c\")\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val a: Int = 1  // immediate assignment\n    val b = 2   // `Int` type is inferred\n    val c: Int  // Type required when no initializer is provided\n    c = 3       // deferred assignment\n//sampleEnd\n    println(\"a = $a, b = $b, c = $c\")\n}\n"}, {"type": "p", "text": "Variables that can be reassigned use the var keyword:"}, {"type": "code", "text": "var"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    var x = 5 // `Int` type is inferred\n    x += 1\n//sampleEnd\n    println(\"x = $x\")\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    var x = 5 // `Int` type is inferred\n    x += 1\n//sampleEnd\n    println(\"x = $x\")\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    var x = 5 // `Int` type is inferred\n    x += 1\n//sampleEnd\n    println(\"x = $x\")\n}\n"}, {"type": "p", "text": "Top-level variables:"}, {"type": "div", "text": "\n//sampleStart\nval PI = 3.14\nvar x = 0\n\nfun incrementX() { \n    x += 1 \n}\n//sampleEnd\n\nfun main() {\n    println(\"x = $x; PI = $PI\")\n    incrementX()\n    println(\"incrementX()\")\n    println(\"x = $x; PI = $PI\")\n}\n\n"}, {"type": "pre", "text": "//sampleStart\nval PI = 3.14\nvar x = 0\n\nfun incrementX() { \n    x += 1 \n}\n//sampleEnd\n\nfun main() {\n    println(\"x = $x; PI = $PI\")\n    incrementX()\n    println(\"incrementX()\")\n    println(\"x = $x; PI = $PI\")\n}\n"}, {"type": "code", "text": "//sampleStart\nval PI = 3.14\nvar x = 0\n\nfun incrementX() { \n    x += 1 \n}\n//sampleEnd\n\nfun main() {\n    println(\"x = $x; PI = $PI\")\n    incrementX()\n    println(\"incrementX()\")\n    println(\"x = $x; PI = $PI\")\n}\n"}, {"type": "p", "text": "See also Properties And Fields."}, {"type": "a", "text": "Properties And Fields"}, {"type": "h2", "text": "Comments"}, {"type": "p", "text": "Just like most modern languages, Kotlin supports single-line (or end-of-line) and multi-line (block) comments."}, {"type": "em", "text": "end-of-line"}, {"type": "em", "text": "block"}, {"type": "div", "text": "\n// This is an end-of-line comment\n\n/* This is a block comment\n   on multiple lines. */\n\n"}, {"type": "pre", "text": "// This is an end-of-line comment\n\n/* This is a block comment\n   on multiple lines. */\n"}, {"type": "code", "text": "// This is an end-of-line comment\n\n/* This is a block comment\n   on multiple lines. */\n"}, {"type": "p", "text": "Block comments in Kotlin can be nested."}, {"type": "div", "text": "\n/* The comment starts here\n/* contains a nested comment */     \nand ends here. */\n\n"}, {"type": "pre", "text": "/* The comment starts here\n/* contains a nested comment */     \nand ends here. */\n"}, {"type": "code", "text": "/* The comment starts here\n/* contains a nested comment */     \nand ends here. */\n"}, {"type": "p", "text": "See Documenting Kotlin Code for information on the documentation comment syntax."}, {"type": "a", "text": "Documenting Kotlin Code"}, {"type": "h2", "text": "String templates"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    var a = 1\n    // simple name in template:\n    val s1 = \"a is $a\" \n    \n    a = 2\n    // arbitrary expression in template:\n    val s2 = \"${s1.replace(\"is\", \"was\")}, but now is $a\"\n//sampleEnd\n    println(s2)\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    var a = 1\n    // simple name in template:\n    val s1 = \"a is $a\" \n    \n    a = 2\n    // arbitrary expression in template:\n    val s2 = \"${s1.replace(\"is\", \"was\")}, but now is $a\"\n//sampleEnd\n    println(s2)\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    var a = 1\n    // simple name in template:\n    val s1 = \"a is $a\" \n    \n    a = 2\n    // arbitrary expression in template:\n    val s2 = \"${s1.replace(\"is\", \"was\")}, but now is $a\"\n//sampleEnd\n    println(s2)\n}\n"}, {"type": "p", "text": "See String templates for details."}, {"type": "a", "text": "String templates"}, {"type": "h2", "text": "Conditional expressions"}, {"type": "div", "text": "\n//sampleStart\nfun maxOf(a: Int, b: Int): Int {\n    if (a > b) {\n        return a\n    } else {\n        return b\n    }\n}\n//sampleEnd\n\nfun main() {\n    println(\"max of 0 and 42 is ${maxOf(0, 42)}\")\n}\n\n"}, {"type": "pre", "text": "//sampleStart\nfun maxOf(a: Int, b: Int): Int {\n    if (a > b) {\n        return a\n    } else {\n        return b\n    }\n}\n//sampleEnd\n\nfun main() {\n    println(\"max of 0 and 42 is ${maxOf(0, 42)}\")\n}\n"}, {"type": "code", "text": "//sampleStart\nfun maxOf(a: Int, b: Int): Int {\n    if (a > b) {\n        return a\n    } else {\n        return b\n    }\n}\n//sampleEnd\n\nfun main() {\n    println(\"max of 0 and 42 is ${maxOf(0, 42)}\")\n}\n"}, {"type": "p", "text": "In Kotlin, if can also be used as an expression:"}, {"type": "em", "text": "if"}, {"type": "div", "text": "\n//sampleStart\nfun maxOf(a: Int, b: Int) = if (a > b) a else b\n//sampleEnd\n\nfun main() {\n    println(\"max of 0 and 42 is ${maxOf(0, 42)}\")\n}\n\n"}, {"type": "pre", "text": "//sampleStart\nfun maxOf(a: Int, b: Int) = if (a > b) a else b\n//sampleEnd\n\nfun main() {\n    println(\"max of 0 and 42 is ${maxOf(0, 42)}\")\n}\n"}, {"type": "code", "text": "//sampleStart\nfun maxOf(a: Int, b: Int) = if (a > b) a else b\n//sampleEnd\n\nfun main() {\n    println(\"max of 0 and 42 is ${maxOf(0, 42)}\")\n}\n"}, {"type": "p", "text": "See if-expressions."}, {"type": "a", "text": "if-expressions"}, {"type": "em", "text": "if"}, {"type": "h2", "text": "Nullable values and null checks"}, {"type": "em", "text": "null"}, {"type": "p", "text": "A reference must be explicitly marked as nullable when null value is possible."}, {"type": "em", "text": "null"}, {"type": "p", "text": "Return null if str does not hold an integer:"}, {"type": "em", "text": "null"}, {"type": "code", "text": "str"}, {"type": "div", "text": "\nfun parseInt(str: String): Int? {\n    // ...\n}\n\n"}, {"type": "pre", "text": "fun parseInt(str: String): Int? {\n    // ...\n}\n"}, {"type": "code", "text": "fun parseInt(str: String): Int? {\n    // ...\n}\n"}, {"type": "p", "text": "Use a function returning nullable value:"}, {"type": "div", "text": "\nfun parseInt(str: String): Int? {\n    return str.toIntOrNull()\n}\n\n//sampleStart\nfun printProduct(arg1: String, arg2: String) {\n    val x = parseInt(arg1)\n    val y = parseInt(arg2)\n\n    // Using `x * y` yields error because they may hold nulls.\n    if (x != null && y != null) {\n        // x and y are automatically cast to non-nullable after null check\n        println(x * y)\n    }\n    else {\n        println(\"'$arg1' or '$arg2' is not a number\")\n    }    \n}\n//sampleEnd\n\n\nfun main() {\n    printProduct(\"6\", \"7\")\n    printProduct(\"a\", \"7\")\n    printProduct(\"a\", \"b\")\n}\n\n"}, {"type": "pre", "text": "fun parseInt(str: String): Int? {\n    return str.toIntOrNull()\n}\n\n//sampleStart\nfun printProduct(arg1: String, arg2: String) {\n    val x = parseInt(arg1)\n    val y = parseInt(arg2)\n\n    // Using `x * y` yields error because they may hold nulls.\n    if (x != null && y != null) {\n        // x and y are automatically cast to non-nullable after null check\n        println(x * y)\n    }\n    else {\n        println(\"'$arg1' or '$arg2' is not a number\")\n    }    \n}\n//sampleEnd\n\n\nfun main() {\n    printProduct(\"6\", \"7\")\n    printProduct(\"a\", \"7\")\n    printProduct(\"a\", \"b\")\n}\n"}, {"type": "code", "text": "fun parseInt(str: String): Int? {\n    return str.toIntOrNull()\n}\n\n//sampleStart\nfun printProduct(arg1: String, arg2: String) {\n    val x = parseInt(arg1)\n    val y = parseInt(arg2)\n\n    // Using `x * y` yields error because they may hold nulls.\n    if (x != null && y != null) {\n        // x and y are automatically cast to non-nullable after null check\n        println(x * y)\n    }\n    else {\n        println(\"'$arg1' or '$arg2' is not a number\")\n    }    \n}\n//sampleEnd\n\n\nfun main() {\n    printProduct(\"6\", \"7\")\n    printProduct(\"a\", \"7\")\n    printProduct(\"a\", \"b\")\n}\n"}, {"type": "p", "text": "or"}, {"type": "div", "text": "\nfun parseInt(str: String): Int? {\n    return str.toIntOrNull()\n}\n\nfun printProduct(arg1: String, arg2: String) {\n    val x = parseInt(arg1)\n    val y = parseInt(arg2)\n    \n//sampleStart\n    // ...\n    if (x == null) {\n        println(\"Wrong number format in arg1: '$arg1'\")\n        return\n    }\n    if (y == null) {\n        println(\"Wrong number format in arg2: '$arg2'\")\n        return\n    }\n\n    // x and y are automatically cast to non-nullable after null check\n    println(x * y)\n//sampleEnd\n}\n\nfun main() {\n    printProduct(\"6\", \"7\")\n    printProduct(\"a\", \"7\")\n    printProduct(\"99\", \"b\")\n}\n\n"}, {"type": "pre", "text": "fun parseInt(str: String): Int? {\n    return str.toIntOrNull()\n}\n\nfun printProduct(arg1: String, arg2: String) {\n    val x = parseInt(arg1)\n    val y = parseInt(arg2)\n    \n//sampleStart\n    // ...\n    if (x == null) {\n        println(\"Wrong number format in arg1: '$arg1'\")\n        return\n    }\n    if (y == null) {\n        println(\"Wrong number format in arg2: '$arg2'\")\n        return\n    }\n\n    // x and y are automatically cast to non-nullable after null check\n    println(x * y)\n//sampleEnd\n}\n\nfun main() {\n    printProduct(\"6\", \"7\")\n    printProduct(\"a\", \"7\")\n    printProduct(\"99\", \"b\")\n}\n"}, {"type": "code", "text": "fun parseInt(str: String): Int? {\n    return str.toIntOrNull()\n}\n\nfun printProduct(arg1: String, arg2: String) {\n    val x = parseInt(arg1)\n    val y = parseInt(arg2)\n    \n//sampleStart\n    // ...\n    if (x == null) {\n        println(\"Wrong number format in arg1: '$arg1'\")\n        return\n    }\n    if (y == null) {\n        println(\"Wrong number format in arg2: '$arg2'\")\n        return\n    }\n\n    // x and y are automatically cast to non-nullable after null check\n    println(x * y)\n//sampleEnd\n}\n\nfun main() {\n    printProduct(\"6\", \"7\")\n    printProduct(\"a\", \"7\")\n    printProduct(\"99\", \"b\")\n}\n"}, {"type": "p", "text": "See Null-safety."}, {"type": "a", "text": "Null-safety"}, {"type": "h2", "text": "Type checks and automatic casts"}, {"type": "p", "text": "The is operator checks if an expression is an instance of a type.\nIf an immutable local variable or property is checked for a specific type, there's no need to cast it explicitly:"}, {"type": "em", "text": "is"}, {"type": "div", "text": "\n//sampleStart\nfun getStringLength(obj: Any): Int? {\n    if (obj is String) {\n        // `obj` is automatically cast to `String` in this branch\n        return obj.length\n    }\n\n    // `obj` is still of type `Any` outside of the type-checked branch\n    return null\n}\n//sampleEnd\n\n\nfun main() {\n    fun printLength(obj: Any) {\n        println(\"'$obj' string length is ${getStringLength(obj) ?: \"... err, not a string\"} \")\n    }\n    printLength(\"Incomprehensibilities\")\n    printLength(1000)\n    printLength(listOf(Any()))\n}\n\n"}, {"type": "pre", "text": "//sampleStart\nfun getStringLength(obj: Any): Int? {\n    if (obj is String) {\n        // `obj` is automatically cast to `String` in this branch\n        return obj.length\n    }\n\n    // `obj` is still of type `Any` outside of the type-checked branch\n    return null\n}\n//sampleEnd\n\n\nfun main() {\n    fun printLength(obj: Any) {\n        println(\"'$obj' string length is ${getStringLength(obj) ?: \"... err, not a string\"} \")\n    }\n    printLength(\"Incomprehensibilities\")\n    printLength(1000)\n    printLength(listOf(Any()))\n}\n"}, {"type": "code", "text": "//sampleStart\nfun getStringLength(obj: Any): Int? {\n    if (obj is String) {\n        // `obj` is automatically cast to `String` in this branch\n        return obj.length\n    }\n\n    // `obj` is still of type `Any` outside of the type-checked branch\n    return null\n}\n//sampleEnd\n\n\nfun main() {\n    fun printLength(obj: Any) {\n        println(\"'$obj' string length is ${getStringLength(obj) ?: \"... err, not a string\"} \")\n    }\n    printLength(\"Incomprehensibilities\")\n    printLength(1000)\n    printLength(listOf(Any()))\n}\n"}, {"type": "p", "text": "or"}, {"type": "div", "text": "\n//sampleStart\nfun getStringLength(obj: Any): Int? {\n    if (obj !is String) return null\n\n    // `obj` is automatically cast to `String` in this branch\n    return obj.length\n}\n//sampleEnd\n\n\nfun main() {\n    fun printLength(obj: Any) {\n        println(\"'$obj' string length is ${getStringLength(obj) ?: \"... err, not a string\"} \")\n    }\n    printLength(\"Incomprehensibilities\")\n    printLength(1000)\n    printLength(listOf(Any()))\n}\n\n"}, {"type": "pre", "text": "//sampleStart\nfun getStringLength(obj: Any): Int? {\n    if (obj !is String) return null\n\n    // `obj` is automatically cast to `String` in this branch\n    return obj.length\n}\n//sampleEnd\n\n\nfun main() {\n    fun printLength(obj: Any) {\n        println(\"'$obj' string length is ${getStringLength(obj) ?: \"... err, not a string\"} \")\n    }\n    printLength(\"Incomprehensibilities\")\n    printLength(1000)\n    printLength(listOf(Any()))\n}\n"}, {"type": "code", "text": "//sampleStart\nfun getStringLength(obj: Any): Int? {\n    if (obj !is String) return null\n\n    // `obj` is automatically cast to `String` in this branch\n    return obj.length\n}\n//sampleEnd\n\n\nfun main() {\n    fun printLength(obj: Any) {\n        println(\"'$obj' string length is ${getStringLength(obj) ?: \"... err, not a string\"} \")\n    }\n    printLength(\"Incomprehensibilities\")\n    printLength(1000)\n    printLength(listOf(Any()))\n}\n"}, {"type": "p", "text": "or even"}, {"type": "div", "text": "\n//sampleStart\nfun getStringLength(obj: Any): Int? {\n    // `obj` is automatically cast to `String` on the right-hand side of `&&`\n    if (obj is String && obj.length > 0) {\n        return obj.length\n    }\n\n    return null\n}\n//sampleEnd\n\n\nfun main() {\n    fun printLength(obj: Any) {\n        println(\"'$obj' string length is ${getStringLength(obj) ?: \"... err, is empty or not a string at all\"} \")\n    }\n    printLength(\"Incomprehensibilities\")\n    printLength(\"\")\n    printLength(1000)\n}\n\n"}, {"type": "pre", "text": "//sampleStart\nfun getStringLength(obj: Any): Int? {\n    // `obj` is automatically cast to `String` on the right-hand side of `&&`\n    if (obj is String && obj.length > 0) {\n        return obj.length\n    }\n\n    return null\n}\n//sampleEnd\n\n\nfun main() {\n    fun printLength(obj: Any) {\n        println(\"'$obj' string length is ${getStringLength(obj) ?: \"... err, is empty or not a string at all\"} \")\n    }\n    printLength(\"Incomprehensibilities\")\n    printLength(\"\")\n    printLength(1000)\n}\n"}, {"type": "code", "text": "//sampleStart\nfun getStringLength(obj: Any): Int? {\n    // `obj` is automatically cast to `String` on the right-hand side of `&&`\n    if (obj is String && obj.length > 0) {\n        return obj.length\n    }\n\n    return null\n}\n//sampleEnd\n\n\nfun main() {\n    fun printLength(obj: Any) {\n        println(\"'$obj' string length is ${getStringLength(obj) ?: \"... err, is empty or not a string at all\"} \")\n    }\n    printLength(\"Incomprehensibilities\")\n    printLength(\"\")\n    printLength(1000)\n}\n"}, {"type": "p", "text": "See Classes and Type casts."}, {"type": "a", "text": "Classes"}, {"type": "a", "text": "Type casts"}, {"type": "h2", "text": "for loop"}, {"type": "code", "text": "for"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val items = listOf(\"apple\", \"banana\", \"kiwifruit\")\n    for (item in items) {\n        println(item)\n    }\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val items = listOf(\"apple\", \"banana\", \"kiwifruit\")\n    for (item in items) {\n        println(item)\n    }\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val items = listOf(\"apple\", \"banana\", \"kiwifruit\")\n    for (item in items) {\n        println(item)\n    }\n//sampleEnd\n}\n"}, {"type": "p", "text": "or"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val items = listOf(\"apple\", \"banana\", \"kiwifruit\")\n    for (index in items.indices) {\n        println(\"item at $index is ${items[index]}\")\n    }\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val items = listOf(\"apple\", \"banana\", \"kiwifruit\")\n    for (index in items.indices) {\n        println(\"item at $index is ${items[index]}\")\n    }\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val items = listOf(\"apple\", \"banana\", \"kiwifruit\")\n    for (index in items.indices) {\n        println(\"item at $index is ${items[index]}\")\n    }\n//sampleEnd\n}\n"}, {"type": "p", "text": "See for loop."}, {"type": "a", "text": "for loop"}, {"type": "h2", "text": "while loop"}, {"type": "code", "text": "while"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val items = listOf(\"apple\", \"banana\", \"kiwifruit\")\n    var index = 0\n    while (index < items.size) {\n        println(\"item at $index is ${items[index]}\")\n        index++\n    }\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val items = listOf(\"apple\", \"banana\", \"kiwifruit\")\n    var index = 0\n    while (index < items.size) {\n        println(\"item at $index is ${items[index]}\")\n        index++\n    }\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val items = listOf(\"apple\", \"banana\", \"kiwifruit\")\n    var index = 0\n    while (index < items.size) {\n        println(\"item at $index is ${items[index]}\")\n        index++\n    }\n//sampleEnd\n}\n"}, {"type": "p", "text": "See while loop."}, {"type": "a", "text": "while loop"}, {"type": "h2", "text": "when expression"}, {"type": "code", "text": "when"}, {"type": "div", "text": "\n//sampleStart\nfun describe(obj: Any): String =\n    when (obj) {\n        1          -> \"One\"\n        \"Hello\"    -> \"Greeting\"\n        is Long    -> \"Long\"\n        !is String -> \"Not a string\"\n        else       -> \"Unknown\"\n    }\n//sampleEnd\n\nfun main() {\n    println(describe(1))\n    println(describe(\"Hello\"))\n    println(describe(1000L))\n    println(describe(2))\n    println(describe(\"other\"))\n}\n\n"}, {"type": "pre", "text": "//sampleStart\nfun describe(obj: Any): String =\n    when (obj) {\n        1          -> \"One\"\n        \"Hello\"    -> \"Greeting\"\n        is Long    -> \"Long\"\n        !is String -> \"Not a string\"\n        else       -> \"Unknown\"\n    }\n//sampleEnd\n\nfun main() {\n    println(describe(1))\n    println(describe(\"Hello\"))\n    println(describe(1000L))\n    println(describe(2))\n    println(describe(\"other\"))\n}\n"}, {"type": "code", "text": "//sampleStart\nfun describe(obj: Any): String =\n    when (obj) {\n        1          -> \"One\"\n        \"Hello\"    -> \"Greeting\"\n        is Long    -> \"Long\"\n        !is String -> \"Not a string\"\n        else       -> \"Unknown\"\n    }\n//sampleEnd\n\nfun main() {\n    println(describe(1))\n    println(describe(\"Hello\"))\n    println(describe(1000L))\n    println(describe(2))\n    println(describe(\"other\"))\n}\n"}, {"type": "p", "text": "See when expression."}, {"type": "a", "text": "when expression"}, {"type": "h2", "text": "Ranges"}, {"type": "p", "text": "Check if a number is within a range using in operator:"}, {"type": "em", "text": "in"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val x = 10\n    val y = 9\n    if (x in 1..y+1) {\n        println(\"fits in range\")\n    }\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val x = 10\n    val y = 9\n    if (x in 1..y+1) {\n        println(\"fits in range\")\n    }\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val x = 10\n    val y = 9\n    if (x in 1..y+1) {\n        println(\"fits in range\")\n    }\n//sampleEnd\n}\n"}, {"type": "p", "text": "Check if a number is out of range:"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val list = listOf(\"a\", \"b\", \"c\")\n    \n    if (-1 !in 0..list.lastIndex) {\n        println(\"-1 is out of range\")\n    }\n    if (list.size !in list.indices) {\n        println(\"list size is out of valid list indices range, too\")\n    }\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val list = listOf(\"a\", \"b\", \"c\")\n    \n    if (-1 !in 0..list.lastIndex) {\n        println(\"-1 is out of range\")\n    }\n    if (list.size !in list.indices) {\n        println(\"list size is out of valid list indices range, too\")\n    }\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val list = listOf(\"a\", \"b\", \"c\")\n    \n    if (-1 !in 0..list.lastIndex) {\n        println(\"-1 is out of range\")\n    }\n    if (list.size !in list.indices) {\n        println(\"list size is out of valid list indices range, too\")\n    }\n//sampleEnd\n}\n"}, {"type": "p", "text": "Iterating over a range:"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    for (x in 1..5) {\n        print(x)\n    }\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    for (x in 1..5) {\n        print(x)\n    }\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    for (x in 1..5) {\n        print(x)\n    }\n//sampleEnd\n}\n"}, {"type": "p", "text": "or over a progression:"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    for (x in 1..10 step 2) {\n        print(x)\n    }\n    println()\n    for (x in 9 downTo 0 step 3) {\n        print(x)\n    }\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    for (x in 1..10 step 2) {\n        print(x)\n    }\n    println()\n    for (x in 9 downTo 0 step 3) {\n        print(x)\n    }\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    for (x in 1..10 step 2) {\n        print(x)\n    }\n    println()\n    for (x in 9 downTo 0 step 3) {\n        print(x)\n    }\n//sampleEnd\n}\n"}, {"type": "p", "text": "See Ranges."}, {"type": "a", "text": "Ranges"}, {"type": "h2", "text": "Collections"}, {"type": "p", "text": "Iterating over a collection:"}, {"type": "div", "text": "\nfun main() {\n    val items = listOf(\"apple\", \"banana\", \"kiwifruit\")\n//sampleStart\n    for (item in items) {\n        println(item)\n    }\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n    val items = listOf(\"apple\", \"banana\", \"kiwifruit\")\n//sampleStart\n    for (item in items) {\n        println(item)\n    }\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n    val items = listOf(\"apple\", \"banana\", \"kiwifruit\")\n//sampleStart\n    for (item in items) {\n        println(item)\n    }\n//sampleEnd\n}\n"}, {"type": "p", "text": "Checking if a collection contains an object using in operator:"}, {"type": "em", "text": "in"}, {"type": "div", "text": "\nfun main() {\n    val items = setOf(\"apple\", \"banana\", \"kiwifruit\")\n//sampleStart\n    when {\n        \"orange\" in items -> println(\"juicy\")\n        \"apple\" in items -> println(\"apple is fine too\")\n    }\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n    val items = setOf(\"apple\", \"banana\", \"kiwifruit\")\n//sampleStart\n    when {\n        \"orange\" in items -> println(\"juicy\")\n        \"apple\" in items -> println(\"apple is fine too\")\n    }\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n    val items = setOf(\"apple\", \"banana\", \"kiwifruit\")\n//sampleStart\n    when {\n        \"orange\" in items -> println(\"juicy\")\n        \"apple\" in items -> println(\"apple is fine too\")\n    }\n//sampleEnd\n}\n"}, {"type": "p", "text": "Using lambda expressions to filter and map collections:"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val fruits = listOf(\"banana\", \"avocado\", \"apple\", \"kiwifruit\")\n    fruits\n      .filter { it.startsWith(\"a\") }\n      .sortedBy { it }\n      .map { it.toUpperCase() }\n      .forEach { println(it) }\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val fruits = listOf(\"banana\", \"avocado\", \"apple\", \"kiwifruit\")\n    fruits\n      .filter { it.startsWith(\"a\") }\n      .sortedBy { it }\n      .map { it.toUpperCase() }\n      .forEach { println(it) }\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val fruits = listOf(\"banana\", \"avocado\", \"apple\", \"kiwifruit\")\n    fruits\n      .filter { it.startsWith(\"a\") }\n      .sortedBy { it }\n      .map { it.toUpperCase() }\n      .forEach { println(it) }\n//sampleEnd\n}\n"}, {"type": "p", "text": "See Collections overview."}, {"type": "a", "text": "Collections overview"}, {"type": "h2", "text": "Creating basic classes and their instances"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val rectangle = Rectangle(5.0, 2.0)\n    val triangle = Triangle(3.0, 4.0, 5.0)\n//sampleEnd\n    println(\"Area of rectangle is ${rectangle.calculateArea()}, its perimeter is ${rectangle.perimeter}\")\n    println(\"Area of triangle is ${triangle.calculateArea()}, its perimeter is ${triangle.perimeter}\")\n}\n\nabstract class Shape(val sides: List<Double>) {\n    val perimeter: Double get() = sides.sum()\n    abstract fun calculateArea(): Double\n}\n\ninterface RectangleProperties {\n    val isSquare: Boolean\n}\n\nclass Rectangle(\n    var height: Double,\n    var length: Double\n) : Shape(listOf(height, length, height, length)), RectangleProperties {\n    override val isSquare: Boolean get() = length == height\n    override fun calculateArea(): Double = height * length\n}\n\nclass Triangle(\n    var sideA: Double,\n    var sideB: Double,\n    var sideC: Double\n) : Shape(listOf(sideA, sideB, sideC)) {\n    override fun calculateArea(): Double {\n        val s = perimeter / 2\n        return Math.sqrt(s * (s - sideA) * (s - sideB) * (s - sideC))\n    }\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val rectangle = Rectangle(5.0, 2.0)\n    val triangle = Triangle(3.0, 4.0, 5.0)\n//sampleEnd\n    println(\"Area of rectangle is ${rectangle.calculateArea()}, its perimeter is ${rectangle.perimeter}\")\n    println(\"Area of triangle is ${triangle.calculateArea()}, its perimeter is ${triangle.perimeter}\")\n}\n\nabstract class Shape(val sides: List<Double>) {\n    val perimeter: Double get() = sides.sum()\n    abstract fun calculateArea(): Double\n}\n\ninterface RectangleProperties {\n    val isSquare: Boolean\n}\n\nclass Rectangle(\n    var height: Double,\n    var length: Double\n) : Shape(listOf(height, length, height, length)), RectangleProperties {\n    override val isSquare: Boolean get() = length == height\n    override fun calculateArea(): Double = height * length\n}\n\nclass Triangle(\n    var sideA: Double,\n    var sideB: Double,\n    var sideC: Double\n) : Shape(listOf(sideA, sideB, sideC)) {\n    override fun calculateArea(): Double {\n        val s = perimeter / 2\n        return Math.sqrt(s * (s - sideA) * (s - sideB) * (s - sideC))\n    }\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val rectangle = Rectangle(5.0, 2.0)\n    val triangle = Triangle(3.0, 4.0, 5.0)\n//sampleEnd\n    println(\"Area of rectangle is ${rectangle.calculateArea()}, its perimeter is ${rectangle.perimeter}\")\n    println(\"Area of triangle is ${triangle.calculateArea()}, its perimeter is ${triangle.perimeter}\")\n}\n\nabstract class Shape(val sides: List<Double>) {\n    val perimeter: Double get() = sides.sum()\n    abstract fun calculateArea(): Double\n}\n\ninterface RectangleProperties {\n    val isSquare: Boolean\n}\n\nclass Rectangle(\n    var height: Double,\n    var length: Double\n) : Shape(listOf(height, length, height, length)), RectangleProperties {\n    override val isSquare: Boolean get() = length == height\n    override fun calculateArea(): Double = height * length\n}\n\nclass Triangle(\n    var sideA: Double,\n    var sideB: Double,\n    var sideC: Double\n) : Shape(listOf(sideA, sideB, sideC)) {\n    override fun calculateArea(): Double {\n        val s = perimeter / 2\n        return Math.sqrt(s * (s - sideA) * (s - sideB) * (s - sideC))\n    }\n}\n"}, {"type": "p", "text": "See classes and objects and instances."}, {"type": "a", "text": "classes"}, {"type": "a", "text": "objects and instances"}]