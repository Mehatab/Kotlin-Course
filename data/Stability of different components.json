[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Stability of Different Components"}, {"type": "p", "text": "There can be different modes of stability depending of how quickly a component is evolving:\n"}, {"type": "a", "text": ""}, {"type": "ul", "text": "\n\nMoving fast (MF): no compatibility should be expected between even incremental releases, any functionality can be added, removed or changed without warning.\n\n\nAdditions in Incremental Releases (AIR): things can be added in an incremental release, removals and changes of behavior should be avoided and announced in a previous incremental release if necessary.\n\n\nStable Incremental Releases (SIR): incremental releases are fully compatible, only optimizations and bug fixes happen. Any changes can be made in a feature release.\n\n"}, {"type": "li", "text": "\nMoving fast (MF): no compatibility should be expected between even incremental releases, any functionality can be added, removed or changed without warning.\n"}, {"type": "p", "text": "Moving fast (MF): no compatibility should be expected between even incremental releases, any functionality can be added, removed or changed without warning."}, {"type": "strong", "text": "Moving fast (MF)"}, {"type": "a", "text": "incremental releases"}, {"type": "li", "text": "\nAdditions in Incremental Releases (AIR): things can be added in an incremental release, removals and changes of behavior should be avoided and announced in a previous incremental release if necessary.\n"}, {"type": "p", "text": "Additions in Incremental Releases (AIR): things can be added in an incremental release, removals and changes of behavior should be avoided and announced in a previous incremental release if necessary."}, {"type": "strong", "text": "Additions in Incremental Releases (AIR)"}, {"type": "li", "text": "\nStable Incremental Releases (SIR): incremental releases are fully compatible, only optimizations and bug fixes happen. Any changes can be made in a feature release.\n"}, {"type": "p", "text": "Stable Incremental Releases (SIR): incremental releases are fully compatible, only optimizations and bug fixes happen. Any changes can be made in a feature release."}, {"type": "strong", "text": "Stable Incremental Releases (SIR)"}, {"type": "a", "text": "feature release"}, {"type": "p", "text": ""}, {"type": "a", "text": ""}, {"type": "ul", "text": "\nFully Stable (FS): incremental releases are fully compatible, only optimizations and bug fixes happen. Feature releases are backwards compatible.\n"}, {"type": "li", "text": "Fully Stable (FS): incremental releases are fully compatible, only optimizations and bug fixes happen. Feature releases are backwards compatible."}, {"type": "strong", "text": "Fully Stable (FS)"}, {"type": "p", "text": "Source and binary compatibility may have different modes for the same component, e.g. the source language can reach full stability before the binary format stabilizes, or vice versa."}, {"type": "p", "text": "The provisions of the Kotlin evolution policy fully apply only to components that have reached Full Stability (FS). From that point on incompatible changes have to be approved by the Language Committee."}, {"type": "a", "text": "Kotlin evolution policy"}, {"type": "table", "text": "\n\n\nComponent\nStatus Entered at version\nMode for Sources\nMode for Binaries\n\n\n\n\nKotlin/JVM\n1.0\nFS\nFS\n\n\nkotlin-stdlib (JVM)\n1.0\nFS\nFS\n\n\nKDoc syntax\n1.0\nFS\nN/A\n\n\nCoroutines\n1.3\nFS\nFS\n\n\nkotlin-reflect (JVM)\n1.0\nSIR\nSIR\n\n\nKotlin/JS\n1.1\nAIR\nMF\n\n\nKotlin/Native\n1.3\nAIR\nMF\n\n\nKotlin Scripts (*.kts)\n1.2\nAIR\nMF\n\n\ndokka\n0.1\nMF\nN/A\n\n\nKotlin Scripting APIs\n1.2\nMF\nMF\n\n\nCompiler Plugin API\n1.0\nMF\nMF\n\n\nSerialization\n1.3\nMF\nMF\n\n\nMultiplatform Projects\n1.2\nMF\nMF\n\n\nInline classes\n1.3\nMF\nMF\n\n\nUnsigned arithmetics\n1.3\nMF\nMF\n\n\nAll other experimental features, by default\nN/A\nMF\nMF\n\n\n"}, {"type": "thead", "text": "\n\nComponent\nStatus Entered at version\nMode for Sources\nMode for Binaries\n\n"}, {"type": "tr", "text": "\nComponent\nStatus Entered at version\nMode for Sources\nMode for Binaries\n"}, {"type": "th", "text": "Component"}, {"type": "strong", "text": "Component"}, {"type": "th", "text": "Status Entered at version"}, {"type": "strong", "text": "Status Entered at version"}, {"type": "th", "text": "Mode for Sources"}, {"type": "strong", "text": "Mode for Sources"}, {"type": "th", "text": "Mode for Binaries"}, {"type": "strong", "text": "Mode for Binaries"}, {"type": "tbody", "text": "\n\nKotlin/JVM\n1.0\nFS\nFS\n\n\nkotlin-stdlib (JVM)\n1.0\nFS\nFS\n\n\nKDoc syntax\n1.0\nFS\nN/A\n\n\nCoroutines\n1.3\nFS\nFS\n\n\nkotlin-reflect (JVM)\n1.0\nSIR\nSIR\n\n\nKotlin/JS\n1.1\nAIR\nMF\n\n\nKotlin/Native\n1.3\nAIR\nMF\n\n\nKotlin Scripts (*.kts)\n1.2\nAIR\nMF\n\n\ndokka\n0.1\nMF\nN/A\n\n\nKotlin Scripting APIs\n1.2\nMF\nMF\n\n\nCompiler Plugin API\n1.0\nMF\nMF\n\n\nSerialization\n1.3\nMF\nMF\n\n\nMultiplatform Projects\n1.2\nMF\nMF\n\n\nInline classes\n1.3\nMF\nMF\n\n\nUnsigned arithmetics\n1.3\nMF\nMF\n\n\nAll other experimental features, by default\nN/A\nMF\nMF\n\n"}, {"type": "tr", "text": "\nKotlin/JVM\n1.0\nFS\nFS\n"}, {"type": "td", "text": "Kotlin/JVM"}, {"type": "td", "text": "1.0"}, {"type": "td", "text": "FS"}, {"type": "td", "text": "FS"}, {"type": "tr", "text": "\nkotlin-stdlib (JVM)\n1.0\nFS\nFS\n"}, {"type": "td", "text": "kotlin-stdlib (JVM)"}, {"type": "td", "text": "1.0"}, {"type": "td", "text": "FS"}, {"type": "td", "text": "FS"}, {"type": "tr", "text": "\nKDoc syntax\n1.0\nFS\nN/A\n"}, {"type": "td", "text": "KDoc syntax"}, {"type": "td", "text": "1.0"}, {"type": "td", "text": "FS"}, {"type": "td", "text": "N/A"}, {"type": "tr", "text": "\nCoroutines\n1.3\nFS\nFS\n"}, {"type": "td", "text": "Coroutines"}, {"type": "td", "text": "1.3"}, {"type": "td", "text": "FS"}, {"type": "td", "text": "FS"}, {"type": "tr", "text": "\nkotlin-reflect (JVM)\n1.0\nSIR\nSIR\n"}, {"type": "td", "text": "kotlin-reflect (JVM)"}, {"type": "td", "text": "1.0"}, {"type": "td", "text": "SIR"}, {"type": "td", "text": "SIR"}, {"type": "tr", "text": "\nKotlin/JS\n1.1\nAIR\nMF\n"}, {"type": "td", "text": "Kotlin/JS"}, {"type": "td", "text": "1.1"}, {"type": "td", "text": "AIR"}, {"type": "td", "text": "MF"}, {"type": "tr", "text": "\nKotlin/Native\n1.3\nAIR\nMF\n"}, {"type": "td", "text": "Kotlin/Native"}, {"type": "td", "text": "1.3"}, {"type": "td", "text": "AIR"}, {"type": "td", "text": "MF"}, {"type": "tr", "text": "\nKotlin Scripts (*.kts)\n1.2\nAIR\nMF\n"}, {"type": "td", "text": "Kotlin Scripts (*.kts)"}, {"type": "td", "text": "1.2"}, {"type": "td", "text": "AIR"}, {"type": "td", "text": "MF"}, {"type": "tr", "text": "\ndokka\n0.1\nMF\nN/A\n"}, {"type": "td", "text": "dokka"}, {"type": "td", "text": "0.1"}, {"type": "td", "text": "MF"}, {"type": "td", "text": "N/A"}, {"type": "tr", "text": "\nKotlin Scripting APIs\n1.2\nMF\nMF\n"}, {"type": "td", "text": "Kotlin Scripting APIs"}, {"type": "td", "text": "1.2"}, {"type": "td", "text": "MF"}, {"type": "td", "text": "MF"}, {"type": "tr", "text": "\nCompiler Plugin API\n1.0\nMF\nMF\n"}, {"type": "td", "text": "Compiler Plugin API"}, {"type": "td", "text": "1.0"}, {"type": "td", "text": "MF"}, {"type": "td", "text": "MF"}, {"type": "tr", "text": "\nSerialization\n1.3\nMF\nMF\n"}, {"type": "td", "text": "Serialization"}, {"type": "td", "text": "1.3"}, {"type": "td", "text": "MF"}, {"type": "td", "text": "MF"}, {"type": "tr", "text": "\nMultiplatform Projects\n1.2\nMF\nMF\n"}, {"type": "td", "text": "Multiplatform Projects"}, {"type": "td", "text": "1.2"}, {"type": "td", "text": "MF"}, {"type": "td", "text": "MF"}, {"type": "tr", "text": "\nInline classes\n1.3\nMF\nMF\n"}, {"type": "td", "text": "Inline classes"}, {"type": "td", "text": "1.3"}, {"type": "td", "text": "MF"}, {"type": "td", "text": "MF"}, {"type": "tr", "text": "\nUnsigned arithmetics\n1.3\nMF\nMF\n"}, {"type": "td", "text": "Unsigned arithmetics"}, {"type": "td", "text": "1.3"}, {"type": "td", "text": "MF"}, {"type": "td", "text": "MF"}, {"type": "tr", "text": "\nAll other experimental features, by default\nN/A\nMF\nMF\n"}, {"type": "td", "text": "All other experimental features, by default"}, {"type": "strong", "text": "All other experimental features, by default"}, {"type": "td", "text": "N/A"}, {"type": "td", "text": "MF"}, {"type": "strong", "text": "MF"}, {"type": "td", "text": "MF"}, {"type": "strong", "text": "MF"}]