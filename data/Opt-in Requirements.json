[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Opt-in Requirements"}, {"type": "blockquote", "text": "\nThe opt-in requirement annotations @RequiresOptIn and @OptIn are experimental. \nSee the usage details below.\n"}, {"type": "p", "text": "The opt-in requirement annotations @RequiresOptIn and @OptIn are experimental. \nSee the usage details below."}, {"type": "code", "text": "@RequiresOptIn"}, {"type": "code", "text": "@OptIn"}, {"type": "em", "text": "experimental"}, {"type": "a", "text": "below"}, {"type": "blockquote", "text": "\n@RequireOptIn and @OptIn annotations were introduced in 1.3.70 to replace previously used @Experimental and @UseExperimental;\nat the same time, -Xopt-in compiler option replaced -Xuse-experimental.\n"}, {"type": "p", "text": "@RequireOptIn and @OptIn annotations were introduced in 1.3.70 to replace previously used @Experimental and @UseExperimental;\nat the same time, -Xopt-in compiler option replaced -Xuse-experimental."}, {"type": "code", "text": "@RequireOptIn"}, {"type": "code", "text": "@OptIn"}, {"type": "code", "text": "@Experimental"}, {"type": "code", "text": "@UseExperimental"}, {"type": "code", "text": "-Xopt-in"}, {"type": "code", "text": "-Xuse-experimental"}, {"type": "p", "text": "The Kotlin standard library provides a mechanism for requiring and giving explicit consent for using certain elements of APIs.\nThis mechanism lets library developers inform users of their APIs about specific conditions that require opt-in,\nfor example, if an API is in the experimental state and is likely to change in the future."}, {"type": "p", "text": "To prevent potential issues, the compiler warns users of such APIs about these conditions and\nrequires them to opt in before using the API."}, {"type": "h2", "text": "Opting in to using API"}, {"type": "p", "text": "If a library author marks a declaration from a library's API as requiring opt-in,\nyou should give an explicit consent for using it in your code. \nThere are several ways to opt in to such APIs, all applicable without technical limitations.\nYou are free to choose the way that you find best for your situation."}, {"type": "a", "text": "requiring opt-in"}, {"type": "em", "text": "requiring opt-in"}, {"type": "h3", "text": "Propagating opt-in"}, {"type": "p", "text": "When you use an API in the code intended for third-party use (a library), you can propagate its opt-in requirement to your API as well.\nTo do this, annotate your declaration with the opt-in requirement annotation of the API used in its body.\nThis enables you to use the API elements marked with this annotation."}, {"type": "a", "text": "opt-in requirement annotation"}, {"type": "em", "text": "opt-in requirement annotation"}, {"type": "div", "text": "\n// library code\n@RequiresOptIn(message = \"This API is experimental. It may be changed in the future without notice.\")\n@Retention(AnnotationRetention.BINARY)\n@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)\nannotation class MyDateTime // Opt-in requirement annotation\n\n@MyDateTime                            \nclass DateProvider // A class requiring opt-in\n\n"}, {"type": "pre", "text": "// library code\n@RequiresOptIn(message = \"This API is experimental. It may be changed in the future without notice.\")\n@Retention(AnnotationRetention.BINARY)\n@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)\nannotation class MyDateTime // Opt-in requirement annotation\n\n@MyDateTime                            \nclass DateProvider // A class requiring opt-in\n"}, {"type": "code", "text": "// library code\n@RequiresOptIn(message = \"This API is experimental. It may be changed in the future without notice.\")\n@Retention(AnnotationRetention.BINARY)\n@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)\nannotation class MyDateTime // Opt-in requirement annotation\n\n@MyDateTime                            \nclass DateProvider // A class requiring opt-in\n"}, {"type": "div", "text": "\n// client code\nfun getYear(): Int {  \n    val dateProvider: DateProvider // Error: DateProvider requires opt-in\n    // ...\n}\n\n@MyDateTime\nfun getDate(): Date {  \n    val dateProvider: DateProvider // OK: the function requires opt-in as well\n    // ...\n}\n\nfun displayDate() {\n    println(getDate()) // error: getDate() requires opt-in\n}\n\n"}, {"type": "pre", "text": "// client code\nfun getYear(): Int {  \n    val dateProvider: DateProvider // Error: DateProvider requires opt-in\n    // ...\n}\n\n@MyDateTime\nfun getDate(): Date {  \n    val dateProvider: DateProvider // OK: the function requires opt-in as well\n    // ...\n}\n\nfun displayDate() {\n    println(getDate()) // error: getDate() requires opt-in\n}\n"}, {"type": "code", "text": "// client code\nfun getYear(): Int {  \n    val dateProvider: DateProvider // Error: DateProvider requires opt-in\n    // ...\n}\n\n@MyDateTime\nfun getDate(): Date {  \n    val dateProvider: DateProvider // OK: the function requires opt-in as well\n    // ...\n}\n\nfun displayDate() {\n    println(getDate()) // error: getDate() requires opt-in\n}\n"}, {"type": "p", "text": "As you can see in this example, the annotated function appears to be a part of the @MyDateTime API.\nSo, such an opt-in propagates the opt-in requirement to the client code; its clients will see the same warning message\nand be required to consent as well.\nTo use multiple APIs that require opt-in, mark the declaration with all their opt-in requirement annotations."}, {"type": "code", "text": "@MyDateTime"}, {"type": "h3", "text": "Non-propagating use"}, {"type": "p", "text": "In modules that don't expose their own API, such as applications, you can opt in to using APIs without propagating\nthe opt-in requirement to your code. In this case, mark your declaration with @OptIn\n passing the opt-in requirement annotation as its argument:"}, {"type": "a", "text": "@OptIn"}, {"type": "div", "text": "\n// library code\n@RequiresOptIn(message = \"This API is experimental. It may be changed in the future without notice.\")\n@Retention(AnnotationRetention.BINARY)\n@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)\nannotation class MyDateTime // Opt-in requirement annotation\n\n@MyDateTime                            \nclass DateProvider // A class requiring opt-in\n\n"}, {"type": "pre", "text": "// library code\n@RequiresOptIn(message = \"This API is experimental. It may be changed in the future without notice.\")\n@Retention(AnnotationRetention.BINARY)\n@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)\nannotation class MyDateTime // Opt-in requirement annotation\n\n@MyDateTime                            \nclass DateProvider // A class requiring opt-in\n"}, {"type": "code", "text": "// library code\n@RequiresOptIn(message = \"This API is experimental. It may be changed in the future without notice.\")\n@Retention(AnnotationRetention.BINARY)\n@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)\nannotation class MyDateTime // Opt-in requirement annotation\n\n@MyDateTime                            \nclass DateProvider // A class requiring opt-in\n"}, {"type": "div", "text": "\n//client code\n@OptIn(MyDateTime::class)\nfun getDate(): Date { // Uses DateProvider; doesn't propagate the opt-in requirement\n    val dateProvider: DateProvider\n    // ...\n}\n\nfun displayDate() {\n    println(getDate()) // OK: opt-in is not required\n}\n\n"}, {"type": "pre", "text": "//client code\n@OptIn(MyDateTime::class)\nfun getDate(): Date { // Uses DateProvider; doesn't propagate the opt-in requirement\n    val dateProvider: DateProvider\n    // ...\n}\n\nfun displayDate() {\n    println(getDate()) // OK: opt-in is not required\n}\n"}, {"type": "code", "text": "//client code\n@OptIn(MyDateTime::class)\nfun getDate(): Date { // Uses DateProvider; doesn't propagate the opt-in requirement\n    val dateProvider: DateProvider\n    // ...\n}\n\nfun displayDate() {\n    println(getDate()) // OK: opt-in is not required\n}\n"}, {"type": "p", "text": "When somebody calls the function getDate(), they won't be informed about the opt-in requirements for APIs used in its body."}, {"type": "code", "text": "getDate()"}, {"type": "p", "text": "To use an API that requires opt-in in all functions and classes in a file, add the file-level annotation @file:OptIn\nto the top of the file before the package specification and imports."}, {"type": "code", "text": "@file:OptIn"}, {"type": "div", "text": "\n //client code\n @file:OptIn(MyDateTime::class)\n\n"}, {"type": "pre", "text": " //client code\n @file:OptIn(MyDateTime::class)\n"}, {"type": "code", "text": " //client code\n @file:OptIn(MyDateTime::class)\n"}, {"type": "h3", "text": "Module-wide opt-in"}, {"type": "p", "text": "If you don't want to annotate every usage of APIs that require opt-in, you can opt in to them for your whole module.\nTo opt in to using an API in a module, compile it with the argument -Xopt-in,\nspecifying the fully qualified name of the opt-in requirement annotation of the API you use: -Xopt-in=org.mylibrary.OptInAnnotation.\nCompiling with this argument has the same effect as if every declaration in the module had the annotation@OptIn(OptInAnnotation::class)."}, {"type": "code", "text": "-Xopt-in"}, {"type": "code", "text": "-Xopt-in=org.mylibrary.OptInAnnotation"}, {"type": "code", "text": "@OptIn(OptInAnnotation::class)"}, {"type": "p", "text": "If you build your module with Gradle, you can add arguments like this:"}, {"type": "div", "text": "\n\ncompileKotlin {\n    kotlinOptions {\n        freeCompilerArgs += \"-Xopt-in=org.mylibrary.OptInAnnotation\"\n    }\n}\n\n\n"}, {"type": "div", "text": "\ncompileKotlin {\n    kotlinOptions {\n        freeCompilerArgs += \"-Xopt-in=org.mylibrary.OptInAnnotation\"\n    }\n}\n\n"}, {"type": "pre", "text": "compileKotlin {\n    kotlinOptions {\n        freeCompilerArgs += \"-Xopt-in=org.mylibrary.OptInAnnotation\"\n    }\n}\n"}, {"type": "code", "text": "compileKotlin {\n    kotlinOptions {\n        freeCompilerArgs += \"-Xopt-in=org.mylibrary.OptInAnnotation\"\n    }\n}\n"}, {"type": "div", "text": "\n\ntasks.withType<KotlinCompile>().all {\n    kotlinOptions.freeCompilerArgs += \"-Xopt-in=org.mylibrary.OptInAnnotation\"\n}\n\n\n"}, {"type": "div", "text": "\ntasks.withType<KotlinCompile>().all {\n    kotlinOptions.freeCompilerArgs += \"-Xopt-in=org.mylibrary.OptInAnnotation\"\n}\n\n"}, {"type": "pre", "text": "tasks.withType<KotlinCompile>().all {\n    kotlinOptions.freeCompilerArgs += \"-Xopt-in=org.mylibrary.OptInAnnotation\"\n}\n"}, {"type": "code", "text": "tasks.withType<KotlinCompile>().all {\n    kotlinOptions.freeCompilerArgs += \"-Xopt-in=org.mylibrary.OptInAnnotation\"\n}\n"}, {"type": "p", "text": "If your Gradle module is a multiplatform module, use the useExperimentalAnnotation method:"}, {"type": "code", "text": "useExperimentalAnnotation"}, {"type": "div", "text": "\n\nsourceSets {\n    all {\n        languageSettings {\n            useExperimentalAnnotation('org.mylibrary.OptInAnnotation')\n        }\n    }\n}\n\n\n"}, {"type": "div", "text": "\nsourceSets {\n    all {\n        languageSettings {\n            useExperimentalAnnotation('org.mylibrary.OptInAnnotation')\n        }\n    }\n}\n\n"}, {"type": "pre", "text": "sourceSets {\n    all {\n        languageSettings {\n            useExperimentalAnnotation('org.mylibrary.OptInAnnotation')\n        }\n    }\n}\n"}, {"type": "code", "text": "sourceSets {\n    all {\n        languageSettings {\n            useExperimentalAnnotation('org.mylibrary.OptInAnnotation')\n        }\n    }\n}\n"}, {"type": "div", "text": "\n\nsourceSets {\n    all {\n        languageSettings.useExperimentalAnnotation(\"org.mylibrary.OptInAnnotation\")\n    }\n}\n\n\n"}, {"type": "div", "text": "\nsourceSets {\n    all {\n        languageSettings.useExperimentalAnnotation(\"org.mylibrary.OptInAnnotation\")\n    }\n}\n\n"}, {"type": "pre", "text": "sourceSets {\n    all {\n        languageSettings.useExperimentalAnnotation(\"org.mylibrary.OptInAnnotation\")\n    }\n}\n"}, {"type": "code", "text": "sourceSets {\n    all {\n        languageSettings.useExperimentalAnnotation(\"org.mylibrary.OptInAnnotation\")\n    }\n}\n"}, {"type": "p", "text": "For Maven, it would be:"}, {"type": "div", "text": "\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-maven-plugin</artifactId>\n            <version>${kotlin.version}</version>\n            <executions>...</executions>\n            <configuration>\n                <args>\n                    <arg>-Xopt-in=org.mylibrary.OptInAnnotation</arg>                    \n                </args>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n\n"}, {"type": "pre", "text": "<build>\n    <plugins>\n        <plugin>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-maven-plugin</artifactId>\n            <version>${kotlin.version}</version>\n            <executions>...</executions>\n            <configuration>\n                <args>\n                    <arg>-Xopt-in=org.mylibrary.OptInAnnotation</arg>                    \n                </args>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n"}, {"type": "code", "text": "<build>\n    <plugins>\n        <plugin>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-maven-plugin</artifactId>\n            <version>${kotlin.version}</version>\n            <executions>...</executions>\n            <configuration>\n                <args>\n                    <arg>-Xopt-in=org.mylibrary.OptInAnnotation</arg>                    \n                </args>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n"}, {"type": "p", "text": "To opt in to multiple APIs on the module level, add one of the described arguments for each opt-in requirement marker used in your module."}, {"type": "h2", "text": "Requiring opt-in for API"}, {"type": "h3", "text": "Opt-in requirement annotations"}, {"type": "p", "text": "If you want to require explicit consent to using your module's API, create an annotation class to use as an opt-in requirement annotation.\nThis class must be annotated with @RequiresOptIn:"}, {"type": "em", "text": "opt-in requirement annotation"}, {"type": "a", "text": "@RequiresOptIn"}, {"type": "div", "text": "\n@RequiresOptIn\n@Retention(AnnotationRetention.BINARY)\n@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)\nannotation class MyDateTime\n\n"}, {"type": "pre", "text": "@RequiresOptIn\n@Retention(AnnotationRetention.BINARY)\n@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)\nannotation class MyDateTime\n"}, {"type": "code", "text": "@RequiresOptIn\n@Retention(AnnotationRetention.BINARY)\n@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)\nannotation class MyDateTime\n"}, {"type": "p", "text": "Opt-in requirement annotations must meet several requirements:"}, {"type": "ul", "text": "\nBINARY retention\nNo EXPRESSION and FILE among targets\nNo parameters.\n"}, {"type": "li", "text": "BINARY retention"}, {"type": "code", "text": "BINARY"}, {"type": "a", "text": "retention"}, {"type": "li", "text": "No EXPRESSION and FILE among targets"}, {"type": "code", "text": "EXPRESSION"}, {"type": "code", "text": "FILE"}, {"type": "a", "text": "targets"}, {"type": "li", "text": "No parameters."}, {"type": "p", "text": "An opt-in requirement can have one of two severity levels:"}, {"type": "a", "text": "levels"}, {"type": "ul", "text": "\nRequiresOptIn.Level.ERROR. Opt-in is mandatory. Otherwise, the code that uses marked API won't compile. Default level.\nRequiresOptIn.Level.WARNING. Opt-in is not mandatory, but advisable. Without it, the compiler raises a warning.\n"}, {"type": "li", "text": "RequiresOptIn.Level.ERROR. Opt-in is mandatory. Otherwise, the code that uses marked API won't compile. Default level."}, {"type": "code", "text": "RequiresOptIn.Level.ERROR"}, {"type": "li", "text": "RequiresOptIn.Level.WARNING. Opt-in is not mandatory, but advisable. Without it, the compiler raises a warning."}, {"type": "code", "text": "RequiresOptIn.Level.WARNING"}, {"type": "p", "text": "To set the desired level, specify the level parameter of the @RequiresOptIn annotation."}, {"type": "code", "text": "level"}, {"type": "code", "text": "@RequiresOptIn"}, {"type": "p", "text": "Additionally, you can provide a message to inform API users about special condition of using the API. \nThe compiler will show it to users that use the API without opt-in."}, {"type": "code", "text": "message"}, {"type": "div", "text": "\n@RequiresOptIn(level = RequiresOptIn.Level.WARNING, message = \"This API is experimental. It can be incompatibly changed in the future.\")\n@Retention(AnnotationRetention.BINARY)\n@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)\nannotation class ExperimentalDateTime\n\n"}, {"type": "pre", "text": "@RequiresOptIn(level = RequiresOptIn.Level.WARNING, message = \"This API is experimental. It can be incompatibly changed in the future.\")\n@Retention(AnnotationRetention.BINARY)\n@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)\nannotation class ExperimentalDateTime\n"}, {"type": "code", "text": "@RequiresOptIn(level = RequiresOptIn.Level.WARNING, message = \"This API is experimental. It can be incompatibly changed in the future.\")\n@Retention(AnnotationRetention.BINARY)\n@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)\nannotation class ExperimentalDateTime\n"}, {"type": "p", "text": "If you publish multiple independent features that require opt-in, declare an annotation for each.\nThis makes the use of API safer for your clients: they can use only the features that they explicitly accept.\nThis also lets you remove the opt-in requirements from the features independently."}, {"type": "h3", "text": "Marking API elements"}, {"type": "p", "text": "To require an opt-in to using an API element, annotate its declaration with an opt-in requirement annotation:"}, {"type": "div", "text": "\n@MyDateTime\nclass DateProvider\n\n@MyDateTime\nfun getTime(): Time {}\n\n"}, {"type": "pre", "text": "@MyDateTime\nclass DateProvider\n\n@MyDateTime\nfun getTime(): Time {}\n"}, {"type": "code", "text": "@MyDateTime\nclass DateProvider\n\n@MyDateTime\nfun getTime(): Time {}\n"}, {"type": "h2", "text": "Opt-in requirements for experimental APIs"}, {"type": "p", "text": "If you use opt-in requirements for features in the experimental state, carefully handle the API graduation to avoid \nbreaking the client code."}, {"type": "p", "text": "Once your experimental API graduates and is released in a stable state, remove its opt-in requirement annotations from declarations.\nThe clients will be able to use them without restriction. However, you should leave the annotation classes in modules so that \nthe existing client code remains compatible."}, {"type": "p", "text": "To let the API users update their modules accordingly (remove the annotations \nfrom their code and recompile), mark the annotations as @Deprecated\nand provide the explanation in the deprecation message."}, {"type": "a", "text": "@Deprecated"}, {"type": "code", "text": "@Deprecated"}, {"type": "div", "text": "\n@Deprecated(\"This opt-in requirement is not used anymore. Remove its usages from your code.\")\n@RequiresOptIn\nannotation class ExperimentalDateTime\n\n"}, {"type": "pre", "text": "@Deprecated(\"This opt-in requirement is not used anymore. Remove its usages from your code.\")\n@RequiresOptIn\nannotation class ExperimentalDateTime\n"}, {"type": "code", "text": "@Deprecated(\"This opt-in requirement is not used anymore. Remove its usages from your code.\")\n@RequiresOptIn\nannotation class ExperimentalDateTime\n"}, {"type": "h2", "text": "Experimental status of the opt-in requirements"}, {"type": "p", "text": "The opt-in requirement mechanism is experimental in Kotlin 1.3.\nThis means that in future releases it may be changed in ways that make it incompatible."}, {"type": "p", "text": "To make the users of annotations @OptIn and @RequiresOptIn aware of their experimental status,\nthe compiler raises warnings when compiling the code with these annotations:"}, {"type": "code", "text": "@OptIn"}, {"type": "code", "text": "@RequiresOptIn"}, {"type": "p", "text": "This class can only be used with the compiler argument '-Xopt-in=kotlin.RequiresOptIn'"}, {"type": "code", "text": "This class can only be used with the compiler argument '-Xopt-in=kotlin.RequiresOptIn'"}, {"type": "p", "text": "To remove the warnings, add the compiler argument -Xopt-in=kotlin.RequiresOptIn."}, {"type": "code", "text": "-Xopt-in=kotlin.RequiresOptIn"}]