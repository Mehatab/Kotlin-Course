[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Collection Operations Overview"}, {"type": "p", "text": "The Kotlin standard library offers a broad variety of functions for performing operations on collections. This includes simple operations, such as getting or adding elements, as well as more complex ones including search, sorting, filtering, transformations, and so on."}, {"type": "h2", "text": "Extension and member functions"}, {"type": "p", "text": "Collection operations are declared in the standard library in two ways: member functions of collection interfaces and extension functions."}, {"type": "a", "text": "member functions"}, {"type": "a", "text": "extension functions"}, {"type": "p", "text": "Member functions define operations that are essential for a collection type. For example, Collection contains the function isEmpty() for checking its emptiness; List contains get() for index access to elements, and so on."}, {"type": "a", "text": "Collection"}, {"type": "code", "text": "Collection"}, {"type": "a", "text": "isEmpty()"}, {"type": "code", "text": "isEmpty()"}, {"type": "a", "text": "List"}, {"type": "code", "text": "List"}, {"type": "a", "text": "get()"}, {"type": "code", "text": "get()"}, {"type": "p", "text": "When you create your own implementations of collection interfaces, you must implement their member functions.\nTo make the creation of new implementations easier, use the skeletal implementations of collection interfaces from the standard library: AbstractCollection, AbstractList, AbstractSet, AbstractMap, and their mutable counterparts."}, {"type": "a", "text": "AbstractCollection"}, {"type": "code", "text": "AbstractCollection"}, {"type": "a", "text": "AbstractList"}, {"type": "code", "text": "AbstractList"}, {"type": "a", "text": "AbstractSet"}, {"type": "code", "text": "AbstractSet"}, {"type": "a", "text": "AbstractMap"}, {"type": "code", "text": "AbstractMap"}, {"type": "p", "text": "Other collection operations are declared as extension functions. These are filtering, transformation, ordering, and other collection processing functions."}, {"type": "h2", "text": "Common operations"}, {"type": "p", "text": "Common operations are available for both read-only and mutable collections. Common operations fall into these groups:"}, {"type": "a", "text": "read-only and mutable collections"}, {"type": "ul", "text": "\nTransformations\nFiltering\nplus and minus operators\nGrouping\nRetrieving collection parts\nRetrieving single elements\nOrdering\nAggregate operations\n"}, {"type": "li", "text": "Transformations"}, {"type": "a", "text": "Transformations"}, {"type": "li", "text": "Filtering"}, {"type": "a", "text": "Filtering"}, {"type": "li", "text": "plus and minus operators"}, {"type": "a", "text": "plus and minus operators"}, {"type": "code", "text": "plus"}, {"type": "code", "text": "minus"}, {"type": "li", "text": "Grouping"}, {"type": "a", "text": "Grouping"}, {"type": "li", "text": "Retrieving collection parts"}, {"type": "a", "text": "Retrieving collection parts"}, {"type": "li", "text": "Retrieving single elements"}, {"type": "a", "text": "Retrieving single elements"}, {"type": "li", "text": "Ordering"}, {"type": "a", "text": "Ordering"}, {"type": "li", "text": "Aggregate operations"}, {"type": "a", "text": "Aggregate operations"}, {"type": "p", "text": "Operations described on these pages return their results without affecting the original collection. For example, a filtering operation produces a new collection that contains all the elements matching the filtering predicate.\nResults of such operations should be either stored in variables, or used in some other way, for example, passed in other functions."}, {"type": "em", "text": "new collection"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")  \n    numbers.filter { it.length > 3 }  // nothing happens with `numbers`, result is lost\n    println(\"numbers are still $numbers\")\n    val longerThan3 = numbers.filter { it.length > 3 } // result is stored in `longerThan3`\n    println(\"numbers longer than 3 chars are $longerThan3\")\n//sampleEnd\n}\n\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")  \n    numbers.filter { it.length > 3 }  // nothing happens with `numbers`, result is lost\n    println(\"numbers are still $numbers\")\n    val longerThan3 = numbers.filter { it.length > 3 } // result is stored in `longerThan3`\n    println(\"numbers longer than 3 chars are $longerThan3\")\n//sampleEnd\n}\n\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")  \n    numbers.filter { it.length > 3 }  // nothing happens with `numbers`, result is lost\n    println(\"numbers are still $numbers\")\n    val longerThan3 = numbers.filter { it.length > 3 } // result is stored in `longerThan3`\n    println(\"numbers longer than 3 chars are $longerThan3\")\n//sampleEnd\n}\n\n"}, {"type": "p", "text": "For certain collection operations, there is an option to specify the destination object.\nDestination is a mutable collection to which the function appends its resulting items instead of returning them in a new object.\nFor performing operations with destinations, there are separate functions with the To postfix in their names, for example, filterTo() instead of filter()  or associateTo() instead of associate().\nThese functions take the destination collection as an additional parameter."}, {"type": "em", "text": "destination"}, {"type": "code", "text": "To"}, {"type": "a", "text": "filterTo()"}, {"type": "code", "text": "filterTo()"}, {"type": "a", "text": "filter()"}, {"type": "code", "text": "filter()"}, {"type": "a", "text": "associateTo()"}, {"type": "code", "text": "associateTo()"}, {"type": "a", "text": "associate()"}, {"type": "code", "text": "associate()"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    val filterResults = mutableListOf<String>()  //destination object\n    numbers.filterTo(filterResults) { it.length > 3 }\n    numbers.filterIndexedTo(filterResults) { index, _ -> index == 0 }\n    println(filterResults) // contains results of both operations\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    val filterResults = mutableListOf<String>()  //destination object\n    numbers.filterTo(filterResults) { it.length > 3 }\n    numbers.filterIndexedTo(filterResults) { index, _ -> index == 0 }\n    println(filterResults) // contains results of both operations\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n    val filterResults = mutableListOf<String>()  //destination object\n    numbers.filterTo(filterResults) { it.length > 3 }\n    numbers.filterIndexedTo(filterResults) { index, _ -> index == 0 }\n    println(filterResults) // contains results of both operations\n//sampleEnd\n}\n"}, {"type": "p", "text": "For convenience, these functions return the destination collection back, so you can create it right in the corresponding argument of the function call:"}, {"type": "div", "text": "\nfun main() {\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n//sampleStart\n    // filter numbers right into a new hash set, \n    // thus eliminating duplicates in the result\n    val result = numbers.mapTo(HashSet()) { it.length }\n    println(\"distinct item lengths are $result\")\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n//sampleStart\n    // filter numbers right into a new hash set, \n    // thus eliminating duplicates in the result\n    val result = numbers.mapTo(HashSet()) { it.length }\n    println(\"distinct item lengths are $result\")\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\")\n//sampleStart\n    // filter numbers right into a new hash set, \n    // thus eliminating duplicates in the result\n    val result = numbers.mapTo(HashSet()) { it.length }\n    println(\"distinct item lengths are $result\")\n//sampleEnd\n}\n"}, {"type": "p", "text": "Functions with destination are available for filtering, association, grouping, flattening, and other operations. For the complete list of destination operations see the Kotlin collections reference."}, {"type": "a", "text": "Kotlin collections reference"}, {"type": "h2", "text": "Write operations"}, {"type": "p", "text": "For mutable collections, there are also write operations that change the collection state. Such operations include adding, removing, and updating elements. Write operations are listed in the Write operations and corresponding sections of List specific operations and Map specific operations."}, {"type": "em", "text": "write operations"}, {"type": "a", "text": "Write operations"}, {"type": "a", "text": "List specific operations"}, {"type": "a", "text": "Map specific operations"}, {"type": "p", "text": "For certain operations, there are pairs of functions for performing the same operation: one applies the operation in-place and the other returns the result as a separate collection.\nFor example, sort() sorts a mutable collection in-place, so its state changes; sorted() creates a new collection that contains the same elements in the sorted order."}, {"type": "a", "text": "sort()"}, {"type": "code", "text": "sort()"}, {"type": "a", "text": "sorted()"}, {"type": "code", "text": "sorted()"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"two\", \"three\", \"four\")\n    val sortedNumbers = numbers.sorted()\n    println(numbers == sortedNumbers)  // false\n    numbers.sort()\n    println(numbers == sortedNumbers)  // true\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"two\", \"three\", \"four\")\n    val sortedNumbers = numbers.sorted()\n    println(numbers == sortedNumbers)  // false\n    numbers.sort()\n    println(numbers == sortedNumbers)  // true\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = mutableListOf(\"one\", \"two\", \"three\", \"four\")\n    val sortedNumbers = numbers.sorted()\n    println(numbers == sortedNumbers)  // false\n    numbers.sort()\n    println(numbers == sortedNumbers)  // true\n//sampleEnd\n}\n"}]