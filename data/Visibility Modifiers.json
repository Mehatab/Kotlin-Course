[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Visibility Modifiers"}, {"type": "p", "text": "Classes, objects, interfaces, constructors, functions, properties and their setters can have visibility modifiers.\n(Getters always have the same visibility as the property.) \nThere are four visibility modifiers in Kotlin: private, protected, internal and public.\nThe default visibility, used if there is no explicit modifier, is public."}, {"type": "em", "text": "visibility modifiers"}, {"type": "code", "text": "private"}, {"type": "code", "text": "protected"}, {"type": "code", "text": "internal"}, {"type": "code", "text": "public"}, {"type": "code", "text": "public"}, {"type": "p", "text": "On this page, you'll learn how the modifiers apply to different types of declaring scopes."}, {"type": "h2", "text": "Packages"}, {"type": "p", "text": "Functions, properties and classes, objects and interfaces can be declared on the \"top-level\", i.e. directly inside a package:"}, {"type": "div", "text": "\n// file name: example.kt\npackage foo\n\nfun baz() { ... }\nclass Bar { ... }\n\n"}, {"type": "pre", "text": "// file name: example.kt\npackage foo\n\nfun baz() { ... }\nclass Bar { ... }\n"}, {"type": "code", "text": "// file name: example.kt\npackage foo\n\nfun baz() { ... }\nclass Bar { ... }\n"}, {"type": "ul", "text": "\nIf you do not specify any visibility modifier, public is used by default, which means that your declarations will be\nvisible everywhere;\nIf you mark a declaration private, it will only be visible inside the file containing the declaration;\nIf you mark it internal, it is visible everywhere in the same module;\nprotected is not available for top-level declarations.\n"}, {"type": "li", "text": "If you do not specify any visibility modifier, public is used by default, which means that your declarations will be\nvisible everywhere;"}, {"type": "code", "text": "public"}, {"type": "li", "text": "If you mark a declaration private, it will only be visible inside the file containing the declaration;"}, {"type": "code", "text": "private"}, {"type": "li", "text": "If you mark it internal, it is visible everywhere in the same module;"}, {"type": "code", "text": "internal"}, {"type": "a", "text": "module"}, {"type": "li", "text": "protected is not available for top-level declarations."}, {"type": "code", "text": "protected"}, {"type": "p", "text": "Note: to use a visible top-level declaration from another package, you should still import it."}, {"type": "a", "text": "import"}, {"type": "p", "text": "Examples:"}, {"type": "div", "text": "\n// file name: example.kt\npackage foo\n\nprivate fun foo() { ... } // visible inside example.kt\n\npublic var bar: Int = 5 // property is visible everywhere\n    private set         // setter is visible only in example.kt\n    \ninternal val baz = 6    // visible inside the same module\n\n"}, {"type": "pre", "text": "// file name: example.kt\npackage foo\n\nprivate fun foo() { ... } // visible inside example.kt\n\npublic var bar: Int = 5 // property is visible everywhere\n    private set         // setter is visible only in example.kt\n    \ninternal val baz = 6    // visible inside the same module\n"}, {"type": "code", "text": "// file name: example.kt\npackage foo\n\nprivate fun foo() { ... } // visible inside example.kt\n\npublic var bar: Int = 5 // property is visible everywhere\n    private set         // setter is visible only in example.kt\n    \ninternal val baz = 6    // visible inside the same module\n"}, {"type": "h2", "text": "Classes and Interfaces"}, {"type": "p", "text": "For members declared inside a class:"}, {"type": "ul", "text": "\nprivate means visible inside this class only (including all its members);\nprotected \u2014 same as private + visible in subclasses too;\ninternal \u2014 any client inside this module who sees the declaring class sees its internal members;\npublic \u2014 any client who sees the declaring class sees its public members.\n"}, {"type": "li", "text": "private means visible inside this class only (including all its members);"}, {"type": "code", "text": "private"}, {"type": "li", "text": "protected \u2014 same as private + visible in subclasses too;"}, {"type": "code", "text": "protected"}, {"type": "code", "text": "private"}, {"type": "li", "text": "internal \u2014 any client inside this module who sees the declaring class sees its internal members;"}, {"type": "code", "text": "internal"}, {"type": "em", "text": "inside this module"}, {"type": "code", "text": "internal"}, {"type": "li", "text": "public \u2014 any client who sees the declaring class sees its public members."}, {"type": "code", "text": "public"}, {"type": "code", "text": "public"}, {"type": "p", "text": "Note that in Kotlin, outer class does not see private members of its inner classes."}, {"type": "p", "text": "If you override a protected member and do not specify the visibility explicitly, the overriding member will also have protected visibility."}, {"type": "code", "text": "protected"}, {"type": "code", "text": "protected"}, {"type": "p", "text": "Examples:"}, {"type": "div", "text": "\nopen class Outer {\n    private val a = 1\n    protected open val b = 2\n    internal val c = 3\n    val d = 4  // public by default\n    \n    protected class Nested {\n        public val e: Int = 5\n    }\n}\n\nclass Subclass : Outer() {\n    // a is not visible\n    // b, c and d are visible\n    // Nested and e are visible\n\n    override val b = 5   // 'b' is protected\n}\n\nclass Unrelated(o: Outer) {\n    // o.a, o.b are not visible\n    // o.c and o.d are visible (same module)\n    // Outer.Nested is not visible, and Nested::e is not visible either \n}\n\n"}, {"type": "pre", "text": "open class Outer {\n    private val a = 1\n    protected open val b = 2\n    internal val c = 3\n    val d = 4  // public by default\n    \n    protected class Nested {\n        public val e: Int = 5\n    }\n}\n\nclass Subclass : Outer() {\n    // a is not visible\n    // b, c and d are visible\n    // Nested and e are visible\n\n    override val b = 5   // 'b' is protected\n}\n\nclass Unrelated(o: Outer) {\n    // o.a, o.b are not visible\n    // o.c and o.d are visible (same module)\n    // Outer.Nested is not visible, and Nested::e is not visible either \n}\n"}, {"type": "code", "text": "open class Outer {\n    private val a = 1\n    protected open val b = 2\n    internal val c = 3\n    val d = 4  // public by default\n    \n    protected class Nested {\n        public val e: Int = 5\n    }\n}\n\nclass Subclass : Outer() {\n    // a is not visible\n    // b, c and d are visible\n    // Nested and e are visible\n\n    override val b = 5   // 'b' is protected\n}\n\nclass Unrelated(o: Outer) {\n    // o.a, o.b are not visible\n    // o.c and o.d are visible (same module)\n    // Outer.Nested is not visible, and Nested::e is not visible either \n}\n"}, {"type": "h3", "text": "Constructors"}, {"type": "p", "text": "To specify a visibility of the primary constructor of a class, use the following syntax (note that you need to add an\nexplicit constructor keyword):"}, {"type": "em", "text": "constructor"}, {"type": "div", "text": "\nclass C private constructor(a: Int) { ... }\n\n"}, {"type": "pre", "text": "class C private constructor(a: Int) { ... }\n"}, {"type": "code", "text": "class C private constructor(a: Int) { ... }\n"}, {"type": "p", "text": "Here the constructor is private. By default, all constructors are public, which effectively\namounts to them being visible everywhere where the class is visible (i.e. a constructor of an internal class is only \nvisible within the same module)."}, {"type": "code", "text": "public"}, {"type": "code", "text": "internal"}, {"type": "h3", "text": "Local declarations"}, {"type": "p", "text": "Local variables, functions and classes can not have visibility modifiers."}, {"type": "h2", "text": "Modules"}, {"type": "p", "text": "The internal visibility modifier means that the member is visible within the same module. More specifically,\na module is a set of Kotlin files compiled together:"}, {"type": "code", "text": "internal"}, {"type": "ul", "text": "\nan IntelliJ IDEA module;\na Maven project;\na Gradle source set (with the exception that the test source set can access the internal declarations of main);\na set of files compiled with one invocation of the <kotlinc> Ant task.\n"}, {"type": "li", "text": "an IntelliJ IDEA module;"}, {"type": "li", "text": "a Maven project;"}, {"type": "li", "text": "a Gradle source set (with the exception that the test source set can access the internal declarations of main);"}, {"type": "code", "text": "test"}, {"type": "code", "text": "main"}, {"type": "li", "text": "a set of files compiled with one invocation of the <kotlinc> Ant task."}, {"type": "code", "text": "<kotlinc>"}]