[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Grouping"}, {"type": "p", "text": "The Kotlin standard library provides extension functions for grouping collection elements.\nThe basic function groupBy() takes a lambda function and returns a Map.\nIn this map, each key is the lambda result and the corresponding value is the List of elements on which this result is returned.\nThis function can be used, for example, to group a list of Strings by their first letter."}, {"type": "a", "text": "groupBy()"}, {"type": "code", "text": "groupBy()"}, {"type": "code", "text": "Map"}, {"type": "code", "text": "List"}, {"type": "code", "text": "String"}, {"type": "p", "text": "You can also call groupBy() with a second lambda argument \u2013 a value transformation function.\nIn the result map of groupBy() with two lambdas, the keys produced by keySelector function are mapped to the results of the value transformation function instead of the original elements."}, {"type": "code", "text": "groupBy()"}, {"type": "code", "text": "groupBy()"}, {"type": "code", "text": "keySelector"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\")\n\n    println(numbers.groupBy { it.first().toUpperCase() })\n    println(numbers.groupBy(keySelector = { it.first() }, valueTransform = { it.toUpperCase() }))\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\")\n\n    println(numbers.groupBy { it.first().toUpperCase() })\n    println(numbers.groupBy(keySelector = { it.first() }, valueTransform = { it.toUpperCase() }))\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\")\n\n    println(numbers.groupBy { it.first().toUpperCase() })\n    println(numbers.groupBy(keySelector = { it.first() }, valueTransform = { it.toUpperCase() }))\n//sampleEnd\n}\n"}, {"type": "p", "text": "If you want to group elements and then apply an operation to all groups at one time, use the function groupingBy().\nIt returns an instance of the Grouping type.\nThe Grouping instance lets you apply operations to all groups in a lazy manner: the groups are actually built right before the operation execution."}, {"type": "a", "text": "groupingBy()"}, {"type": "code", "text": "groupingBy()"}, {"type": "a", "text": "Grouping"}, {"type": "code", "text": "Grouping"}, {"type": "code", "text": "Grouping"}, {"type": "p", "text": "Namely, Grouping supports the following operations:"}, {"type": "code", "text": "Grouping"}, {"type": "ul", "text": "\neachCount() counts the elements in each group.\nfold() and reduce() perform fold and reduce operations on each group as a separate collection and return the results.\naggregate() applies a given operation subsequently to all the elements in each group and returns the result.\n This is the generic way to perform any operations on a Grouping. Use it to implement custom operations when fold or reduce are not enough.\n"}, {"type": "li", "text": "eachCount() counts the elements in each group."}, {"type": "a", "text": "eachCount()"}, {"type": "code", "text": "eachCount()"}, {"type": "li", "text": "fold() and reduce() perform fold and reduce operations on each group as a separate collection and return the results."}, {"type": "a", "text": "fold()"}, {"type": "code", "text": "fold()"}, {"type": "a", "text": "reduce()"}, {"type": "code", "text": "reduce()"}, {"type": "a", "text": "fold and reduce"}, {"type": "li", "text": "aggregate() applies a given operation subsequently to all the elements in each group and returns the result.\n This is the generic way to perform any operations on a Grouping. Use it to implement custom operations when fold or reduce are not enough."}, {"type": "a", "text": "aggregate()"}, {"type": "code", "text": "aggregate()"}, {"type": "code", "text": "Grouping"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\n    println(numbers.groupingBy { it.first() }.eachCount())\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\n    println(numbers.groupingBy { it.first() }.eachCount())\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\n    println(numbers.groupingBy { it.first() }.eachCount())\n//sampleEnd\n}\n"}]