[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Compatibility Guide for Kotlin 1.3"}, {"type": "p", "text": "Keeping the Language Modern and Comfortable Updates are among the fundamental principles in Kotlin Language Design. The former says that constructions which obstruct language evolution should be removed, and the latter says that this removal should be well-communicated beforehand to make code migration as smooth as possible."}, {"type": "em", "text": "Keeping the Language Modern"}, {"type": "em", "text": "Comfortable Updates"}, {"type": "p", "text": "While most of the language changes were already announced through other channels, like update changelogs or compiler warnings, this document summarizes them all, providing a complete reference for migration from Kotlin 1.2 to Kotlin 1.3"}, {"type": "h2", "text": "Basic terms"}, {"type": "p", "text": "In this document we introduce several kinds of compatibility:"}, {"type": "ul", "text": "\nSource: source-incompatible change stops code that used to compile fine (without errors or warnings) from compiling anymore\nBinary: two binary artifacts are said to be binary-compatible if interchanging them doesn't lead to loading or linkage errors\nBehavioral: a change is said to be behavioral-incompatible if one and the same program demonstrates different behavior before and after applying the change\n"}, {"type": "li", "text": "Source: source-incompatible change stops code that used to compile fine (without errors or warnings) from compiling anymore"}, {"type": "li", "text": "Binary: two binary artifacts are said to be binary-compatible if interchanging them doesn't lead to loading or linkage errors"}, {"type": "li", "text": "Behavioral: a change is said to be behavioral-incompatible if one and the same program demonstrates different behavior before and after applying the change"}, {"type": "p", "text": "One has to remember that those definitions are given only for pure Kotlin. Compatibility of Kotlin code from the other languages perspective (e.g. from Java) is out of the scope of this document."}, {"type": "h3", "text": "Evaluation order of constructor arguments regarding <clinit> call"}, {"type": "code", "text": "<clinit>"}, {"type": "blockquote", "text": "\nIssue: KT-19532\nComponent: Kotlin/JVM\nIncompatible change type: behavioral\nShort summary: evaluation order with respect to class initialization is changed in 1.3\nDeprecation cycle:\n\n<1.3: old behavior (see details in the Issue)\n>= 1.3: behavior changed,\n -Xnormalize-constructor-calls=disable can be used to temporarily revert to pre-1.3 behavior. Support for this flag is going to be removed in the next major release.\n\n"}, {"type": "p", "text": "Issue: KT-19532"}, {"type": "strong", "text": "Issue"}, {"type": "a", "text": "KT-19532"}, {"type": "p", "text": "Component: Kotlin/JVM"}, {"type": "strong", "text": "Component"}, {"type": "p", "text": "Incompatible change type: behavioral"}, {"type": "strong", "text": "Incompatible change type"}, {"type": "p", "text": "Short summary: evaluation order with respect to class initialization is changed in 1.3"}, {"type": "strong", "text": "Short summary"}, {"type": "p", "text": "Deprecation cycle:"}, {"type": "strong", "text": "Deprecation cycle"}, {"type": "ul", "text": "\n<1.3: old behavior (see details in the Issue)\n>= 1.3: behavior changed,\n -Xnormalize-constructor-calls=disable can be used to temporarily revert to pre-1.3 behavior. Support for this flag is going to be removed in the next major release.\n"}, {"type": "li", "text": "<1.3: old behavior (see details in the Issue)"}, {"type": "li", "text": ">= 1.3: behavior changed,\n -Xnormalize-constructor-calls=disable can be used to temporarily revert to pre-1.3 behavior. Support for this flag is going to be removed in the next major release."}, {"type": "code", "text": "-Xnormalize-constructor-calls=disable"}, {"type": "h3", "text": "Missing getter-targeted annotations on annotation constructor parameters"}, {"type": "blockquote", "text": "\nIssue: KT-25287\nComponent: Kotlin/JVM\nIncompatible change type: behavioral\nShort summary: getter-target annotations on annotations constructor parameters will be properly written to classfiles in 1.3\nDeprecation cycle:\n\n<1.3: getter-target annotations on annotation constructor parameters are not applied\n>=1.3: getter-target annotations on annotation constructor parameters are properly applied and written to the generated code\n\n"}, {"type": "p", "text": "Issue: KT-25287"}, {"type": "strong", "text": "Issue"}, {"type": "a", "text": "KT-25287"}, {"type": "p", "text": "Component: Kotlin/JVM"}, {"type": "strong", "text": "Component"}, {"type": "p", "text": "Incompatible change type: behavioral"}, {"type": "strong", "text": "Incompatible change type"}, {"type": "p", "text": "Short summary: getter-target annotations on annotations constructor parameters will be properly written to classfiles in 1.3"}, {"type": "strong", "text": "Short summary"}, {"type": "p", "text": "Deprecation cycle:"}, {"type": "strong", "text": "Deprecation cycle"}, {"type": "ul", "text": "\n<1.3: getter-target annotations on annotation constructor parameters are not applied\n>=1.3: getter-target annotations on annotation constructor parameters are properly applied and written to the generated code\n"}, {"type": "li", "text": "<1.3: getter-target annotations on annotation constructor parameters are not applied"}, {"type": "li", "text": ">=1.3: getter-target annotations on annotation constructor parameters are properly applied and written to the generated code"}, {"type": "h3", "text": "Missing errors in class constructor\u2019s @get: annotations"}, {"type": "code", "text": "@get:"}, {"type": "blockquote", "text": "\nIssue: KT-19628\nComponent: Core language\nIncompatible change type: Source\nShort summary: errors in getter-target annotations will be reported properly in 1.3\nDeprecation cycle:\n\n<1.2: compilation errors in getter-target annotations were not reported, causing incorrect code to be compiled fine.\n1.2.x: errors reported only by tooling, the compiler still compiles such code without any warnings\n>=1.3: errors reported by the compiler too, causing erroneous code to be rejected\n\n"}, {"type": "p", "text": "Issue: KT-19628"}, {"type": "strong", "text": "Issue"}, {"type": "a", "text": "KT-19628"}, {"type": "p", "text": "Component: Core language"}, {"type": "strong", "text": "Component"}, {"type": "p", "text": "Incompatible change type: Source"}, {"type": "strong", "text": "Incompatible change type"}, {"type": "p", "text": "Short summary: errors in getter-target annotations will be reported properly in 1.3"}, {"type": "strong", "text": "Short summary"}, {"type": "p", "text": "Deprecation cycle:"}, {"type": "strong", "text": "Deprecation cycle"}, {"type": "ul", "text": "\n<1.2: compilation errors in getter-target annotations were not reported, causing incorrect code to be compiled fine.\n1.2.x: errors reported only by tooling, the compiler still compiles such code without any warnings\n>=1.3: errors reported by the compiler too, causing erroneous code to be rejected\n"}, {"type": "li", "text": "<1.2: compilation errors in getter-target annotations were not reported, causing incorrect code to be compiled fine."}, {"type": "li", "text": "1.2.x: errors reported only by tooling, the compiler still compiles such code without any warnings"}, {"type": "li", "text": ">=1.3: errors reported by the compiler too, causing erroneous code to be rejected"}, {"type": "h3", "text": "Nullability assertions on access to Java types annotated with @NotNull"}, {"type": "code", "text": "@NotNull"}, {"type": "blockquote", "text": "\nIssue: KT-20830\nComponent: Kotlin/JVM\nIncompatible change type: Behavioral\nShort summary: nullability assertions for Java-types annotated with not-null annotations will be generated more aggressively, causing code which passes null here to fail faster.\nDeprecation cycle:\n\n<1.3: the compiler could miss such assertions when type inference was involved, allowing potential null propagation during compilation against binaries (see Issue for details).\n>=1.3: the compiler generates missed assertions. This can case code which was (erroneously) passing nulls here fail faster.\n-XXLanguage:-StrictJavaNullabilityAssertions can be used to temporarily return to the pre-1.3 behavior. Support for this flag will be removed in the next major release.\n\n"}, {"type": "p", "text": "Issue: KT-20830"}, {"type": "strong", "text": "Issue"}, {"type": "a", "text": "KT-20830"}, {"type": "p", "text": "Component: Kotlin/JVM"}, {"type": "strong", "text": "Component"}, {"type": "p", "text": "Incompatible change type: Behavioral"}, {"type": "strong", "text": "Incompatible change type"}, {"type": "p", "text": "Short summary: nullability assertions for Java-types annotated with not-null annotations will be generated more aggressively, causing code which passes null here to fail faster."}, {"type": "strong", "text": "Short summary"}, {"type": "code", "text": "null"}, {"type": "p", "text": "Deprecation cycle:"}, {"type": "strong", "text": "Deprecation cycle"}, {"type": "ul", "text": "\n<1.3: the compiler could miss such assertions when type inference was involved, allowing potential null propagation during compilation against binaries (see Issue for details).\n>=1.3: the compiler generates missed assertions. This can case code which was (erroneously) passing nulls here fail faster.\n-XXLanguage:-StrictJavaNullabilityAssertions can be used to temporarily return to the pre-1.3 behavior. Support for this flag will be removed in the next major release.\n"}, {"type": "li", "text": "<1.3: the compiler could miss such assertions when type inference was involved, allowing potential null propagation during compilation against binaries (see Issue for details)."}, {"type": "code", "text": "null"}, {"type": "li", "text": ">=1.3: the compiler generates missed assertions. This can case code which was (erroneously) passing nulls here fail faster.\n-XXLanguage:-StrictJavaNullabilityAssertions can be used to temporarily return to the pre-1.3 behavior. Support for this flag will be removed in the next major release."}, {"type": "code", "text": "null"}, {"type": "br", "text": ""}, {"type": "code", "text": "-XXLanguage:-StrictJavaNullabilityAssertions"}, {"type": "h3", "text": "Unsound smartcasts on enum members"}, {"type": "blockquote", "text": "\nIssue: KT-20772\nComponent: Core language\nIncompatible change type: Source\nShort summary: a smartcast on a member of one enum entry will be correctly applied to only this enum entry\nDeprecation cycle:\n\n<1.3: a smartcast on a member of one enum entry could lead to an unsound smartcast on the same member of other enum entries.\n>=1.3: smartcast will be properly applied only to the member of one enum entry. \n-XXLanguage:-SoundSmartcastForEnumEntries will temporarily return old behavior. Support for this flag will be removed in the next major release.\n\n"}, {"type": "p", "text": "Issue: KT-20772"}, {"type": "strong", "text": "Issue"}, {"type": "a", "text": "KT-20772"}, {"type": "p", "text": "Component: Core language"}, {"type": "strong", "text": "Component"}, {"type": "p", "text": "Incompatible change type: Source"}, {"type": "strong", "text": "Incompatible change type"}, {"type": "p", "text": "Short summary: a smartcast on a member of one enum entry will be correctly applied to only this enum entry"}, {"type": "strong", "text": "Short summary"}, {"type": "p", "text": "Deprecation cycle:"}, {"type": "strong", "text": "Deprecation cycle"}, {"type": "ul", "text": "\n<1.3: a smartcast on a member of one enum entry could lead to an unsound smartcast on the same member of other enum entries.\n>=1.3: smartcast will be properly applied only to the member of one enum entry. \n-XXLanguage:-SoundSmartcastForEnumEntries will temporarily return old behavior. Support for this flag will be removed in the next major release.\n"}, {"type": "li", "text": "<1.3: a smartcast on a member of one enum entry could lead to an unsound smartcast on the same member of other enum entries."}, {"type": "li", "text": ">=1.3: smartcast will be properly applied only to the member of one enum entry. \n-XXLanguage:-SoundSmartcastForEnumEntries will temporarily return old behavior. Support for this flag will be removed in the next major release."}, {"type": "br", "text": ""}, {"type": "code", "text": "-XXLanguage:-SoundSmartcastForEnumEntries"}, {"type": "h3", "text": "val backing field reassignment in getter"}, {"type": "code", "text": "val"}, {"type": "blockquote", "text": "\nIssue: KT-16681\nComponents: Core language\nIncompatible change type: Source\nShort summary: reassignment of the backing field of val-property in its getter is now prohibited\nDeprecation cycle:\n\n<1.2: Kotlin compiler allowed to modify backing field of val in its getter. Not only it violates Kotlin semantic, but also generates ill-behaved JVM bytecode which reassigns final field.\n1.2.X: deprecation warning is reported on code which reassigns backing field of val\n>=1.3: deprecation warnings are elevated to errors\n\n"}, {"type": "p", "text": "Issue: KT-16681"}, {"type": "strong", "text": "Issue"}, {"type": "a", "text": "KT-16681"}, {"type": "p", "text": "Components: Core language"}, {"type": "strong", "text": "Components"}, {"type": "p", "text": "Incompatible change type: Source"}, {"type": "strong", "text": "Incompatible change type"}, {"type": "p", "text": "Short summary: reassignment of the backing field of val-property in its getter is now prohibited"}, {"type": "strong", "text": "Short summary"}, {"type": "code", "text": "val"}, {"type": "p", "text": "Deprecation cycle:"}, {"type": "strong", "text": "Deprecation cycle"}, {"type": "ul", "text": "\n<1.2: Kotlin compiler allowed to modify backing field of val in its getter. Not only it violates Kotlin semantic, but also generates ill-behaved JVM bytecode which reassigns final field.\n1.2.X: deprecation warning is reported on code which reassigns backing field of val\n>=1.3: deprecation warnings are elevated to errors\n"}, {"type": "li", "text": "<1.2: Kotlin compiler allowed to modify backing field of val in its getter. Not only it violates Kotlin semantic, but also generates ill-behaved JVM bytecode which reassigns final field."}, {"type": "code", "text": "val"}, {"type": "code", "text": "final"}, {"type": "li", "text": "1.2.X: deprecation warning is reported on code which reassigns backing field of val"}, {"type": "code", "text": "val"}, {"type": "li", "text": ">=1.3: deprecation warnings are elevated to errors"}, {"type": "h3", "text": "Array capturing before the for-loop where it is iterated"}, {"type": "code", "text": "for"}, {"type": "blockquote", "text": "\nIssue: KT-21354\nComponent: Kotlin/JVM\nIncompatible change type: Source\nShort summary: if an expression in for-loop range is a local variable updated in a loop body, this change affects loop execution. This is inconsistent with iterating over other containers, such as ranges, character sequences, and collections.\nDeprecation cycle:\n\n<1.2: described code patterns are compiled fine, but updates to local variable affect loop execution\n1.2.X: deprecation warning reported if a range expression in a for-loop is an array-typed local variable which is assigned in a loop body\n1.3: change behavior in such cases to be consistent with other containers\n\n"}, {"type": "p", "text": "Issue: KT-21354"}, {"type": "strong", "text": "Issue"}, {"type": "a", "text": "KT-21354"}, {"type": "p", "text": "Component: Kotlin/JVM"}, {"type": "strong", "text": "Component"}, {"type": "p", "text": "Incompatible change type: Source"}, {"type": "strong", "text": "Incompatible change type"}, {"type": "p", "text": "Short summary: if an expression in for-loop range is a local variable updated in a loop body, this change affects loop execution. This is inconsistent with iterating over other containers, such as ranges, character sequences, and collections."}, {"type": "strong", "text": "Short summary"}, {"type": "p", "text": "Deprecation cycle:"}, {"type": "strong", "text": "Deprecation cycle"}, {"type": "ul", "text": "\n<1.2: described code patterns are compiled fine, but updates to local variable affect loop execution\n1.2.X: deprecation warning reported if a range expression in a for-loop is an array-typed local variable which is assigned in a loop body\n1.3: change behavior in such cases to be consistent with other containers\n"}, {"type": "li", "text": "<1.2: described code patterns are compiled fine, but updates to local variable affect loop execution"}, {"type": "li", "text": "1.2.X: deprecation warning reported if a range expression in a for-loop is an array-typed local variable which is assigned in a loop body"}, {"type": "li", "text": "1.3: change behavior in such cases to be consistent with other containers"}, {"type": "h3", "text": "Nested classifiers in enum entries"}, {"type": "blockquote", "text": "\nIssue: KT-16310\nComponent: Core language\nIncompatible change type: Source\nShort summary: since Kotlin 1.3, nested classifiers (classes, object, interfaces, annotation classes, enum classes) in enum entries are prohibited\nDeprecation cycle:\n\n<1.2: nested classifiers in enum entries are compiled fine, but may fail with exception at runtime\n1.2.X: deprecation warnings reported on the nested classifiers\n>=1.3: deprecation warnings elevated to errors\n\n"}, {"type": "p", "text": "Issue: KT-16310"}, {"type": "strong", "text": "Issue"}, {"type": "a", "text": "KT-16310"}, {"type": "p", "text": "Component: Core language"}, {"type": "strong", "text": "Component"}, {"type": "p", "text": "Incompatible change type: Source"}, {"type": "strong", "text": "Incompatible change type"}, {"type": "p", "text": "Short summary: since Kotlin 1.3, nested classifiers (classes, object, interfaces, annotation classes, enum classes) in enum entries are prohibited"}, {"type": "strong", "text": "Short summary"}, {"type": "p", "text": "Deprecation cycle:"}, {"type": "strong", "text": "Deprecation cycle"}, {"type": "ul", "text": "\n<1.2: nested classifiers in enum entries are compiled fine, but may fail with exception at runtime\n1.2.X: deprecation warnings reported on the nested classifiers\n>=1.3: deprecation warnings elevated to errors\n"}, {"type": "li", "text": "<1.2: nested classifiers in enum entries are compiled fine, but may fail with exception at runtime"}, {"type": "li", "text": "1.2.X: deprecation warnings reported on the nested classifiers"}, {"type": "li", "text": ">=1.3: deprecation warnings elevated to errors"}, {"type": "h3", "text": "Data class overriding copy"}, {"type": "code", "text": "copy"}, {"type": "blockquote", "text": "\nIssue: KT-19618\nComponents: Core language\nIncompatible change type: Source\nShort summary: since Kotlin 1.3, data classes are prohibited to override copy()\nDeprecation cycle:\n\n<1.2: data classes overriding copy() are compiled fine but may fail at runtime/expose strange behavior\n1.2.X: deprecation warnings reported on data classes overriding copy()\n>=1.3: deprecation warnings elevated to errors\n\n"}, {"type": "p", "text": "Issue: KT-19618"}, {"type": "strong", "text": "Issue"}, {"type": "a", "text": "KT-19618"}, {"type": "p", "text": "Components: Core language"}, {"type": "strong", "text": "Components"}, {"type": "p", "text": "Incompatible change type: Source"}, {"type": "strong", "text": "Incompatible change type"}, {"type": "p", "text": "Short summary: since Kotlin 1.3, data classes are prohibited to override copy()"}, {"type": "strong", "text": "Short summary"}, {"type": "code", "text": "copy()"}, {"type": "p", "text": "Deprecation cycle:"}, {"type": "strong", "text": "Deprecation cycle"}, {"type": "ul", "text": "\n<1.2: data classes overriding copy() are compiled fine but may fail at runtime/expose strange behavior\n1.2.X: deprecation warnings reported on data classes overriding copy()\n>=1.3: deprecation warnings elevated to errors\n"}, {"type": "li", "text": "<1.2: data classes overriding copy() are compiled fine but may fail at runtime/expose strange behavior"}, {"type": "code", "text": "copy()"}, {"type": "li", "text": "1.2.X: deprecation warnings reported on data classes overriding copy()"}, {"type": "code", "text": "copy()"}, {"type": "li", "text": ">=1.3: deprecation warnings elevated to errors"}, {"type": "h3", "text": "Inner classes inheriting Throwable that capture generic parameters from the outer class"}, {"type": "code", "text": "Throwable"}, {"type": "blockquote", "text": "\nIssue: KT-17981\nComponent: Core language\nIncompatible change type: Source\nShort summary: since Kotlin 1.3, inner classes are not allowed to inherit Throwable\nDeprecation cycle:\n\n<1.2: inner classes inheriting Throwable are compiled fine. If such inner classes happen to capture generic parameters, it could lead to strange code patterns which fail at runtime.\n1.2.X: deprecation warnings reported on inner classes inheriting Throwable\n>=1.3: deprecation warnings elevated to errors\n\n"}, {"type": "p", "text": "Issue: KT-17981"}, {"type": "strong", "text": "Issue"}, {"type": "a", "text": "KT-17981"}, {"type": "p", "text": "Component: Core language"}, {"type": "strong", "text": "Component"}, {"type": "p", "text": "Incompatible change type: Source"}, {"type": "strong", "text": "Incompatible change type"}, {"type": "p", "text": "Short summary: since Kotlin 1.3, inner classes are not allowed to inherit Throwable"}, {"type": "strong", "text": "Short summary"}, {"type": "code", "text": "Throwable"}, {"type": "p", "text": "Deprecation cycle:"}, {"type": "strong", "text": "Deprecation cycle"}, {"type": "ul", "text": "\n<1.2: inner classes inheriting Throwable are compiled fine. If such inner classes happen to capture generic parameters, it could lead to strange code patterns which fail at runtime.\n1.2.X: deprecation warnings reported on inner classes inheriting Throwable\n>=1.3: deprecation warnings elevated to errors\n"}, {"type": "li", "text": "<1.2: inner classes inheriting Throwable are compiled fine. If such inner classes happen to capture generic parameters, it could lead to strange code patterns which fail at runtime."}, {"type": "code", "text": "Throwable"}, {"type": "li", "text": "1.2.X: deprecation warnings reported on inner classes inheriting Throwable"}, {"type": "code", "text": "Throwable"}, {"type": "li", "text": ">=1.3: deprecation warnings elevated to errors"}, {"type": "h3", "text": "Visibility rules regarding complex class hierarchies with companion objects"}, {"type": "blockquote", "text": "\nIssues: KT-21515, KT-25333\nComponent: Core language\nIncompatible change type: Source\nShort summary: since Kotlin 1.3, rules of visibility by short names are stricter for complex class hierarchies involving companion objects and nested classifiers.\nDeprecation cycle:\n\n<1.2: old visibility rules (see Issue for details)\n1.2.X: deprecation warnings reported on short names which are not going to be accessible anymore. Tooling suggests automated migration by adding full name.\n>=1.3: deprecation warnings elevated to errors. Offending code should add full qualifiers or explicit imports\n\n"}, {"type": "p", "text": "Issues: KT-21515, KT-25333"}, {"type": "strong", "text": "Issues"}, {"type": "a", "text": "KT-21515"}, {"type": "a", "text": "KT-25333"}, {"type": "p", "text": "Component: Core language"}, {"type": "strong", "text": "Component"}, {"type": "p", "text": "Incompatible change type: Source"}, {"type": "strong", "text": "Incompatible change type"}, {"type": "p", "text": "Short summary: since Kotlin 1.3, rules of visibility by short names are stricter for complex class hierarchies involving companion objects and nested classifiers."}, {"type": "strong", "text": "Short summary"}, {"type": "p", "text": "Deprecation cycle:"}, {"type": "strong", "text": "Deprecation cycle"}, {"type": "ul", "text": "\n<1.2: old visibility rules (see Issue for details)\n1.2.X: deprecation warnings reported on short names which are not going to be accessible anymore. Tooling suggests automated migration by adding full name.\n>=1.3: deprecation warnings elevated to errors. Offending code should add full qualifiers or explicit imports\n"}, {"type": "li", "text": "<1.2: old visibility rules (see Issue for details)"}, {"type": "li", "text": "1.2.X: deprecation warnings reported on short names which are not going to be accessible anymore. Tooling suggests automated migration by adding full name."}, {"type": "li", "text": ">=1.3: deprecation warnings elevated to errors. Offending code should add full qualifiers or explicit imports"}, {"type": "h3", "text": "Non-constant vararg annotation parameters"}, {"type": "blockquote", "text": "\nIssue: KT-23153\nComponent: Core language\nIncompatible change type: Source\nShort summary: since Kotlin 1.3, setting non-constant values as vararg annotation parameters is prohibited\nDeprecation cycle:\n\n<1.2: the compiler allows to pass non-constant value for vararg annotation parameter, but actually drops that value during bytecode generation, leading to non-obvious behavior\n1.2.X: deprecation warnings reported on such code patterns\n>=1.3: deprecation warnings elevated to errors\n\n"}, {"type": "p", "text": "Issue: KT-23153"}, {"type": "strong", "text": "Issue"}, {"type": "a", "text": "KT-23153"}, {"type": "p", "text": "Component: Core language"}, {"type": "strong", "text": "Component"}, {"type": "p", "text": "Incompatible change type: Source"}, {"type": "strong", "text": "Incompatible change type"}, {"type": "p", "text": "Short summary: since Kotlin 1.3, setting non-constant values as vararg annotation parameters is prohibited"}, {"type": "strong", "text": "Short summary"}, {"type": "p", "text": "Deprecation cycle:"}, {"type": "strong", "text": "Deprecation cycle"}, {"type": "ul", "text": "\n<1.2: the compiler allows to pass non-constant value for vararg annotation parameter, but actually drops that value during bytecode generation, leading to non-obvious behavior\n1.2.X: deprecation warnings reported on such code patterns\n>=1.3: deprecation warnings elevated to errors\n"}, {"type": "li", "text": "<1.2: the compiler allows to pass non-constant value for vararg annotation parameter, but actually drops that value during bytecode generation, leading to non-obvious behavior"}, {"type": "li", "text": "1.2.X: deprecation warnings reported on such code patterns"}, {"type": "li", "text": ">=1.3: deprecation warnings elevated to errors"}, {"type": "h3", "text": "Local annotation classes"}, {"type": "blockquote", "text": "\nIssue: KT-23277\nComponent: Core language\nIncompatible change type: Source\nShort summary: since Kotlin 1.3 local annotation classes are not supported\nDeprecation cycle:\n\n<1.2: the compiler compiled local annotation classes fine\n1.2.X: deprecation warnings reported on local annotation classes\n>=1.3: deprecation warnings elevated to errors\n\n"}, {"type": "p", "text": "Issue: KT-23277"}, {"type": "strong", "text": "Issue"}, {"type": "a", "text": "KT-23277"}, {"type": "p", "text": "Component: Core language"}, {"type": "strong", "text": "Component"}, {"type": "p", "text": "Incompatible change type: Source"}, {"type": "strong", "text": "Incompatible change type"}, {"type": "p", "text": "Short summary: since Kotlin 1.3 local annotation classes are not supported"}, {"type": "strong", "text": "Short summary"}, {"type": "p", "text": "Deprecation cycle:"}, {"type": "strong", "text": "Deprecation cycle"}, {"type": "ul", "text": "\n<1.2: the compiler compiled local annotation classes fine\n1.2.X: deprecation warnings reported on local annotation classes\n>=1.3: deprecation warnings elevated to errors\n"}, {"type": "li", "text": "<1.2: the compiler compiled local annotation classes fine"}, {"type": "li", "text": "1.2.X: deprecation warnings reported on local annotation classes"}, {"type": "li", "text": ">=1.3: deprecation warnings elevated to errors"}, {"type": "h3", "text": "Smartcasts on local delegated properties"}, {"type": "blockquote", "text": "\nIssue: KT-22517\nComponent: Core language\nIncompatible change type: Source\nShort summary: since Kotlin 1.3 smartcasts on local delegated properties are not allowed\nDeprecation cycle:\n\n<1.2: the compiler allowed to smartcast local delegated property, which could lead to unsound smartcast in case of ill-behaved delegates\n1.2.X: smartcasts on local delegated properries are reported as deprecated (the compiler issues warnings)\n>=1.3: deprecation warnings elevated to errors\n\n"}, {"type": "p", "text": "Issue: KT-22517"}, {"type": "strong", "text": "Issue"}, {"type": "a", "text": "KT-22517"}, {"type": "p", "text": "Component: Core language"}, {"type": "strong", "text": "Component"}, {"type": "p", "text": "Incompatible change type: Source"}, {"type": "strong", "text": "Incompatible change type"}, {"type": "p", "text": "Short summary: since Kotlin 1.3 smartcasts on local delegated properties are not allowed"}, {"type": "strong", "text": "Short summary"}, {"type": "p", "text": "Deprecation cycle:"}, {"type": "strong", "text": "Deprecation cycle"}, {"type": "ul", "text": "\n<1.2: the compiler allowed to smartcast local delegated property, which could lead to unsound smartcast in case of ill-behaved delegates\n1.2.X: smartcasts on local delegated properries are reported as deprecated (the compiler issues warnings)\n>=1.3: deprecation warnings elevated to errors\n"}, {"type": "li", "text": "<1.2: the compiler allowed to smartcast local delegated property, which could lead to unsound smartcast in case of ill-behaved delegates"}, {"type": "li", "text": "1.2.X: smartcasts on local delegated properries are reported as deprecated (the compiler issues warnings)"}, {"type": "li", "text": ">=1.3: deprecation warnings elevated to errors"}, {"type": "h3", "text": "mod operator convention"}, {"type": "code", "text": "mod"}, {"type": "blockquote", "text": "\nIssues: KT-24197\nComponent: Core language\nIncompatible change type: Source\nShort summary: since Kotlin 1.3 declaration of mod operator is prohibited, as well as calls which resolve to such declarations\nDeprecation cycle:\n\n1.1.X, 1.2.X: report warnings on declarations of operator mod, as well as on calls which resolve to it\n1.3.X: elevate warnings to error, but still allow to resolve to operator mod declarations\n1.4.X: do not resolve calls to operator mod anymore\n\n"}, {"type": "p", "text": "Issues: KT-24197"}, {"type": "strong", "text": "Issues"}, {"type": "a", "text": "KT-24197"}, {"type": "p", "text": "Component: Core language"}, {"type": "strong", "text": "Component"}, {"type": "p", "text": "Incompatible change type: Source"}, {"type": "strong", "text": "Incompatible change type"}, {"type": "p", "text": "Short summary: since Kotlin 1.3 declaration of mod operator is prohibited, as well as calls which resolve to such declarations"}, {"type": "strong", "text": "Short summary"}, {"type": "code", "text": "mod"}, {"type": "p", "text": "Deprecation cycle:"}, {"type": "strong", "text": "Deprecation cycle"}, {"type": "ul", "text": "\n1.1.X, 1.2.X: report warnings on declarations of operator mod, as well as on calls which resolve to it\n1.3.X: elevate warnings to error, but still allow to resolve to operator mod declarations\n1.4.X: do not resolve calls to operator mod anymore\n"}, {"type": "li", "text": "1.1.X, 1.2.X: report warnings on declarations of operator mod, as well as on calls which resolve to it"}, {"type": "code", "text": "operator mod"}, {"type": "li", "text": "1.3.X: elevate warnings to error, but still allow to resolve to operator mod declarations"}, {"type": "code", "text": "operator mod"}, {"type": "li", "text": "1.4.X: do not resolve calls to operator mod anymore"}, {"type": "code", "text": "operator mod"}, {"type": "h3", "text": "Passing single element to vararg in named form"}, {"type": "blockquote", "text": "\nIssues: KT-20588, KT-20589. See also KT-20171\nComponent: Core language\nIncompatible change type: Source\nShort summary: in Kotlin 1.3, assigning single element to vararg is deprecated and should be replaced with consecutive spread and array construction.\nDeprecation cycle:\n\n<1.2: assigning one value element to vararg in named form compiles fine and is treated as assigning single element to array, causing non-obvious behavior when assigning array to vararg\n1.2.X: deprecation warnings are reported on such assignments, users are suggested to switch to consecutive spread and array construction.\n1.3.X: warnings are elevated to errors\n>= 1.4: change semantic of assigning single element to vararg, making assignment of array equivalent to the assignment of a spread of an array\n\n"}, {"type": "p", "text": "Issues: KT-20588, KT-20589. See also KT-20171"}, {"type": "strong", "text": "Issues"}, {"type": "a", "text": "KT-20588"}, {"type": "a", "text": "KT-20589"}, {"type": "a", "text": "KT-20171"}, {"type": "p", "text": "Component: Core language"}, {"type": "strong", "text": "Component"}, {"type": "p", "text": "Incompatible change type: Source"}, {"type": "strong", "text": "Incompatible change type"}, {"type": "p", "text": "Short summary: in Kotlin 1.3, assigning single element to vararg is deprecated and should be replaced with consecutive spread and array construction."}, {"type": "strong", "text": "Short summary"}, {"type": "p", "text": "Deprecation cycle:"}, {"type": "strong", "text": "Deprecation cycle"}, {"type": "ul", "text": "\n<1.2: assigning one value element to vararg in named form compiles fine and is treated as assigning single element to array, causing non-obvious behavior when assigning array to vararg\n1.2.X: deprecation warnings are reported on such assignments, users are suggested to switch to consecutive spread and array construction.\n1.3.X: warnings are elevated to errors\n>= 1.4: change semantic of assigning single element to vararg, making assignment of array equivalent to the assignment of a spread of an array\n"}, {"type": "li", "text": "<1.2: assigning one value element to vararg in named form compiles fine and is treated as assigning single element to array, causing non-obvious behavior when assigning array to vararg"}, {"type": "em", "text": "single"}, {"type": "li", "text": "1.2.X: deprecation warnings are reported on such assignments, users are suggested to switch to consecutive spread and array construction."}, {"type": "li", "text": "1.3.X: warnings are elevated to errors"}, {"type": "li", "text": ">= 1.4: change semantic of assigning single element to vararg, making assignment of array equivalent to the assignment of a spread of an array"}, {"type": "h3", "text": "Retention of annotations with target EXPRESSION"}, {"type": "code", "text": "EXPRESSION"}, {"type": "blockquote", "text": "\nIssue: KT-13762\nComponent: Core language\nIncompatible change type: Source\nShort summary: since Kotlin 1.3, only SOURCE retention is allowed for annotations with target EXPRESSION\nDeprecation cycle:\n\n<1.2: annotations with target EXPRESSION and retention other than SOURCE are allowed, but silently ignored at use-sites\n1.2.X: deprecation warnings are reported on declarations of such annotations\n>=1.3: warnings are elevated to errors\n\n"}, {"type": "p", "text": "Issue: KT-13762"}, {"type": "strong", "text": "Issue"}, {"type": "a", "text": "KT-13762"}, {"type": "p", "text": "Component: Core language"}, {"type": "strong", "text": "Component"}, {"type": "p", "text": "Incompatible change type: Source"}, {"type": "strong", "text": "Incompatible change type"}, {"type": "p", "text": "Short summary: since Kotlin 1.3, only SOURCE retention is allowed for annotations with target EXPRESSION"}, {"type": "strong", "text": "Short summary"}, {"type": "code", "text": "SOURCE"}, {"type": "code", "text": "EXPRESSION"}, {"type": "p", "text": "Deprecation cycle:"}, {"type": "strong", "text": "Deprecation cycle"}, {"type": "ul", "text": "\n<1.2: annotations with target EXPRESSION and retention other than SOURCE are allowed, but silently ignored at use-sites\n1.2.X: deprecation warnings are reported on declarations of such annotations\n>=1.3: warnings are elevated to errors\n"}, {"type": "li", "text": "<1.2: annotations with target EXPRESSION and retention other than SOURCE are allowed, but silently ignored at use-sites"}, {"type": "code", "text": "EXPRESSION"}, {"type": "code", "text": "SOURCE"}, {"type": "li", "text": "1.2.X: deprecation warnings are reported on declarations of such annotations"}, {"type": "li", "text": ">=1.3: warnings are elevated to errors"}, {"type": "h3", "text": "Annotations with target PARAMETER shouldn't be applicable to parameter's type"}, {"type": "code", "text": "PARAMETER"}, {"type": "blockquote", "text": "\nIssue: KT-9580\nComponent: Core language\nIncompatible change type: Source\nShort summary: since Kotlin 1.3, error about wrong annotation target will be properly reported when annotation with target PARAMETER is applied to parameter's type\nDeprecation cycle:\n\n<1.2: aforementioned code patterns are compiled fine; annotations are silently ignored and not present in the bytecode\n1.2.X: deprecation warnings are reported on such usages\n>=1.3: warnings are elevated to errors\n\n"}, {"type": "p", "text": "Issue: KT-9580"}, {"type": "strong", "text": "Issue"}, {"type": "a", "text": "KT-9580"}, {"type": "p", "text": "Component: Core language"}, {"type": "strong", "text": "Component"}, {"type": "p", "text": "Incompatible change type: Source"}, {"type": "strong", "text": "Incompatible change type"}, {"type": "p", "text": "Short summary: since Kotlin 1.3, error about wrong annotation target will be properly reported when annotation with target PARAMETER is applied to parameter's type"}, {"type": "strong", "text": "Short summary"}, {"type": "code", "text": "PARAMETER"}, {"type": "p", "text": "Deprecation cycle:"}, {"type": "strong", "text": "Deprecation cycle"}, {"type": "ul", "text": "\n<1.2: aforementioned code patterns are compiled fine; annotations are silently ignored and not present in the bytecode\n1.2.X: deprecation warnings are reported on such usages\n>=1.3: warnings are elevated to errors\n"}, {"type": "li", "text": "<1.2: aforementioned code patterns are compiled fine; annotations are silently ignored and not present in the bytecode"}, {"type": "li", "text": "1.2.X: deprecation warnings are reported on such usages"}, {"type": "li", "text": ">=1.3: warnings are elevated to errors"}, {"type": "h3", "text": "Array.copyOfRange throws an exception when indices are out of bounds instead of enlarging the returned array"}, {"type": "code", "text": "Array.copyOfRange"}, {"type": "blockquote", "text": "\nIssue: KT-19489\nComponent: kotlin-stdlib (JVM)\nIncompatible change type: Behavioral\nShort summary: since Kotlin 1.3, ensure that the toIndex argument of Array.copyOfRange, which represents the exclusive end of the range being copied, is not greater than the array size and throw IllegalArgumentException if it is.\nDeprecation cycle:\n\n<1.3: in case toIndex in the invocation of Array.copyOfRange is greater than the array size, the missing elements in range fill be filled with nulls, violating soundness of the Kotlin type system.\n>=1.3: check that toIndex is in the array bounds, and throw exception if it isn't\n\n"}, {"type": "p", "text": "Issue: KT-19489"}, {"type": "strong", "text": "Issue"}, {"type": "a", "text": "KT-19489"}, {"type": "p", "text": "Component: kotlin-stdlib (JVM)"}, {"type": "strong", "text": "Component"}, {"type": "p", "text": "Incompatible change type: Behavioral"}, {"type": "strong", "text": "Incompatible change type"}, {"type": "p", "text": "Short summary: since Kotlin 1.3, ensure that the toIndex argument of Array.copyOfRange, which represents the exclusive end of the range being copied, is not greater than the array size and throw IllegalArgumentException if it is."}, {"type": "strong", "text": "Short summary"}, {"type": "code", "text": "toIndex"}, {"type": "code", "text": "Array.copyOfRange"}, {"type": "code", "text": "IllegalArgumentException"}, {"type": "p", "text": "Deprecation cycle:"}, {"type": "strong", "text": "Deprecation cycle"}, {"type": "ul", "text": "\n<1.3: in case toIndex in the invocation of Array.copyOfRange is greater than the array size, the missing elements in range fill be filled with nulls, violating soundness of the Kotlin type system.\n>=1.3: check that toIndex is in the array bounds, and throw exception if it isn't\n"}, {"type": "li", "text": "<1.3: in case toIndex in the invocation of Array.copyOfRange is greater than the array size, the missing elements in range fill be filled with nulls, violating soundness of the Kotlin type system."}, {"type": "code", "text": "toIndex"}, {"type": "code", "text": "Array.copyOfRange"}, {"type": "code", "text": "null"}, {"type": "li", "text": ">=1.3: check that toIndex is in the array bounds, and throw exception if it isn't"}, {"type": "code", "text": "toIndex"}, {"type": "h3", "text": "Progressions of ints and longs with a step of Int.MIN_VALUE and Long.MIN_VALUE are outlawed and won\u2019t be allowed to be instantiated"}, {"type": "code", "text": "Int.MIN_VALUE"}, {"type": "code", "text": "Long.MIN_VALUE"}, {"type": "blockquote", "text": "\nIssue: KT-17176\nComponent: kotlin-stdlib (JVM)\nIncompatible change type: Behavioral\nShort summary: since Kotlin 1.3, prohibit step value for integer progressions being the minimum negative value of its integer type (Long or Int), so that calling IntProgression.fromClosedRange(0, 1, step = Int.MIN_VALUE) will throw IllegalArgumentException\nDeprecation cycle:\n\n<1.3: it was possible to create an IntProgression with Int.MIN_VALUE step, which yields two values [0, -2147483648], which is non-obvious behavior\n>=1.3: throw IllegalArgumentException if the step is the minimum negative value of its integer type\n\n"}, {"type": "p", "text": "Issue: KT-17176"}, {"type": "strong", "text": "Issue"}, {"type": "a", "text": "KT-17176"}, {"type": "p", "text": "Component: kotlin-stdlib (JVM)"}, {"type": "strong", "text": "Component"}, {"type": "p", "text": "Incompatible change type: Behavioral"}, {"type": "strong", "text": "Incompatible change type"}, {"type": "p", "text": "Short summary: since Kotlin 1.3, prohibit step value for integer progressions being the minimum negative value of its integer type (Long or Int), so that calling IntProgression.fromClosedRange(0, 1, step = Int.MIN_VALUE) will throw IllegalArgumentException"}, {"type": "strong", "text": "Short summary"}, {"type": "code", "text": "Long"}, {"type": "code", "text": "Int"}, {"type": "code", "text": "IntProgression.fromClosedRange(0, 1, step = Int.MIN_VALUE)"}, {"type": "code", "text": "IllegalArgumentException"}, {"type": "p", "text": "Deprecation cycle:"}, {"type": "strong", "text": "Deprecation cycle"}, {"type": "ul", "text": "\n<1.3: it was possible to create an IntProgression with Int.MIN_VALUE step, which yields two values [0, -2147483648], which is non-obvious behavior\n>=1.3: throw IllegalArgumentException if the step is the minimum negative value of its integer type\n"}, {"type": "li", "text": "<1.3: it was possible to create an IntProgression with Int.MIN_VALUE step, which yields two values [0, -2147483648], which is non-obvious behavior"}, {"type": "code", "text": "IntProgression"}, {"type": "code", "text": "Int.MIN_VALUE"}, {"type": "code", "text": "[0, -2147483648]"}, {"type": "li", "text": ">=1.3: throw IllegalArgumentException if the step is the minimum negative value of its integer type"}, {"type": "code", "text": "IllegalArgumentException"}, {"type": "h3", "text": "Check for index overflow in operations on very long sequences"}, {"type": "blockquote", "text": "\nIssue: KT-16097\nComponent: kotlin-stdlib (JVM)\nIncompatible change type: Behavioral\nShort summary: since Kotlin 1.3, make sure index, count and similar methods do not overflow for long sequences. See the Issue for the full list of affected methods.\nDeprecation cycle:\n\n<1.3: calling such methods on very long sequences could produce negative results due to integer overflow\n>=1.3: detect overflow in such methods and throw exception immediately\n\n"}, {"type": "p", "text": "Issue: KT-16097"}, {"type": "strong", "text": "Issue"}, {"type": "a", "text": "KT-16097"}, {"type": "p", "text": "Component: kotlin-stdlib (JVM)"}, {"type": "strong", "text": "Component"}, {"type": "p", "text": "Incompatible change type: Behavioral"}, {"type": "strong", "text": "Incompatible change type"}, {"type": "p", "text": "Short summary: since Kotlin 1.3, make sure index, count and similar methods do not overflow for long sequences. See the Issue for the full list of affected methods."}, {"type": "strong", "text": "Short summary"}, {"type": "code", "text": "index"}, {"type": "code", "text": "count"}, {"type": "p", "text": "Deprecation cycle:"}, {"type": "strong", "text": "Deprecation cycle"}, {"type": "ul", "text": "\n<1.3: calling such methods on very long sequences could produce negative results due to integer overflow\n>=1.3: detect overflow in such methods and throw exception immediately\n"}, {"type": "li", "text": "<1.3: calling such methods on very long sequences could produce negative results due to integer overflow"}, {"type": "li", "text": ">=1.3: detect overflow in such methods and throw exception immediately"}, {"type": "h3", "text": "Unify split by an empty match regex result across the platforms"}, {"type": "blockquote", "text": "\nIssue: KT-21049\nComponent: kotlin-stdlib (JVM)\nIncompatible change type: Behavioral\nShort summary: since Kotlin 1.3, unify behavior of split method by empty match regex across all platforms\nDeprecation cycle:\n\n<1.3: behavior of described calls is different when comparing JS, JRE 6, JRE 7 versus JRE 8+\n>=1.3: unify behavior across the platforms\n\n"}, {"type": "p", "text": "Issue: KT-21049"}, {"type": "strong", "text": "Issue"}, {"type": "a", "text": "KT-21049"}, {"type": "p", "text": "Component: kotlin-stdlib (JVM)"}, {"type": "strong", "text": "Component"}, {"type": "p", "text": "Incompatible change type: Behavioral"}, {"type": "strong", "text": "Incompatible change type"}, {"type": "p", "text": "Short summary: since Kotlin 1.3, unify behavior of split method by empty match regex across all platforms"}, {"type": "strong", "text": "Short summary"}, {"type": "code", "text": "split"}, {"type": "p", "text": "Deprecation cycle:"}, {"type": "strong", "text": "Deprecation cycle"}, {"type": "ul", "text": "\n<1.3: behavior of described calls is different when comparing JS, JRE 6, JRE 7 versus JRE 8+\n>=1.3: unify behavior across the platforms\n"}, {"type": "li", "text": "<1.3: behavior of described calls is different when comparing JS, JRE 6, JRE 7 versus JRE 8+"}, {"type": "li", "text": ">=1.3: unify behavior across the platforms"}, {"type": "h3", "text": "Discontinued deprecated artifacts in the compiler distribution"}, {"type": "blockquote", "text": "\nIssue: KT-23799\nComponent: other\nIncompatible change type: Binary\nShort summary: Kotlin 1.3 discontinues the following deprecated binary artifacts:\n\nkotlin-runtime: use kotlin-stdlib instead\nkotlin-stdlib-jre7/8: use kotlin-stdlib-jdk7/8 instead\nkotlin-jslib in the compiler distribution: use kotlin-stdlib-js instead\n\nDeprecation cycle:\n\n1.2.X: the artifacts were marked as deprecated, the compiler reported warning on usage of those artifacts\n>=1.3: the artifacts are discontinued\n\n"}, {"type": "p", "text": "Issue: KT-23799"}, {"type": "strong", "text": "Issue"}, {"type": "a", "text": "KT-23799"}, {"type": "p", "text": "Component: other"}, {"type": "strong", "text": "Component"}, {"type": "p", "text": "Incompatible change type: Binary"}, {"type": "strong", "text": "Incompatible change type"}, {"type": "p", "text": "Short summary: Kotlin 1.3 discontinues the following deprecated binary artifacts:"}, {"type": "strong", "text": "Short summary"}, {"type": "ul", "text": "\nkotlin-runtime: use kotlin-stdlib instead\nkotlin-stdlib-jre7/8: use kotlin-stdlib-jdk7/8 instead\nkotlin-jslib in the compiler distribution: use kotlin-stdlib-js instead\n"}, {"type": "li", "text": "kotlin-runtime: use kotlin-stdlib instead"}, {"type": "code", "text": "kotlin-runtime"}, {"type": "code", "text": "kotlin-stdlib"}, {"type": "li", "text": "kotlin-stdlib-jre7/8: use kotlin-stdlib-jdk7/8 instead"}, {"type": "code", "text": "kotlin-stdlib-jre7/8"}, {"type": "code", "text": "kotlin-stdlib-jdk7/8"}, {"type": "li", "text": "kotlin-jslib in the compiler distribution: use kotlin-stdlib-js instead"}, {"type": "code", "text": "kotlin-jslib"}, {"type": "code", "text": "kotlin-stdlib-js"}, {"type": "p", "text": "Deprecation cycle:"}, {"type": "strong", "text": "Deprecation cycle"}, {"type": "ul", "text": "\n1.2.X: the artifacts were marked as deprecated, the compiler reported warning on usage of those artifacts\n>=1.3: the artifacts are discontinued\n"}, {"type": "li", "text": "1.2.X: the artifacts were marked as deprecated, the compiler reported warning on usage of those artifacts"}, {"type": "li", "text": ">=1.3: the artifacts are discontinued"}, {"type": "h3", "text": "Annotations in stdlib"}, {"type": "blockquote", "text": "\nIssue: KT-21784\nComponent: kotlin-stdlib (JVM)\nIncompatible change type: Binary\nShort summary: Kotlin 1.3 removes annotations from the package org.jetbrains.annotations from stdlib and moves them to the separate artifacts shipped with the compiler: annotations-13.0.jar and mutability-annotations-compat.jar\nDeprecation cycle:\n\n<1.3: annotations were shipped with the stdlib artifact\n>=1.3: annotations ship in separate artifacts\n\n"}, {"type": "p", "text": "Issue: KT-21784"}, {"type": "strong", "text": "Issue"}, {"type": "a", "text": "KT-21784"}, {"type": "p", "text": "Component: kotlin-stdlib (JVM)"}, {"type": "strong", "text": "Component"}, {"type": "p", "text": "Incompatible change type: Binary"}, {"type": "strong", "text": "Incompatible change type"}, {"type": "p", "text": "Short summary: Kotlin 1.3 removes annotations from the package org.jetbrains.annotations from stdlib and moves them to the separate artifacts shipped with the compiler: annotations-13.0.jar and mutability-annotations-compat.jar"}, {"type": "strong", "text": "Short summary"}, {"type": "code", "text": "org.jetbrains.annotations"}, {"type": "code", "text": "annotations-13.0.jar"}, {"type": "code", "text": "mutability-annotations-compat.jar"}, {"type": "p", "text": "Deprecation cycle:"}, {"type": "strong", "text": "Deprecation cycle"}, {"type": "ul", "text": "\n<1.3: annotations were shipped with the stdlib artifact\n>=1.3: annotations ship in separate artifacts\n"}, {"type": "li", "text": "<1.3: annotations were shipped with the stdlib artifact"}, {"type": "li", "text": ">=1.3: annotations ship in separate artifacts"}]