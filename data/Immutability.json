[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Immutability in Kotlin/Native"}, {"type": "p", "text": "Kotlin/Native implements strict mutability checks, ensuring\nthe important invariant that the object is either immutable or\naccessible from the single thread at that moment in time (mutable XOR global)."}, {"type": "code", "text": "mutable XOR global"}, {"type": "p", "text": "Immutability is a runtime property in Kotlin/Native, and can be applied\nto an arbitrary object subgraph using the kotlin.native.concurrent.freeze function.\nIt makes all the objects reachable from the given one immutable,\nsuch a transition is a one-way operation (i.e., objects cannot be unfrozen later).\nSome naturally immutable objects such as kotlin.String, kotlin.Int, and\nother primitive types, along with AtomicInt and AtomicReference are frozen\nby default. If a mutating operation is applied to a frozen object,\nan InvalidMutabilityException is thrown."}, {"type": "code", "text": "kotlin.native.concurrent.freeze"}, {"type": "code", "text": "kotlin.String"}, {"type": "code", "text": "kotlin.Int"}, {"type": "code", "text": "AtomicInt"}, {"type": "code", "text": "AtomicReference"}, {"type": "code", "text": "InvalidMutabilityException"}, {"type": "p", "text": "To achieve mutable XOR global invariant, all globally visible state (currently,\nobject singletons and enums) are automatically frozen. If object freezing\nis not desired, a kotlin.native.ThreadLocal annotation can be used, which will make\nthe object state thread local, and so, mutable (but the changed state is not visible to\nother threads)."}, {"type": "code", "text": "mutable XOR global"}, {"type": "code", "text": "object"}, {"type": "code", "text": "kotlin.native.ThreadLocal"}, {"type": "p", "text": "Top level/global variables of non-primitive types are by default accessible in the\nmain thread (i.e., the thread which initialized Kotlin/Native runtime first) only.\nAccess from another thread will lead to an IncorrectDereferenceException being thrown.\nTo make such variables accessible in other threads, you can use either the @ThreadLocal annotation,\nand mark the value thread local or @SharedImmutable, which will make the value frozen and accessible\nfrom other threads."}, {"type": "em", "text": "Kotlin/Native"}, {"type": "code", "text": "IncorrectDereferenceException"}, {"type": "code", "text": "@ThreadLocal"}, {"type": "code", "text": "@SharedImmutable"}, {"type": "p", "text": "Class AtomicReference can be used to publish the changed frozen state to\nother threads, and so build patterns like shared caches."}, {"type": "code", "text": "AtomicReference"}]