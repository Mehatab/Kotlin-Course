[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Nested and Inner Classes"}, {"type": "p", "text": "Classes can be nested in other classes:"}, {"type": "div", "text": "\nclass Outer {\n    private val bar: Int = 1\n    class Nested {\n        fun foo() = 2\n    }\n}\n\nval demo = Outer.Nested().foo() // == 2\n\n"}, {"type": "pre", "text": "class Outer {\n    private val bar: Int = 1\n    class Nested {\n        fun foo() = 2\n    }\n}\n\nval demo = Outer.Nested().foo() // == 2\n"}, {"type": "code", "text": "class Outer {\n    private val bar: Int = 1\n    class Nested {\n        fun foo() = 2\n    }\n}\n\nval demo = Outer.Nested().foo() // == 2\n"}, {"type": "h2", "text": "Inner classes"}, {"type": "p", "text": "A nested class marked as inner can access the members of its outer class. Inner classes carry a reference to an object of an outer class:"}, {"type": "em", "text": "inner"}, {"type": "div", "text": "\nclass Outer {\n    private val bar: Int = 1\n    inner class Inner {\n        fun foo() = bar\n    }\n}\n\nval demo = Outer().Inner().foo() // == 1\n\n"}, {"type": "pre", "text": "class Outer {\n    private val bar: Int = 1\n    inner class Inner {\n        fun foo() = bar\n    }\n}\n\nval demo = Outer().Inner().foo() // == 1\n"}, {"type": "code", "text": "class Outer {\n    private val bar: Int = 1\n    inner class Inner {\n        fun foo() = bar\n    }\n}\n\nval demo = Outer().Inner().foo() // == 1\n"}, {"type": "p", "text": "See Qualified this expressions to learn about disambiguation of this in inner classes."}, {"type": "a", "text": "Qualified this expressions"}, {"type": "em", "text": "this"}, {"type": "em", "text": "this"}, {"type": "h2", "text": "Anonymous inner classes"}, {"type": "p", "text": "Anonymous inner class instances are created using an object expression:"}, {"type": "a", "text": "object expression"}, {"type": "div", "text": "\nwindow.addMouseListener(object : MouseAdapter() {\n\n    override fun mouseClicked(e: MouseEvent) { ... }\n\n    override fun mouseEntered(e: MouseEvent) { ... }\n})\n\n"}, {"type": "pre", "text": "window.addMouseListener(object : MouseAdapter() {\n\n    override fun mouseClicked(e: MouseEvent) { ... }\n\n    override fun mouseEntered(e: MouseEvent) { ... }\n})\n"}, {"type": "code", "text": "window.addMouseListener(object : MouseAdapter() {\n\n    override fun mouseClicked(e: MouseEvent) { ... }\n\n    override fun mouseEntered(e: MouseEvent) { ... }\n})\n"}, {"type": "p", "text": "Note: on the JVM, if the object is an instance of a functional Java interface (i.e. a Java interface with a single abstract method),\nyou can create it using a lambda expression prefixed with the type of the interface:"}, {"type": "em", "text": "Note"}, {"type": "div", "text": "\nval listener = ActionListener { println(\"clicked\") }\n\n"}, {"type": "pre", "text": "val listener = ActionListener { println(\"clicked\") }\n"}, {"type": "code", "text": "val listener = ActionListener { println(\"clicked\") }\n"}]