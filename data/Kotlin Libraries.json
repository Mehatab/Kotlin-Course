[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Kotlin/Native libraries"}, {"type": "h2", "text": "Kotlin compiler specifics"}, {"type": "p", "text": "To produce a library with the Kotlin/Native compiler use the -produce library or -p library flag. For example:"}, {"type": "code", "text": "-produce library"}, {"type": "code", "text": "-p library"}, {"type": "div", "text": "\n$ kotlinc foo.kt -p library -o bar\n\n"}, {"type": "pre", "text": "$ kotlinc foo.kt -p library -o bar\n"}, {"type": "code", "text": "$ kotlinc foo.kt -p library -o bar\n"}, {"type": "p", "text": "the above command will produce a bar.klib with the compiled contents of foo.kt."}, {"type": "code", "text": "bar.klib"}, {"type": "code", "text": "foo.kt"}, {"type": "p", "text": "To link to a library use the -library <name> or -l <name> flag. For example:"}, {"type": "code", "text": "-library <name>"}, {"type": "code", "text": "-l <name>"}, {"type": "div", "text": "\n$ kotlinc qux.kt -l bar\n\n"}, {"type": "pre", "text": "$ kotlinc qux.kt -l bar\n"}, {"type": "code", "text": "$ kotlinc qux.kt -l bar\n"}, {"type": "p", "text": "the above command will produce a program.kexe out of qux.kt and bar.klib"}, {"type": "code", "text": "program.kexe"}, {"type": "code", "text": "qux.kt"}, {"type": "code", "text": "bar.klib"}, {"type": "h2", "text": "cinterop tool specifics"}, {"type": "p", "text": "The cinterop tool produces .klib wrappers for native libraries as its main output. \nFor example, using the simple libgit2.def native library definition file provided in your Kotlin/Native distribution"}, {"type": "strong", "text": "cinterop"}, {"type": "code", "text": ".klib"}, {"type": "code", "text": "libgit2.def"}, {"type": "div", "text": "\n$ cinterop -def samples/gitchurn/src/nativeInterop/cinterop/libgit2.def -compiler-option -I/usr/local/include -o libgit2\n\n"}, {"type": "pre", "text": "$ cinterop -def samples/gitchurn/src/nativeInterop/cinterop/libgit2.def -compiler-option -I/usr/local/include -o libgit2\n"}, {"type": "code", "text": "$ cinterop -def samples/gitchurn/src/nativeInterop/cinterop/libgit2.def -compiler-option -I/usr/local/include -o libgit2\n"}, {"type": "p", "text": "we will obtain libgit2.klib."}, {"type": "code", "text": "libgit2.klib"}, {"type": "p", "text": "See more details in INTEROP.md"}, {"type": "a", "text": "INTEROP.md"}, {"type": "h2", "text": "klib utility"}, {"type": "p", "text": "The klib library management utility allows you to inspect and install the libraries."}, {"type": "strong", "text": "klib"}, {"type": "p", "text": "The following commands are available."}, {"type": "p", "text": "To list library contents:"}, {"type": "div", "text": "\n$ klib contents <name>\n\n"}, {"type": "pre", "text": "$ klib contents <name>\n"}, {"type": "code", "text": "$ klib contents <name>\n"}, {"type": "p", "text": "To inspect the bookkeeping details of the library"}, {"type": "div", "text": "\n$ klib info <name>\n\n"}, {"type": "pre", "text": "$ klib info <name>\n"}, {"type": "code", "text": "$ klib info <name>\n"}, {"type": "p", "text": "To install the library to the default location use"}, {"type": "div", "text": "\n$ klib install <name>\n\n"}, {"type": "pre", "text": "$ klib install <name>\n"}, {"type": "code", "text": "$ klib install <name>\n"}, {"type": "p", "text": "To remove the library from the default repository use"}, {"type": "div", "text": "\n$ klib remove <name>\n\n"}, {"type": "pre", "text": "$ klib remove <name>\n"}, {"type": "code", "text": "$ klib remove <name>\n"}, {"type": "p", "text": "All of the above commands accept an additional -repository <directory> argument for specifying a repository different to the default one."}, {"type": "code", "text": "-repository <directory>"}, {"type": "div", "text": "\n$ klib <command> <name> -repository <directory>\n\n"}, {"type": "pre", "text": "$ klib <command> <name> -repository <directory>\n"}, {"type": "code", "text": "$ klib <command> <name> -repository <directory>\n"}, {"type": "h2", "text": "Several examples"}, {"type": "p", "text": "First let's create a library.\nPlace the tiny library source code into kotlinizer.kt:"}, {"type": "code", "text": "kotlinizer.kt"}, {"type": "div", "text": "\npackage kotlinizer\nval String.kotlinized\n    get() = \"Kotlin $this\"\n\n$ kotlinc kotlinizer.kt -p library -o kotlinizer\n\n"}, {"type": "pre", "text": "package kotlinizer\nval String.kotlinized\n    get() = \"Kotlin $this\"\n"}, {"type": "code", "text": "package kotlinizer\nval String.kotlinized\n    get() = \"Kotlin $this\"\n"}, {"type": "pre", "text": "$ kotlinc kotlinizer.kt -p library -o kotlinizer\n"}, {"type": "code", "text": "$ kotlinc kotlinizer.kt -p library -o kotlinizer\n"}, {"type": "p", "text": "The library has been created in the current directory:"}, {"type": "div", "text": "\n$ ls kotlinizer.klib\nkotlinizer.klib\n\n"}, {"type": "pre", "text": "$ ls kotlinizer.klib\nkotlinizer.klib\n"}, {"type": "code", "text": "$ ls kotlinizer.klib\nkotlinizer.klib\n"}, {"type": "p", "text": "Now let's check out the contents of the library:"}, {"type": "div", "text": "\n$ klib contents kotlinizer\n\n"}, {"type": "pre", "text": "$ klib contents kotlinizer\n"}, {"type": "code", "text": "$ klib contents kotlinizer\n"}, {"type": "p", "text": "We can install kotlinizer to the default repository:"}, {"type": "code", "text": "kotlinizer"}, {"type": "div", "text": "\n$ klib install kotlinizer\n\n"}, {"type": "pre", "text": "$ klib install kotlinizer\n"}, {"type": "code", "text": "$ klib install kotlinizer\n"}, {"type": "p", "text": "Remove any traces of it from the current directory:"}, {"type": "div", "text": "\n$ rm kotlinizer.klib\n\n"}, {"type": "pre", "text": "$ rm kotlinizer.klib\n"}, {"type": "code", "text": "$ rm kotlinizer.klib\n"}, {"type": "p", "text": "Create a very short program and place it into a use.kt :"}, {"type": "code", "text": "use.kt"}, {"type": "div", "text": "\nimport kotlinizer.*\n\nfun main(args: Array<String>) {\n    println(\"Hello, ${\"world\".kotlinized}!\")\n}\n\n"}, {"type": "pre", "text": "import kotlinizer.*\n\nfun main(args: Array<String>) {\n    println(\"Hello, ${\"world\".kotlinized}!\")\n}\n"}, {"type": "code", "text": "import kotlinizer.*\n\nfun main(args: Array<String>) {\n    println(\"Hello, ${\"world\".kotlinized}!\")\n}\n"}, {"type": "p", "text": "Now compile the program linking with the library we have just created:"}, {"type": "div", "text": "\n$ kotlinc use.kt -l kotlinizer -o kohello\n\n"}, {"type": "pre", "text": "$ kotlinc use.kt -l kotlinizer -o kohello\n"}, {"type": "code", "text": "$ kotlinc use.kt -l kotlinizer -o kohello\n"}, {"type": "p", "text": "And run the program:"}, {"type": "div", "text": "\n$ ./kohello.kexe\nHello, Kotlin world!\n\n"}, {"type": "pre", "text": "$ ./kohello.kexe\nHello, Kotlin world!\n"}, {"type": "code", "text": "$ ./kohello.kexe\nHello, Kotlin world!\n"}, {"type": "p", "text": "Have fun!"}, {"type": "h1", "text": "Advanced topics"}, {"type": "h2", "text": "Library search sequence"}, {"type": "p", "text": "When given a -library foo flag, the compiler searches the foo library in the following order:"}, {"type": "code", "text": "-library foo"}, {"type": "code", "text": "foo"}, {"type": "pre", "text": "* Current compilation directory or an absolute path.\n\n* All repositories specified with `-repo` flag.\n\n* Libraries installed in the default repository (For now the default is  `~/.konan`, however it could be changed by setting **KONAN_DATA_DIR** environment variable).\n\n* Libraries installed in `$installation/klib` directory.\n"}, {"type": "code", "text": "* Current compilation directory or an absolute path.\n\n* All repositories specified with `-repo` flag.\n\n* Libraries installed in the default repository (For now the default is  `~/.konan`, however it could be changed by setting **KONAN_DATA_DIR** environment variable).\n\n* Libraries installed in `$installation/klib` directory.\n"}, {"type": "h2", "text": "The library format"}, {"type": "p", "text": "Kotlin/Native libraries are zip files containing a predefined \ndirectory structure, with the following layout:"}, {"type": "p", "text": "foo.klib when unpacked as foo/ gives us:"}, {"type": "strong", "text": "foo.klib"}, {"type": "strong", "text": "foo/"}, {"type": "pre", "text": "  - foo/\n    - targets/\n      - $platform/\n        - kotlin/\n          - Kotlin compiled to LLVM bitcode.\n        - native/\n          - Bitcode files of additional native objects.\n      - $another_platform/\n        - There can be several platform specific kotlin and native pairs.\n    - linkdata/\n      - A set of ProtoBuf files with serialized linkage metadata.\n    - resources/\n      - General resources such as images. (Not used yet).\n    - manifest - A file in *java property* format describing the library.\n"}, {"type": "code", "text": "  - foo/\n    - targets/\n      - $platform/\n        - kotlin/\n          - Kotlin compiled to LLVM bitcode.\n        - native/\n          - Bitcode files of additional native objects.\n      - $another_platform/\n        - There can be several platform specific kotlin and native pairs.\n    - linkdata/\n      - A set of ProtoBuf files with serialized linkage metadata.\n    - resources/\n      - General resources such as images. (Not used yet).\n    - manifest - A file in *java property* format describing the library.\n"}, {"type": "p", "text": "An example layout can be found in klib/stdlib directory of your installation."}, {"type": "code", "text": "klib/stdlib"}]