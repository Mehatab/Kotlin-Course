[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Setting up a Kotlin/JS project"}, {"type": "p", "text": "Kotlin/JS projects use Gradle as a build system. To let developers easily manage their Kotlin/JS projects, we offer\nthe Kotlin/JS Gradle plugin that provides project configuration tools together with helper tasks for automating routines\ntypical for JavaScript development. For example, the plugin downloads the Yarn package manager\nfor managing npm dependencies in background and builds a JavaScript bundle from a Kotlin project\nusing webpack."}, {"type": "a", "text": "Yarn"}, {"type": "a", "text": "npm"}, {"type": "a", "text": "webpack"}, {"type": "p", "text": "To create a Kotlin/JS project in IntelliJ IDEA, go to File | New | Project and select Gradle | Kotlin/JS for browser\n or Kotlin/JS for Node.js. Be sure to clear the Java checkbox."}, {"type": "strong", "text": "File | New | Project"}, {"type": "strong", "text": "Gradle | Kotlin/JS for browser"}, {"type": "strong", "text": "Kotlin/JS for Node.js"}, {"type": "strong", "text": "Java"}, {"type": "p", "text": ""}, {"type": "img", "text": ""}, {"type": "p", "text": "Alternatively, you can apply the org.jetbrains.kotlin.js plugin to a Gradle project manually in the Gradle build file (build.gradle or build.gradle.kts).\nIf you use the Gradle Kotlin DSL, you can apply the plugin with kotlin(\u201cjs\u201d)."}, {"type": "code", "text": "org.jetbrains.kotlin.js"}, {"type": "code", "text": "build.gradle"}, {"type": "code", "text": "build.gradle.kts"}, {"type": "code", "text": "kotlin(\u201cjs\u201d)"}, {"type": "div", "text": "\n\nplugins {\n    id 'org.jetbrains.kotlin.js' version '1.3.72'\n}\n\n\n"}, {"type": "div", "text": "\nplugins {\n    id 'org.jetbrains.kotlin.js' version '1.3.72'\n}\n\n"}, {"type": "pre", "text": "plugins {\n    id 'org.jetbrains.kotlin.js' version '1.3.72'\n}\n"}, {"type": "code", "text": "plugins {\n    id 'org.jetbrains.kotlin.js' version '1.3.72'\n}\n"}, {"type": "div", "text": "\n\nplugins {\n     kotlin(\"js\") version \"1.3.72\"\n}\n\n\n"}, {"type": "div", "text": "\nplugins {\n     kotlin(\"js\") version \"1.3.72\"\n}\n\n"}, {"type": "pre", "text": "plugins {\n     kotlin(\"js\") version \"1.3.72\"\n}\n"}, {"type": "code", "text": "plugins {\n     kotlin(\"js\") version \"1.3.72\"\n}\n"}, {"type": "p", "text": "The Kotlin/JS plugin lets you manage aspects of your project in the kotlin section of the build script."}, {"type": "code", "text": "kotlin"}, {"type": "div", "text": "\nkotlin {\n    //...\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    //...\n}\n"}, {"type": "code", "text": "kotlin {\n    //...\n}\n"}, {"type": "p", "text": "Inside the kotlin section, you can manage the following aspects:"}, {"type": "code", "text": "kotlin"}, {"type": "ul", "text": "\nTarget execution environment: browser or Node.js\nProject dependencies: Maven and npm\nRun configuration\nTest configuration\nBundling for browser projects\nTarget directory\n"}, {"type": "li", "text": "Target execution environment: browser or Node.js"}, {"type": "a", "text": "Target execution environment"}, {"type": "li", "text": "Project dependencies: Maven and npm"}, {"type": "a", "text": "Project dependencies"}, {"type": "li", "text": "Run configuration"}, {"type": "a", "text": "Run configuration"}, {"type": "li", "text": "Test configuration"}, {"type": "a", "text": "Test configuration"}, {"type": "li", "text": "Bundling for browser projects"}, {"type": "a", "text": "Bundling"}, {"type": "li", "text": "Target directory"}, {"type": "a", "text": "Target directory"}, {"type": "h2", "text": "Choosing execution environment"}, {"type": "p", "text": "Kotlin/JS projects can target two different execution environments:"}, {"type": "ul", "text": "\nBrowser for client-side scripting in browsers\nNode.js for running JavaScript code outside of a browser, for example, for server-side scripting.\n"}, {"type": "li", "text": "Browser for client-side scripting in browsers"}, {"type": "li", "text": "Node.js for running JavaScript code outside of a browser, for example, for server-side scripting."}, {"type": "a", "text": "Node.js"}, {"type": "p", "text": "To define the target execution environment for a Kotlin/JS project, add the target section with browser {} or nodejs {} inside."}, {"type": "code", "text": "target"}, {"type": "code", "text": "browser {}"}, {"type": "code", "text": "nodejs {}"}, {"type": "div", "text": "\nkotlin {\n    target {\n        browser {\n        }       \n    }\n}    \n\n"}, {"type": "pre", "text": "kotlin {\n    target {\n        browser {\n        }       \n    }\n}    \n"}, {"type": "code", "text": "kotlin {\n    target {\n        browser {\n        }       \n    }\n}    \n"}, {"type": "p", "text": "Or just"}, {"type": "div", "text": "\nkotlin.target.browser {     \n}    \n\n"}, {"type": "pre", "text": "kotlin.target.browser {     \n}    \n"}, {"type": "code", "text": "kotlin.target.browser {     \n}    \n"}, {"type": "p", "text": "The Kotlin/JS plugin automatically configures its tasks for working with the selected environment.\nThis includes downloading and installing dependencies required for running and testing the application, and therefore\nlets developers  build, run, and test simple projects without additional configuration."}, {"type": "h2", "text": "Managing dependencies"}, {"type": "p", "text": "Like any other Gradle projects, Kotlin/JS projects support traditional Gradle dependency declarations\nin the dependencies section of the build script."}, {"type": "a", "text": "dependency declarations"}, {"type": "code", "text": "dependencies"}, {"type": "div", "text": "\n\ndependencies {\n    implementation 'org.example.myproject:1.1.0'\n}\n\n\n"}, {"type": "div", "text": "\ndependencies {\n    implementation 'org.example.myproject:1.1.0'\n}\n\n"}, {"type": "pre", "text": "dependencies {\n    implementation 'org.example.myproject:1.1.0'\n}\n"}, {"type": "code", "text": "dependencies {\n    implementation 'org.example.myproject:1.1.0'\n}\n"}, {"type": "div", "text": "\n\ndependencies {\n    implementation(\"org.example.myproject\", \"1.1.0\")\n}\n\n\n"}, {"type": "div", "text": "\ndependencies {\n    implementation(\"org.example.myproject\", \"1.1.0\")\n}\n\n"}, {"type": "pre", "text": "dependencies {\n    implementation(\"org.example.myproject\", \"1.1.0\")\n}\n"}, {"type": "code", "text": "dependencies {\n    implementation(\"org.example.myproject\", \"1.1.0\")\n}\n"}, {"type": "p", "text": "The Kotlin/JS Gradle plugin also supports dependency declarations for particular source sets in the kotlin section \nof the build script."}, {"type": "code", "text": "kotlin"}, {"type": "div", "text": "\n\nkotlin {\n    sourceSets {\n        main {\n            dependencies {\n                implementation 'org.example.myproject:1.1.0'\n            }\n        }\n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin {\n    sourceSets {\n        main {\n            dependencies {\n                implementation 'org.example.myproject:1.1.0'\n            }\n        }\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n    sourceSets {\n        main {\n            dependencies {\n                implementation 'org.example.myproject:1.1.0'\n            }\n        }\n    }\n}\n"}, {"type": "code", "text": "kotlin {\n    sourceSets {\n        main {\n            dependencies {\n                implementation 'org.example.myproject:1.1.0'\n            }\n        }\n    }\n}\n"}, {"type": "div", "text": "\n\nkotlin {\n  sourceSets[\"main\"].dependencies {\n    implementation(\"org.example.myproject\", \"1.1.0\")\n  }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin {\n  sourceSets[\"main\"].dependencies {\n    implementation(\"org.example.myproject\", \"1.1.0\")\n  }\n}\n\n"}, {"type": "pre", "text": "kotlin {\n  sourceSets[\"main\"].dependencies {\n    implementation(\"org.example.myproject\", \"1.1.0\")\n  }\n}\n"}, {"type": "code", "text": "kotlin {\n  sourceSets[\"main\"].dependencies {\n    implementation(\"org.example.myproject\", \"1.1.0\")\n  }\n}\n"}, {"type": "h3", "text": "Kotlin standard libraries"}, {"type": "p", "text": "The dependency on the Kotlin/JS standard library is mandatory\nfor all Kotlin/JS projects. If your project contains tests written in Kotlin, you should also add the dependency on the\nkotlin.test library."}, {"type": "a", "text": "standard library"}, {"type": "a", "text": "kotlin.test"}, {"type": "div", "text": "\n\ndependencies {\n    implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'\n    testImplementation 'org.jetbrains.kotlin:kotlin-test-js'\n}\n\n\n"}, {"type": "div", "text": "\ndependencies {\n    implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'\n    testImplementation 'org.jetbrains.kotlin:kotlin-test-js'\n}\n\n"}, {"type": "pre", "text": "dependencies {\n    implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'\n    testImplementation 'org.jetbrains.kotlin:kotlin-test-js'\n}\n"}, {"type": "code", "text": "dependencies {\n    implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'\n    testImplementation 'org.jetbrains.kotlin:kotlin-test-js'\n}\n"}, {"type": "div", "text": "\n\ndependencies {\n    implementation(kotlin(\"stdlib-js\"))\n    testImplementation(kotlin(\"test-js\"))\n}\n\n\n"}, {"type": "div", "text": "\ndependencies {\n    implementation(kotlin(\"stdlib-js\"))\n    testImplementation(kotlin(\"test-js\"))\n}\n\n"}, {"type": "pre", "text": "dependencies {\n    implementation(kotlin(\"stdlib-js\"))\n    testImplementation(kotlin(\"test-js\"))\n}\n"}, {"type": "code", "text": "dependencies {\n    implementation(kotlin(\"stdlib-js\"))\n    testImplementation(kotlin(\"test-js\"))\n}\n"}, {"type": "h3", "text": "npm dependencies"}, {"type": "p", "text": "In the JavaScript world, the common way to manage dependencies is npm.\nIt offers the biggest public repository of JavaScript modules and a tool for downloading them."}, {"type": "a", "text": "npm"}, {"type": "a", "text": "repository"}, {"type": "p", "text": "The Kotlin/JS plugin lets you declare npm dependencies in the Gradle build script among other dependencies and\ndoes everything else automatically. It installs the Yarn package manager\nand uses it to download the dependencies from the npm repository to the node_modules directory of your project -\nthe common location for npm dependencies of a JavaScript project."}, {"type": "a", "text": "Yarn"}, {"type": "code", "text": "node_modules"}, {"type": "p", "text": "To declare an npm dependency, pass its name and version to the npm() function inside a dependency declaration."}, {"type": "code", "text": "npm()"}, {"type": "div", "text": "\n\ndependencies {\n    implementation npm('react', '16.12.0')\n}\n\n\n"}, {"type": "div", "text": "\ndependencies {\n    implementation npm('react', '16.12.0')\n}\n\n"}, {"type": "pre", "text": "dependencies {\n    implementation npm('react', '16.12.0')\n}\n"}, {"type": "code", "text": "dependencies {\n    implementation npm('react', '16.12.0')\n}\n"}, {"type": "div", "text": "\n\ndependencies {\n    implementation(npm(\"react\", \"16.12.0\"))\n}\n\n\n"}, {"type": "div", "text": "\ndependencies {\n    implementation(npm(\"react\", \"16.12.0\"))\n}\n\n"}, {"type": "pre", "text": "dependencies {\n    implementation(npm(\"react\", \"16.12.0\"))\n}\n"}, {"type": "code", "text": "dependencies {\n    implementation(npm(\"react\", \"16.12.0\"))\n}\n"}, {"type": "p", "text": "Once an npm dependency is installed, you can use its API in your code as described in \nCalling JS from Kotlin."}, {"type": "a", "text": "Calling JS from Kotlin"}, {"type": "h2", "text": "Configuring run task"}, {"type": "p", "text": "The Kotlin/JS plugin provides a run task that lets you run projects without additional configuration.\nFor running Kotlin/JS projects, it uses webpack DevServer.\nIf you want to customize the DevServer configuration, for example, change its port, use the webpack configuration file."}, {"type": "a", "text": "webpack DevServer"}, {"type": "p", "text": "To run the project, execute the standard lifecycle run task:"}, {"type": "code", "text": "run"}, {"type": "div", "text": "\n./gradlew run\n\n"}, {"type": "pre", "text": "./gradlew run\n"}, {"type": "code", "text": "./gradlew run\n"}, {"type": "p", "text": "To see the source file changes in browser without restarting the DevServer, use \nthe Gradle continuous build:"}, {"type": "a", "text": "continuous build"}, {"type": "div", "text": "\n./gradlew run --continuous\n\n"}, {"type": "pre", "text": "./gradlew run --continuous\n"}, {"type": "code", "text": "./gradlew run --continuous\n"}, {"type": "p", "text": "or"}, {"type": "div", "text": "\n./gradlew run -t\n\n"}, {"type": "pre", "text": "./gradlew run -t\n"}, {"type": "code", "text": "./gradlew run -t\n"}, {"type": "h2", "text": "Configuring test task"}, {"type": "p", "text": "The Kotin/JS Gradle plugin automatically sets up a test infrastructure for projects. For browser projects, it downloads\nand installs the Karma test runner with other required dependencies;\nfor NodeJS projects, the Mocha test framework is used."}, {"type": "a", "text": "Karma"}, {"type": "a", "text": "Mocha"}, {"type": "p", "text": "The plugin also provides useful testing features, for example:"}, {"type": "ul", "text": "\nSource maps generation\nTest reports generation\nTest run results in the console\n"}, {"type": "li", "text": "Source maps generation"}, {"type": "li", "text": "Test reports generation"}, {"type": "li", "text": "Test run results in the console"}, {"type": "p", "text": "By default, the plugin uses Headless Chrome\nfor running browser tests. You can also run them in other browsers by adding the corresponding entries inside the\nuseKarma section of the build script:"}, {"type": "a", "text": "Headless Chrome"}, {"type": "code", "text": "useKarma"}, {"type": "div", "text": "\nkotlin.target.browser {\n    testTask {\n        useKarma {\n            useIe()\n            useSafari()\n            useFirefox()\n            useChrome()\n            useChromeCanary()\n            useChromeHeadless()\n            usePhantomJS()\n            useOpera()\n        }\n    }       \n}\n\n"}, {"type": "pre", "text": "kotlin.target.browser {\n    testTask {\n        useKarma {\n            useIe()\n            useSafari()\n            useFirefox()\n            useChrome()\n            useChromeCanary()\n            useChromeHeadless()\n            usePhantomJS()\n            useOpera()\n        }\n    }       \n}\n"}, {"type": "code", "text": "kotlin.target.browser {\n    testTask {\n        useKarma {\n            useIe()\n            useSafari()\n            useFirefox()\n            useChrome()\n            useChromeCanary()\n            useChromeHeadless()\n            usePhantomJS()\n            useOpera()\n        }\n    }       \n}\n"}, {"type": "p", "text": "If you want to skip tests, add the line enabled = false to the testTask."}, {"type": "code", "text": "enabled = false"}, {"type": "code", "text": "testTask"}, {"type": "div", "text": "\nkotlin.target.browser {\n    testTask {\n        enabled = false\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin.target.browser {\n    testTask {\n        enabled = false\n    }\n}\n"}, {"type": "code", "text": "kotlin.target.browser {\n    testTask {\n        enabled = false\n    }\n}\n"}, {"type": "p", "text": "To run tests, execute the standard lifecycle check task:"}, {"type": "code", "text": "check"}, {"type": "div", "text": "\n./gradlew check\n\n"}, {"type": "pre", "text": "./gradlew check\n"}, {"type": "code", "text": "./gradlew check\n"}, {"type": "h2", "text": "Configuring webpack bundling"}, {"type": "p", "text": "For browser targets, the Kotlin/JS plugin uses the widely known webpack module bundler."}, {"type": "a", "text": "webpack"}, {"type": "p", "text": "The Kotlin/JS Gradle plugin automatically generates a standard webpack configuration file \nat build time which you can find the at build/js/packages/projectName/webpack.config.js."}, {"type": "code", "text": "build/js/packages/projectName/webpack.config.js"}, {"type": "p", "text": "The most common webpack adjustments can be made directly via the\nkotlin.target.browser.webpackTask configuration block in the Gradle build file."}, {"type": "code", "text": "kotlin.target.browser.webpackTask"}, {"type": "p", "text": "If you want to make further adjustments to the webpack configuration, place your additional configuration files inside a directory\ncalled webpack.config.d in the root of your project. When building your project, all JS configuration files will automatically\nbe merged into the build/js/packages/projectName/webpack.config.js file.\nTo add a new webpack loader, for example, add the following to\na .js file inside the webpack.config.d:"}, {"type": "code", "text": "webpack.config.d"}, {"type": "code", "text": "build/js/packages/projectName/webpack.config.js"}, {"type": "a", "text": "webpack loader"}, {"type": "code", "text": ".js"}, {"type": "code", "text": "webpack.config.d"}, {"type": "div", "text": "\nconfig.module.rules.push({\n    test: /\\.extension$/,\n    loader: 'loader-name'\n});\n\n"}, {"type": "pre", "text": "config.module.rules.push({\n    test: /\\.extension$/,\n    loader: 'loader-name'\n});\n"}, {"type": "code", "text": "config.module.rules.push({\n    test: /\\.extension$/,\n    loader: 'loader-name'\n});\n"}, {"type": "p", "text": "All webpack configuration\ncapabilities are well described in its documentation."}, {"type": "a", "text": "documentation"}, {"type": "p", "text": "For building executable JavaScript artifacts though webpack, the Kotlin/JS plugin contains the browserDevelopmentWebpack\nbrowserProductionWebpack Gradle tasks. Execute them to obtain artifacts for development or production respectively:"}, {"type": "code", "text": "browserDevelopmentWebpack"}, {"type": "code", "text": "browserProductionWebpack"}, {"type": "div", "text": "\n./gradlew browserProductionWebpack\n\n"}, {"type": "pre", "text": "./gradlew browserProductionWebpack\n"}, {"type": "code", "text": "./gradlew browserProductionWebpack\n"}, {"type": "h2", "text": "Configuring Yarn"}, {"type": "p", "text": "To configure additional Yarn features, place a .yarnrc file in the root of your project.\nAt build time, it gets picked up automatically."}, {"type": "code", "text": ".yarnrc"}, {"type": "p", "text": "For example, to use a custom registry for npm packages, add the following line to a file called\n.yarnrc in the project root:"}, {"type": "code", "text": ".yarnrc"}, {"type": "div", "text": "\nregistry \"http://my.registry/api/npm/\"\n\n"}, {"type": "pre", "text": "registry \"http://my.registry/api/npm/\"\n"}, {"type": "code", "text": "registry \"http://my.registry/api/npm/\"\n"}, {"type": "p", "text": "To learn more about .yarnrc, please visit the official Yarn documentation."}, {"type": "code", "text": ".yarnrc"}, {"type": "a", "text": "official Yarn documentation"}, {"type": "h2", "text": "Distribution target directory"}, {"type": "p", "text": "By default, the results of a Kotlin/JS project build reside in the /build/distribution directory within the project root."}, {"type": "code", "text": "/build/distribution"}, {"type": "p", "text": "To set another location for project distribution files, add the distribution block inside browser in the build script and \nassign a value to the directory property.\nOnce you run a project build task, Gradle will save the output bundle in this location together\nwith project resources."}, {"type": "code", "text": "distribution"}, {"type": "code", "text": "browser"}, {"type": "code", "text": "directory"}, {"type": "div", "text": "\n\nkotlin.target.browser {\n    distribution {\n        directory = file(\"$projectDir/output/\")\n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin.target.browser {\n    distribution {\n        directory = file(\"$projectDir/output/\")\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin.target.browser {\n    distribution {\n        directory = file(\"$projectDir/output/\")\n    }\n}\n"}, {"type": "code", "text": "kotlin.target.browser {\n    distribution {\n        directory = file(\"$projectDir/output/\")\n    }\n}\n"}, {"type": "div", "text": "\n\nkotlin.target.browser {\n    distribution {\n        directory = File(\"$projectDir/output/\")\n    }\n}\n\n\n"}, {"type": "div", "text": "\nkotlin.target.browser {\n    distribution {\n        directory = File(\"$projectDir/output/\")\n    }\n}\n\n"}, {"type": "pre", "text": "kotlin.target.browser {\n    distribution {\n        directory = File(\"$projectDir/output/\")\n    }\n}\n"}, {"type": "code", "text": "kotlin.target.browser {\n    distribution {\n        directory = File(\"$projectDir/output/\")\n    }\n}\n"}]