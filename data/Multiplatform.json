[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Multiplatform Programming"}, {"type": "blockquote", "text": "\nMultiplatform projects are an experimental feature in Kotlin 1.2 and 1.3. All of the language\nand tooling features described in this document are subject to change in future Kotlin versions.\n"}, {"type": "p", "text": "Multiplatform projects are an experimental feature in Kotlin 1.2 and 1.3. All of the language\nand tooling features described in this document are subject to change in future Kotlin versions."}, {"type": "p", "text": "Working on all platforms is an explicit goal for Kotlin, but we see it as a premise to a much more important \ngoal: sharing code between platforms. With support for JVM, Android, JavaScript, iOS, Linux, Windows, \nMac and even embedded systems like STM32, Kotlin can handle any and all components of a modern application. \nAnd this brings the invaluable benefit of reuse for code and expertise, saving the effort for tasks more \nchallenging than implementing everything twice or multiple times."}, {"type": "h2", "text": "How it works"}, {"type": "p", "text": "Overall, multiplatform is not about compiling all code for all platforms. This model has its obvious \nlimitations, and we understand that modern applications need access to unique features of the platforms \nthey are running on. Kotlin doesn't limit you to the common subset of all APIs in the world. \nEvery component can share as much code as needed with others but can access platform APIs at any time \nthrough the expect/actual mechanism provided by the language."}, {"type": "a", "text": "expect/actual mechanism"}, {"type": "code", "text": "expect"}, {"type": "code", "text": "actual"}, {"type": "p", "text": "Here's an example of code sharing and interaction between the common and platform logic in a minimalistic \nlogging framework. The common code would look like this:"}, {"type": "div", "text": "\n\nenum class LogLevel {\n    DEBUG, WARN, ERROR\n}\n\ninternal expect fun writeLogMessage(message: String, logLevel: LogLevel)\n\nfun logDebug(message: String) = writeLogMessage(message, LogLevel.DEBUG)\nfun logWarn(message: String) = writeLogMessage(message, LogLevel.WARN)\nfun logError(message: String) = writeLogMessage(message, LogLevel.ERROR)\n\n\n\n\u251ccompiled for all platforms\n\u251cexpected platform-specific API\n\u251cexpected API can be used in the common code\n\n"}, {"type": "div", "text": "\nenum class LogLevel {\n    DEBUG, WARN, ERROR\n}\n\ninternal expect fun writeLogMessage(message: String, logLevel: LogLevel)\n\nfun logDebug(message: String) = writeLogMessage(message, LogLevel.DEBUG)\nfun logWarn(message: String) = writeLogMessage(message, LogLevel.WARN)\nfun logError(message: String) = writeLogMessage(message, LogLevel.ERROR)\n\n"}, {"type": "pre", "text": "enum class LogLevel {\n    DEBUG, WARN, ERROR\n}\n\ninternal expect fun writeLogMessage(message: String, logLevel: LogLevel)\n\nfun logDebug(message: String) = writeLogMessage(message, LogLevel.DEBUG)\nfun logWarn(message: String) = writeLogMessage(message, LogLevel.WARN)\nfun logError(message: String) = writeLogMessage(message, LogLevel.ERROR)\n"}, {"type": "code", "text": "enum class LogLevel {\n    DEBUG, WARN, ERROR\n}\n\ninternal expect fun writeLogMessage(message: String, logLevel: LogLevel)\n\nfun logDebug(message: String) = writeLogMessage(message, LogLevel.DEBUG)\nfun logWarn(message: String) = writeLogMessage(message, LogLevel.WARN)\nfun logError(message: String) = writeLogMessage(message, LogLevel.ERROR)\n"}, {"type": "div", "text": "\n\u251ccompiled for all platforms\n\u251cexpected platform-specific API\n\u251cexpected API can be used in the common code\n"}, {"type": "div", "text": "\u251ccompiled for all platforms"}, {"type": "i", "text": "compiled for all platforms"}, {"type": "div", "text": "\u251cexpected platform-specific API"}, {"type": "i", "text": "expected platform-specific API"}, {"type": "div", "text": "\u251cexpected API can be used in the common code"}, {"type": "i", "text": "expected API can be used in the common code"}, {"type": "p", "text": "It expects the targets to provide platform-specific implementations for writeLogMessage, and the common code can \nnow use this declaration without any consideration of how it is implemented."}, {"type": "code", "text": "writeLogMessage"}, {"type": "p", "text": "On the JVM, one could provide an implementation that writes the log to the standard output:"}, {"type": "div", "text": "\ninternal actual fun writeLogMessage(message: String, logLevel: LogLevel) {\n    println(\"[$logLevel]: $message\")\n}\n\n"}, {"type": "pre", "text": "internal actual fun writeLogMessage(message: String, logLevel: LogLevel) {\n    println(\"[$logLevel]: $message\")\n}\n"}, {"type": "code", "text": "internal actual fun writeLogMessage(message: String, logLevel: LogLevel) {\n    println(\"[$logLevel]: $message\")\n}\n"}, {"type": "p", "text": "In the JavaScript world, a completely different set of APIs is availiable, \nso one could instead implement logging to the console:"}, {"type": "div", "text": "\ninternal actual fun writeLogMessage(message: String, logLevel: LogLevel) {\n    when (logLevel) {\n        LogLevel.DEBUG -> console.log(message)\n        LogLevel.WARN -> console.warn(message)\n        LogLevel.ERROR -> console.error(message)\n    }\n}\n\n"}, {"type": "pre", "text": "internal actual fun writeLogMessage(message: String, logLevel: LogLevel) {\n    when (logLevel) {\n        LogLevel.DEBUG -> console.log(message)\n        LogLevel.WARN -> console.warn(message)\n        LogLevel.ERROR -> console.error(message)\n    }\n}\n"}, {"type": "code", "text": "internal actual fun writeLogMessage(message: String, logLevel: LogLevel) {\n    when (logLevel) {\n        LogLevel.DEBUG -> console.log(message)\n        LogLevel.WARN -> console.warn(message)\n        LogLevel.ERROR -> console.error(message)\n    }\n}\n"}, {"type": "p", "text": "In 1.3 we reworked the entire multiplatform model. The new DSL we have for describing multiplatform Gradle \nprojects is much more flexible, and we'll keep working on it to make project configuration straightforward."}, {"type": "a", "text": "new DSL"}, {"type": "h2", "text": "Multiplatform Libraries"}, {"type": "p", "text": "Common code can rely on a set of libraries that cover everyday tasks such as HTTP, serialization, and managing \ncoroutines. Also, an extensive standard library is available on all platforms."}, {"type": "a", "text": "HTTP"}, {"type": "a", "text": "serialization"}, {"type": "a", "text": "managing \ncoroutines"}, {"type": "p", "text": "You can always write your \nown library providing a common API and implementing it differently on every platform."}, {"type": "h2", "text": "Use cases"}, {"type": "h3", "text": "Android \u2014 iOS"}, {"type": "p", "text": "Sharing code between mobile platforms is one of the major Kotlin Multiplatform use cases, and it is now \npossible to build mobile applications with parts of the code, such as business logic, connectivity, \nand more, shared between Android and iOS."}, {"type": "p", "text": "See:"}, {"type": "ul", "text": "\nMobile Multiplatform features, case studies and examples\nSetting up a Mobile Multiplatform Project\n"}, {"type": "li", "text": "Mobile Multiplatform features, case studies and examples"}, {"type": "a", "text": "Mobile Multiplatform features, case studies and examples"}, {"type": "li", "text": "Setting up a Mobile Multiplatform Project"}, {"type": "a", "text": "Setting up a Mobile Multiplatform Project"}, {"type": "h3", "text": "Client \u2014 Server"}, {"type": "p", "text": "Another scenario when code sharing may bring benefits is a connected application where the logic may be \nreused on both the server and the client side running in the browser. This is covered by Kotlin \nMultiplatform as well."}, {"type": "p", "text": "The Ktor framework is suitable for building asynchronous servers and clients in connected systems."}, {"type": "a", "text": "Ktor framework"}, {"type": "h2", "text": "How to start"}, {"type": "div", "text": "\n\nTutorials and Documentation\n"}, {"type": "img", "text": ""}, {"type": "b", "text": "Tutorials and Documentation"}, {"type": "p", "text": "New to Kotlin? Take a look at the Getting Started page."}, {"type": "a", "text": "Getting Started"}, {"type": "p", "text": "Suggested documentation pages:"}, {"type": "ul", "text": "\nSetting up a Multiplatform Project\nPlatform-Specific Declarations\n"}, {"type": "li", "text": "Setting up a Multiplatform Project"}, {"type": "a", "text": "Setting up a Multiplatform Project"}, {"type": "li", "text": "Platform-Specific Declarations"}, {"type": "a", "text": "Platform-Specific Declarations"}, {"type": "p", "text": "Recommended tutorials:"}, {"type": "ul", "text": "\nMultiplatform Kotlin Library\nMultiplatform Project: iOS and Android\n"}, {"type": "li", "text": "Multiplatform Kotlin Library"}, {"type": "a", "text": "Multiplatform Kotlin Library"}, {"type": "li", "text": "Multiplatform Project: iOS and Android"}, {"type": "a", "text": "Multiplatform Project: iOS and Android"}, {"type": "div", "text": "\n\nExample Projects\n"}, {"type": "img", "text": ""}, {"type": "b", "text": "Example Projects"}, {"type": "ul", "text": "\nKotlinConf app\nKotlinConf Spinner app\n"}, {"type": "li", "text": "KotlinConf app"}, {"type": "a", "text": "KotlinConf app"}, {"type": "li", "text": "KotlinConf Spinner app"}, {"type": "a", "text": "KotlinConf Spinner app"}, {"type": "p", "text": "Even more examples are on GitHub"}, {"type": "a", "text": "GitHub"}]