[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Retrieving Single Elements"}, {"type": "p", "text": "Kotlin collections provide a set of functions for retrieving single elements from collections.\nFunctions described on this page apply to both lists and sets."}, {"type": "p", "text": "As the definition of list says, a list is an ordered collection.\nHence, every element of a list has its position that you can use for referring.\nIn addition to functions described on this page, lists offer a wider set of ways to retrieve and search for elements by indices.\nFor more details, see List Specific Operations."}, {"type": "a", "text": "definition of list"}, {"type": "a", "text": "List Specific Operations"}, {"type": "p", "text": "In turn, set is not an ordered collection by definition.\nHowever, the Kotlin Set stores elements in certain orders.\nThese can be the order of insertion (in LinkedHashSet), natural sorting order (in SortedSet), or another order.\nThe order of a set of elements can also be unknown.\nIn such cases, the elements are still ordered somehow, so the functions that rely on the element positions still return their results.\nHowever, such results are unpredictable to the caller unless they know the specific implementation of Set used."}, {"type": "a", "text": "definition"}, {"type": "code", "text": "Set"}, {"type": "code", "text": "LinkedHashSet"}, {"type": "code", "text": "SortedSet"}, {"type": "code", "text": "Set"}, {"type": "h2", "text": "Retrieving by position"}, {"type": "p", "text": "For retrieving an element at a specific position, there is the function elementAt().\n Call it with the integer number as an argument, and you'll receive the collection element at the given position.\n The first element has the position 0, and the last one is (size - 1)."}, {"type": "a", "text": "elementAt()"}, {"type": "code", "text": "elementAt()"}, {"type": "code", "text": "0"}, {"type": "code", "text": "(size - 1)"}, {"type": "p", "text": "elementAt() is useful for collections that do not provide indexed access, or are not statically known to provide one.\n  In case of List, it's more idiomatic to use indexed access operator (get() or [])."}, {"type": "code", "text": "elementAt()"}, {"type": "code", "text": "List"}, {"type": "a", "text": "indexed access operator"}, {"type": "code", "text": "get()"}, {"type": "code", "text": "[]"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = linkedSetOf(\"one\", \"two\", \"three\", \"four\", \"five\")\n    println(numbers.elementAt(3))    \n\n    val numbersSortedSet = sortedSetOf(\"one\", \"two\", \"three\", \"four\")\n    println(numbersSortedSet.elementAt(0)) // elements are stored in the ascending order\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = linkedSetOf(\"one\", \"two\", \"three\", \"four\", \"five\")\n    println(numbers.elementAt(3))    \n\n    val numbersSortedSet = sortedSetOf(\"one\", \"two\", \"three\", \"four\")\n    println(numbersSortedSet.elementAt(0)) // elements are stored in the ascending order\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = linkedSetOf(\"one\", \"two\", \"three\", \"four\", \"five\")\n    println(numbers.elementAt(3))    \n\n    val numbersSortedSet = sortedSetOf(\"one\", \"two\", \"three\", \"four\")\n    println(numbersSortedSet.elementAt(0)) // elements are stored in the ascending order\n//sampleEnd\n}\n"}, {"type": "p", "text": "There are also useful aliases for retrieving the first and the last element of the collection: first() and last()."}, {"type": "a", "text": "first()"}, {"type": "code", "text": "first()"}, {"type": "a", "text": "last()"}, {"type": "code", "text": "last()"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\")\n    println(numbers.first())    \n    println(numbers.last())    \n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\")\n    println(numbers.first())    \n    println(numbers.last())    \n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\")\n    println(numbers.first())    \n    println(numbers.last())    \n//sampleEnd\n}\n"}, {"type": "p", "text": "To avoid exceptions when retrieving element with non-existing positions, use safe variations of elementAt():"}, {"type": "code", "text": "elementAt()"}, {"type": "ul", "text": "\nelementAtOrNull() returns null when the specified position is out of the collection bounds.\nelementAtOrElse() additionally takes a lambda function that maps an Int argument to an instance of the collection element type.\n When called with an out-of-bounds position, the elementAtOrElse() returns the result of the lambda on the given value.\n"}, {"type": "li", "text": "elementAtOrNull() returns null when the specified position is out of the collection bounds."}, {"type": "a", "text": "elementAtOrNull()"}, {"type": "code", "text": "elementAtOrNull()"}, {"type": "li", "text": "elementAtOrElse() additionally takes a lambda function that maps an Int argument to an instance of the collection element type.\n When called with an out-of-bounds position, the elementAtOrElse() returns the result of the lambda on the given value."}, {"type": "a", "text": "elementAtOrElse()"}, {"type": "code", "text": "elementAtOrElse()"}, {"type": "code", "text": "Int"}, {"type": "code", "text": "elementAtOrElse()"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\")\n    println(numbers.elementAtOrNull(5))\n    println(numbers.elementAtOrElse(5) { index -> \"The value for index $index is undefined\"})\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\")\n    println(numbers.elementAtOrNull(5))\n    println(numbers.elementAtOrElse(5) { index -> \"The value for index $index is undefined\"})\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\")\n    println(numbers.elementAtOrNull(5))\n    println(numbers.elementAtOrElse(5) { index -> \"The value for index $index is undefined\"})\n//sampleEnd\n}\n"}, {"type": "h2", "text": "Retrieving by condition"}, {"type": "p", "text": "Functions first() and last() also let you search a collection for elements matching a given predicate.\nWhen you call first() with a predicate that tests a collection element, you'll receive the first element on which the predicate yields true.\nIn turn, last() with a predicate returns the last element matching it."}, {"type": "a", "text": "first()"}, {"type": "code", "text": "first()"}, {"type": "a", "text": "last()"}, {"type": "code", "text": "last()"}, {"type": "code", "text": "first()"}, {"type": "code", "text": "true"}, {"type": "code", "text": "last()"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\n    println(numbers.first { it.length > 3 })\n    println(numbers.last { it.startsWith(\"f\") })\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\n    println(numbers.first { it.length > 3 })\n    println(numbers.last { it.startsWith(\"f\") })\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\n    println(numbers.first { it.length > 3 })\n    println(numbers.last { it.startsWith(\"f\") })\n//sampleEnd\n}\n"}, {"type": "p", "text": "If no elements match the predicate, both functions throw exceptions.\nTo avoid them, use firstOrNull() and lastOrNull() instead: they return null if no matching elements are found."}, {"type": "a", "text": "firstOrNull()"}, {"type": "code", "text": "firstOrNull()"}, {"type": "a", "text": "lastOrNull()"}, {"type": "code", "text": "lastOrNull()"}, {"type": "code", "text": "null"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\n    println(numbers.firstOrNull { it.length > 6 })\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\n    println(numbers.firstOrNull { it.length > 6 })\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\n    println(numbers.firstOrNull { it.length > 6 })\n//sampleEnd\n}\n"}, {"type": "p", "text": "Alternatively, you can use the aliases if their names suit your situation better:"}, {"type": "ul", "text": "\nfind() instead of firstOrNull()\nfindLast() instead of lastOrNull()\n"}, {"type": "li", "text": "find() instead of firstOrNull()"}, {"type": "a", "text": "find()"}, {"type": "code", "text": "find()"}, {"type": "code", "text": "firstOrNull()"}, {"type": "li", "text": "findLast() instead of lastOrNull()"}, {"type": "a", "text": "findLast()"}, {"type": "code", "text": "findLast()"}, {"type": "code", "text": "lastOrNull()"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = listOf(1, 2, 3, 4)\n    println(numbers.find { it % 2 == 0 })\n    println(numbers.findLast { it % 2 == 0 })\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(1, 2, 3, 4)\n    println(numbers.find { it % 2 == 0 })\n    println(numbers.findLast { it % 2 == 0 })\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(1, 2, 3, 4)\n    println(numbers.find { it % 2 == 0 })\n    println(numbers.findLast { it % 2 == 0 })\n//sampleEnd\n}\n"}, {"type": "h2", "text": "Random element"}, {"type": "p", "text": "If you need to retrieve an arbitrary element of a collection, call the random() function.\nYou can call it without arguments or with a Random object as a source of the randomness."}, {"type": "a", "text": "random()"}, {"type": "code", "text": "random()"}, {"type": "a", "text": "Random"}, {"type": "code", "text": "Random"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = listOf(1, 2, 3, 4)\n    println(numbers.random())\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(1, 2, 3, 4)\n    println(numbers.random())\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(1, 2, 3, 4)\n    println(numbers.random())\n//sampleEnd\n}\n"}, {"type": "h2", "text": "Checking existence"}, {"type": "p", "text": "To check the presence of an element in a collection, use the contains() function.\nIt returns true if there is a collection element that equals() the function argument.\nYou can call contains() in the operator form with the in keyword."}, {"type": "a", "text": "contains()"}, {"type": "code", "text": "contains()"}, {"type": "code", "text": "true"}, {"type": "code", "text": "equals()"}, {"type": "code", "text": "contains()"}, {"type": "code", "text": "in"}, {"type": "p", "text": "To check the presence of multiple instances together at once, call containsAll() with a collection of these instances as an argument."}, {"type": "a", "text": "containsAll()"}, {"type": "code", "text": "containsAll()"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\n    println(numbers.contains(\"four\"))\n    println(\"zero\" in numbers)\n    \n    println(numbers.containsAll(listOf(\"four\", \"two\")))\n    println(numbers.containsAll(listOf(\"one\", \"zero\")))\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\n    println(numbers.contains(\"four\"))\n    println(\"zero\" in numbers)\n    \n    println(numbers.containsAll(listOf(\"four\", \"two\")))\n    println(numbers.containsAll(listOf(\"one\", \"zero\")))\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\n    println(numbers.contains(\"four\"))\n    println(\"zero\" in numbers)\n    \n    println(numbers.containsAll(listOf(\"four\", \"two\")))\n    println(numbers.containsAll(listOf(\"one\", \"zero\")))\n//sampleEnd\n}\n"}, {"type": "p", "text": "Additionally, you can check if the collection contains any elements by calling isEmpty() or isNotEmpty()."}, {"type": "a", "text": "isEmpty()"}, {"type": "code", "text": "isEmpty()"}, {"type": "a", "text": "isNotEmpty()"}, {"type": "code", "text": "isNotEmpty()"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\n    println(numbers.isEmpty())\n    println(numbers.isNotEmpty())\n    \n    val empty = emptyList<String>()\n    println(empty.isEmpty())\n    println(empty.isNotEmpty())\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\n    println(numbers.isEmpty())\n    println(numbers.isNotEmpty())\n    \n    val empty = emptyList<String>()\n    println(empty.isEmpty())\n    println(empty.isNotEmpty())\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = listOf(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\n    println(numbers.isEmpty())\n    println(numbers.isNotEmpty())\n    \n    val empty = emptyList<String>()\n    println(empty.isEmpty())\n    println(empty.isNotEmpty())\n//sampleEnd\n}\n"}]