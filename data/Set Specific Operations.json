[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h1", "text": "Set Specific Operations"}, {"type": "p", "text": "The Kotlin collections package contains extension functions for popular operations on sets: finding intersections, merging, or subtracting collections from each other."}, {"type": "p", "text": "To merge two collections into one, use the union() function. It can be used in the infix form a union b.\nNote that for ordered collections the order of the operands is important: in the resulting collection, the elements of the first operand go before the elements of the second."}, {"type": "a", "text": "union()"}, {"type": "code", "text": "union()"}, {"type": "code", "text": "a union b"}, {"type": "p", "text": "To find an intersection between two collections (elements present in both of them), use intersect().\nTo find collection elements not present in another collection, use subtract(). \nBoth these functions can be called in the infix form as well, for example, a intersect b."}, {"type": "a", "text": "intersect()"}, {"type": "code", "text": "intersect()"}, {"type": "a", "text": "subtract()"}, {"type": "code", "text": "subtract()"}, {"type": "code", "text": "a intersect b"}, {"type": "div", "text": "\nfun main() {\n//sampleStart\n    val numbers = setOf(\"one\", \"two\", \"three\")\n\n    println(numbers union setOf(\"four\", \"five\"))\n    println(setOf(\"four\", \"five\") union numbers)\n\n    println(numbers intersect setOf(\"two\", \"one\"))\n    println(numbers subtract setOf(\"three\", \"four\"))\n    println(numbers subtract setOf(\"four\", \"three\")) // same output\n//sampleEnd\n}\n\n"}, {"type": "pre", "text": "fun main() {\n//sampleStart\n    val numbers = setOf(\"one\", \"two\", \"three\")\n\n    println(numbers union setOf(\"four\", \"five\"))\n    println(setOf(\"four\", \"five\") union numbers)\n\n    println(numbers intersect setOf(\"two\", \"one\"))\n    println(numbers subtract setOf(\"three\", \"four\"))\n    println(numbers subtract setOf(\"four\", \"three\")) // same output\n//sampleEnd\n}\n"}, {"type": "code", "text": "fun main() {\n//sampleStart\n    val numbers = setOf(\"one\", \"two\", \"three\")\n\n    println(numbers union setOf(\"four\", \"five\"))\n    println(setOf(\"four\", \"five\") union numbers)\n\n    println(numbers intersect setOf(\"two\", \"one\"))\n    println(numbers subtract setOf(\"three\", \"four\"))\n    println(numbers subtract setOf(\"four\", \"three\")) // same output\n//sampleEnd\n}\n"}, {"type": "p", "text": "Note that set operations are supported by List as well.\nHowever, the result of set operations on lists is still a Set, so all the duplicate elements are removed."}, {"type": "code", "text": "List"}, {"type": "code", "text": "Set"}]