[{"type": "a", "text": "\n\nEdit Page\n"}, {"type": "i", "text": ""}, {"type": "span", "text": "Edit Page"}, {"type": "h2", "text": "Debugging"}, {"type": "p", "text": "Currently the Kotlin/Native compiler produces debug info compatible with the DWARF 2 specification, so modern debugger tools can\nperform the following operations:"}, {"type": "ul", "text": "\nbreakpoints\nstepping\ninspection of type information\nvariable inspection\n"}, {"type": "li", "text": "breakpoints"}, {"type": "li", "text": "stepping"}, {"type": "li", "text": "inspection of type information"}, {"type": "li", "text": "variable inspection"}, {"type": "h3", "text": "Producing binaries with debug info with Kotlin/Native compiler"}, {"type": "p", "text": "To produce binaries with the Kotlin/Native compiler it's sufficient to use the -g option on the command line.\nExample:"}, {"type": "code", "text": "-g"}, {"type": "br", "text": ""}, {"type": "em", "text": "Example:"}, {"type": "div", "text": "\n0:b-debugger-fixes:minamoto@unit-703(0)# cat - > hello.kt\nfun main(args: Array<String>) {\n  println(\"Hello world\")\n  println(\"I need your clothes, your boots and your motocycle\")\n}\n0:b-debugger-fixes:minamoto@unit-703(0)# dist/bin/konanc -g hello.kt -o terminator\nKtFile: hello.kt\n0:b-debugger-fixes:minamoto@unit-703(0)# lldb terminator.kexe\n(lldb) target create \"terminator.kexe\"\nCurrent executable set to 'terminator.kexe' (x86_64).\n(lldb) b kfun:main(kotlin.Array<kotlin.String>)\nBreakpoint 1: where = terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) + 4 at hello.kt:2, address = 0x00000001000012e4\n(lldb) r\nProcess 28473 launched: '/Users/minamoto/ws/.git-trees/debugger-fixes/terminator.kexe' (x86_64)\nProcess 28473 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x00000001000012e4 terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) at hello.kt:2\n   1    fun main(args: Array<String>) {\n-> 2      println(\"Hello world\")\n   3      println(\"I need your clothes, your boots and your motocycle\")\n   4    }\n(lldb) n\nHello world\nProcess 28473 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = step over\n    frame #0: 0x00000001000012f0 terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) at hello.kt:3\n   1    fun main(args: Array<String>) {\n   2      println(\"Hello world\")\n-> 3      println(\"I need your clothes, your boots and your motocycle\")\n   4    }\n(lldb)\n\n"}, {"type": "pre", "text": "0:b-debugger-fixes:minamoto@unit-703(0)# cat - > hello.kt\nfun main(args: Array<String>) {\n  println(\"Hello world\")\n  println(\"I need your clothes, your boots and your motocycle\")\n}\n0:b-debugger-fixes:minamoto@unit-703(0)# dist/bin/konanc -g hello.kt -o terminator\nKtFile: hello.kt\n0:b-debugger-fixes:minamoto@unit-703(0)# lldb terminator.kexe\n(lldb) target create \"terminator.kexe\"\nCurrent executable set to 'terminator.kexe' (x86_64).\n(lldb) b kfun:main(kotlin.Array<kotlin.String>)\nBreakpoint 1: where = terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) + 4 at hello.kt:2, address = 0x00000001000012e4\n(lldb) r\nProcess 28473 launched: '/Users/minamoto/ws/.git-trees/debugger-fixes/terminator.kexe' (x86_64)\nProcess 28473 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x00000001000012e4 terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) at hello.kt:2\n   1    fun main(args: Array<String>) {\n-> 2      println(\"Hello world\")\n   3      println(\"I need your clothes, your boots and your motocycle\")\n   4    }\n(lldb) n\nHello world\nProcess 28473 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = step over\n    frame #0: 0x00000001000012f0 terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) at hello.kt:3\n   1    fun main(args: Array<String>) {\n   2      println(\"Hello world\")\n-> 3      println(\"I need your clothes, your boots and your motocycle\")\n   4    }\n(lldb)\n"}, {"type": "code", "text": "0:b-debugger-fixes:minamoto@unit-703(0)# cat - > hello.kt\nfun main(args: Array<String>) {\n  println(\"Hello world\")\n  println(\"I need your clothes, your boots and your motocycle\")\n}\n0:b-debugger-fixes:minamoto@unit-703(0)# dist/bin/konanc -g hello.kt -o terminator\nKtFile: hello.kt\n0:b-debugger-fixes:minamoto@unit-703(0)# lldb terminator.kexe\n(lldb) target create \"terminator.kexe\"\nCurrent executable set to 'terminator.kexe' (x86_64).\n(lldb) b kfun:main(kotlin.Array<kotlin.String>)\nBreakpoint 1: where = terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) + 4 at hello.kt:2, address = 0x00000001000012e4\n(lldb) r\nProcess 28473 launched: '/Users/minamoto/ws/.git-trees/debugger-fixes/terminator.kexe' (x86_64)\nProcess 28473 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x00000001000012e4 terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) at hello.kt:2\n   1    fun main(args: Array<String>) {\n-> 2      println(\"Hello world\")\n   3      println(\"I need your clothes, your boots and your motocycle\")\n   4    }\n(lldb) n\nHello world\nProcess 28473 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = step over\n    frame #0: 0x00000001000012f0 terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) at hello.kt:3\n   1    fun main(args: Array<String>) {\n   2      println(\"Hello world\")\n-> 3      println(\"I need your clothes, your boots and your motocycle\")\n   4    }\n(lldb)\n"}, {"type": "h3", "text": "Breakpoints"}, {"type": "p", "text": "Modern debuggers provide several ways to set a breakpoint, see below for a tool-by-tool breakdown:"}, {"type": "h4", "text": "lldb"}, {"type": "ul", "text": "\nby name\n"}, {"type": "li", "text": "by name"}, {"type": "div", "text": "\n(lldb) b -n kfun:main(kotlin.Array<kotlin.String>)\nBreakpoint 4: where = terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) + 4 at hello.kt:2, address = 0x00000001000012e4\n\n"}, {"type": "pre", "text": "(lldb) b -n kfun:main(kotlin.Array<kotlin.String>)\nBreakpoint 4: where = terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) + 4 at hello.kt:2, address = 0x00000001000012e4\n"}, {"type": "code", "text": "(lldb) b -n kfun:main(kotlin.Array<kotlin.String>)\nBreakpoint 4: where = terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) + 4 at hello.kt:2, address = 0x00000001000012e4\n"}, {"type": "p", "text": "-n is optional, this flag is applied by default"}, {"type": "em", "text": "-n is optional, this flag is applied by default"}, {"type": "code", "text": "-n"}, {"type": "ul", "text": "\nby location (filename, line number)\n"}, {"type": "li", "text": "by location (filename, line number)"}, {"type": "div", "text": "\n(lldb) b -f hello.kt -l 1\nBreakpoint 1: where = terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) + 4 at hello.kt:2, address = 0x00000001000012e4\n\n"}, {"type": "pre", "text": "(lldb) b -f hello.kt -l 1\nBreakpoint 1: where = terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) + 4 at hello.kt:2, address = 0x00000001000012e4\n"}, {"type": "code", "text": "(lldb) b -f hello.kt -l 1\nBreakpoint 1: where = terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) + 4 at hello.kt:2, address = 0x00000001000012e4\n"}, {"type": "ul", "text": "\nby address\n"}, {"type": "li", "text": "by address"}, {"type": "div", "text": "\n(lldb) b -a 0x00000001000012e4\nBreakpoint 2: address = 0x00000001000012e4\n\n"}, {"type": "pre", "text": "(lldb) b -a 0x00000001000012e4\nBreakpoint 2: address = 0x00000001000012e4\n"}, {"type": "code", "text": "(lldb) b -a 0x00000001000012e4\nBreakpoint 2: address = 0x00000001000012e4\n"}, {"type": "ul", "text": "\nby regex, you might find it useful for debugging generated artifacts, like lambda etc. (where used # symbol in name).\n"}, {"type": "li", "text": "by regex, you might find it useful for debugging generated artifacts, like lambda etc. (where used # symbol in name)."}, {"type": "code", "text": "#"}, {"type": "div", "text": "\n3: regex = 'main\\(', locations = 1\n  3.1: where = terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) + 4 at hello.kt:2, address = terminator.kexe[0x00000001000012e4], unresolved, hit count = 0\n\n"}, {"type": "pre", "text": "3: regex = 'main\\(', locations = 1\n  3.1: where = terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) + 4 at hello.kt:2, address = terminator.kexe[0x00000001000012e4], unresolved, hit count = 0\n"}, {"type": "code", "text": "3: regex = 'main\\(', locations = 1\n  3.1: where = terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) + 4 at hello.kt:2, address = terminator.kexe[0x00000001000012e4], unresolved, hit count = 0\n"}, {"type": "h4", "text": "gdb"}, {"type": "ul", "text": "\nby regex\n"}, {"type": "li", "text": "by regex"}, {"type": "div", "text": "\n(gdb) rbreak main(\nBreakpoint 1 at 0x1000109b4\nstruct ktype:kotlin.Unit &kfun:main(kotlin.Array<kotlin.String>);\n\n"}, {"type": "pre", "text": "(gdb) rbreak main(\nBreakpoint 1 at 0x1000109b4\nstruct ktype:kotlin.Unit &kfun:main(kotlin.Array<kotlin.String>);\n"}, {"type": "code", "text": "(gdb) rbreak main(\nBreakpoint 1 at 0x1000109b4\nstruct ktype:kotlin.Unit &kfun:main(kotlin.Array<kotlin.String>);\n"}, {"type": "ul", "text": "\nby name unusable, because : is a separator for the breakpoint by location\n"}, {"type": "li", "text": "by name unusable, because : is a separator for the breakpoint by location"}, {"type": "strong", "text": "unusable"}, {"type": "code", "text": ":"}, {"type": "div", "text": "\n(gdb) b kfun:main(kotlin.Array<kotlin.String>)\nNo source file named kfun.\nMake breakpoint pending on future shared library load? (y or [n]) y\nBreakpoint 1 (kfun:main(kotlin.Array<kotlin.String>)) pending\n\n"}, {"type": "pre", "text": "(gdb) b kfun:main(kotlin.Array<kotlin.String>)\nNo source file named kfun.\nMake breakpoint pending on future shared library load? (y or [n]) y\nBreakpoint 1 (kfun:main(kotlin.Array<kotlin.String>)) pending\n"}, {"type": "code", "text": "(gdb) b kfun:main(kotlin.Array<kotlin.String>)\nNo source file named kfun.\nMake breakpoint pending on future shared library load? (y or [n]) y\nBreakpoint 1 (kfun:main(kotlin.Array<kotlin.String>)) pending\n"}, {"type": "ul", "text": "\nby location\n"}, {"type": "li", "text": "by location"}, {"type": "div", "text": "\n(gdb) b hello.kt:1\nBreakpoint 2 at 0x100001704: file /Users/minamoto/ws/.git-trees/hello.kt, line 1.\n\n"}, {"type": "pre", "text": "(gdb) b hello.kt:1\nBreakpoint 2 at 0x100001704: file /Users/minamoto/ws/.git-trees/hello.kt, line 1.\n"}, {"type": "code", "text": "(gdb) b hello.kt:1\nBreakpoint 2 at 0x100001704: file /Users/minamoto/ws/.git-trees/hello.kt, line 1.\n"}, {"type": "ul", "text": "\nby address\n"}, {"type": "li", "text": "by address"}, {"type": "div", "text": "\n(gdb) b *0x100001704\nNote: breakpoint 2 also set at pc 0x100001704.\nBreakpoint 3 at 0x100001704: file /Users/minamoto/ws/.git-trees/hello.kt, line 2.\n\n"}, {"type": "pre", "text": "(gdb) b *0x100001704\nNote: breakpoint 2 also set at pc 0x100001704.\nBreakpoint 3 at 0x100001704: file /Users/minamoto/ws/.git-trees/hello.kt, line 2.\n"}, {"type": "code", "text": "(gdb) b *0x100001704\nNote: breakpoint 2 also set at pc 0x100001704.\nBreakpoint 3 at 0x100001704: file /Users/minamoto/ws/.git-trees/hello.kt, line 2.\n"}, {"type": "h3", "text": "Stepping"}, {"type": "p", "text": "Stepping functions works mostly the same way as for C/C++ programs"}, {"type": "h3", "text": "Variable inspection"}, {"type": "p", "text": "Variable inspections for var variables works out of the box for primitive types.\nFor non-primitive types there are custom pretty printers for lldb in\nkonan_lldb.py:"}, {"type": "code", "text": "konan_lldb.py"}, {"type": "div", "text": "\n\u03bb cat main.kt | nl\n     1  fun main(args: Array<String>) {\n     2      var x = 1\n     3      var y = 2\n     4      var p = Point(x, y)\n     5      println(\"p = $p\")\n     6  }\n       \n     7  data class Point(val x: Int, val y: Int)\n\n\u03bb lldb ./program.kexe -o 'b main.kt:5' -o\n(lldb) target create \"./program.kexe\"\nCurrent executable set to './program.kexe' (x86_64).\n(lldb) b main.kt:5\nBreakpoint 1: where = program.kexe`kfun:main(kotlin.Array<kotlin.String>) + 289 at main.kt:5, address = 0x000000000040af11\n(lldb) r\nProcess 4985 stopped\n* thread #1, name = 'program.kexe', stop reason = breakpoint 1.1\n    frame #0: program.kexe`kfun:main(kotlin.Array<kotlin.String>) at main.kt:5\n   2        var x = 1\n   3        var y = 2\n   4        var p = Point(x, y)\n-> 5        println(\"p = $p\")\n   6    }\n   7   \n   8    data class Point(val x: Int, val y: Int)\n\nProcess 4985 launched: './program.kexe' (x86_64)\n(lldb) fr var\n(int) x = 1\n(int) y = 2\n(ObjHeader *) p = 0x00000000007643d8\n(lldb) command script import dist/tools/konan_lldb.py\n(lldb) fr var\n(int) x = 1\n(int) y = 2\n(ObjHeader *) p = Point(x=1, y=2)\n(lldb) p p\n(ObjHeader *) $2 = Point(x=1, y=2)\n(lldb) \n\n"}, {"type": "pre", "text": "\u03bb cat main.kt | nl\n     1  fun main(args: Array<String>) {\n     2      var x = 1\n     3      var y = 2\n     4      var p = Point(x, y)\n     5      println(\"p = $p\")\n     6  }\n       \n     7  data class Point(val x: Int, val y: Int)\n\n\u03bb lldb ./program.kexe -o 'b main.kt:5' -o\n(lldb) target create \"./program.kexe\"\nCurrent executable set to './program.kexe' (x86_64).\n(lldb) b main.kt:5\nBreakpoint 1: where = program.kexe`kfun:main(kotlin.Array<kotlin.String>) + 289 at main.kt:5, address = 0x000000000040af11\n(lldb) r\nProcess 4985 stopped\n* thread #1, name = 'program.kexe', stop reason = breakpoint 1.1\n    frame #0: program.kexe`kfun:main(kotlin.Array<kotlin.String>) at main.kt:5\n   2        var x = 1\n   3        var y = 2\n   4        var p = Point(x, y)\n-> 5        println(\"p = $p\")\n   6    }\n   7   \n   8    data class Point(val x: Int, val y: Int)\n\nProcess 4985 launched: './program.kexe' (x86_64)\n(lldb) fr var\n(int) x = 1\n(int) y = 2\n(ObjHeader *) p = 0x00000000007643d8\n(lldb) command script import dist/tools/konan_lldb.py\n(lldb) fr var\n(int) x = 1\n(int) y = 2\n(ObjHeader *) p = Point(x=1, y=2)\n(lldb) p p\n(ObjHeader *) $2 = Point(x=1, y=2)\n(lldb) \n"}, {"type": "code", "text": "\u03bb cat main.kt | nl\n     1  fun main(args: Array<String>) {\n     2      var x = 1\n     3      var y = 2\n     4      var p = Point(x, y)\n     5      println(\"p = $p\")\n     6  }\n       \n     7  data class Point(val x: Int, val y: Int)\n\n\u03bb lldb ./program.kexe -o 'b main.kt:5' -o\n(lldb) target create \"./program.kexe\"\nCurrent executable set to './program.kexe' (x86_64).\n(lldb) b main.kt:5\nBreakpoint 1: where = program.kexe`kfun:main(kotlin.Array<kotlin.String>) + 289 at main.kt:5, address = 0x000000000040af11\n(lldb) r\nProcess 4985 stopped\n* thread #1, name = 'program.kexe', stop reason = breakpoint 1.1\n    frame #0: program.kexe`kfun:main(kotlin.Array<kotlin.String>) at main.kt:5\n   2        var x = 1\n   3        var y = 2\n   4        var p = Point(x, y)\n-> 5        println(\"p = $p\")\n   6    }\n   7   \n   8    data class Point(val x: Int, val y: Int)\n\nProcess 4985 launched: './program.kexe' (x86_64)\n(lldb) fr var\n(int) x = 1\n(int) y = 2\n(ObjHeader *) p = 0x00000000007643d8\n(lldb) command script import dist/tools/konan_lldb.py\n(lldb) fr var\n(int) x = 1\n(int) y = 2\n(ObjHeader *) p = Point(x=1, y=2)\n(lldb) p p\n(ObjHeader *) $2 = Point(x=1, y=2)\n(lldb) \n"}, {"type": "p", "text": "Getting representation of the object variable (var) could also be done using the\nbuilt-in runtime function Konan_DebugPrint (this approach also works for gdb,\nusing a module of command syntax):"}, {"type": "code", "text": "Konan_DebugPrint"}, {"type": "div", "text": "\n0:b-debugger-fixes:minamoto@unit-703(0)# cat ../debugger-plugin/1.kt | nl -p\n     1  fun foo(a:String, b:Int) = a + b\n     2  fun one() = 1\n     3  fun main(arg:Array<String>) {\n     4    var a_variable = foo(\"(a_variable) one is \", 1)\n     5    var b_variable = foo(\"(b_variable) two is \", 2)\n     6    var c_variable = foo(\"(c_variable) two is \", 3)\n     7    var d_variable = foo(\"(d_variable) two is \", 4)\n     8    println(a_variable)\n     9    println(b_variable)\n    10    println(c_variable)\n    11    println(d_variable)\n    12  }\n0:b-debugger-fixes:minamoto@unit-703(0)# lldb ./program.kexe -o 'b -f 1.kt -l 9' -o r\n(lldb) target create \"./program.kexe\"\nCurrent executable set to './program.kexe' (x86_64).\n(lldb) b -f 1.kt -l 9\nBreakpoint 1: where = program.kexe`kfun:main(kotlin.Array<kotlin.String>) + 463 at 1.kt:9, address = 0x0000000100000dbf\n(lldb) r\n(a_variable) one is 1\nProcess 80496 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x0000000100000dbf program.kexe`kfun:main(kotlin.Array<kotlin.String>) at 1.kt:9\n   6      var c_variable = foo(\"(c_variable) two is \", 3)\n   7      var d_variable = foo(\"(d_variable) two is \", 4)\n   8      println(a_variable)\n-> 9      println(b_variable)\n   10     println(c_variable)\n   11     println(d_variable)\n   12   }\n\nProcess 80496 launched: './program.kexe' (x86_64)\n(lldb) expression -- Konan_DebugPrint(a_variable)\n(a_variable) one is 1(KInt) $0 = 0\n(lldb)\n\n\n"}, {"type": "pre", "text": "0:b-debugger-fixes:minamoto@unit-703(0)# cat ../debugger-plugin/1.kt | nl -p\n     1  fun foo(a:String, b:Int) = a + b\n     2  fun one() = 1\n     3  fun main(arg:Array<String>) {\n     4    var a_variable = foo(\"(a_variable) one is \", 1)\n     5    var b_variable = foo(\"(b_variable) two is \", 2)\n     6    var c_variable = foo(\"(c_variable) two is \", 3)\n     7    var d_variable = foo(\"(d_variable) two is \", 4)\n     8    println(a_variable)\n     9    println(b_variable)\n    10    println(c_variable)\n    11    println(d_variable)\n    12  }\n0:b-debugger-fixes:minamoto@unit-703(0)# lldb ./program.kexe -o 'b -f 1.kt -l 9' -o r\n(lldb) target create \"./program.kexe\"\nCurrent executable set to './program.kexe' (x86_64).\n(lldb) b -f 1.kt -l 9\nBreakpoint 1: where = program.kexe`kfun:main(kotlin.Array<kotlin.String>) + 463 at 1.kt:9, address = 0x0000000100000dbf\n(lldb) r\n(a_variable) one is 1\nProcess 80496 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x0000000100000dbf program.kexe`kfun:main(kotlin.Array<kotlin.String>) at 1.kt:9\n   6      var c_variable = foo(\"(c_variable) two is \", 3)\n   7      var d_variable = foo(\"(d_variable) two is \", 4)\n   8      println(a_variable)\n-> 9      println(b_variable)\n   10     println(c_variable)\n   11     println(d_variable)\n   12   }\n\nProcess 80496 launched: './program.kexe' (x86_64)\n(lldb) expression -- Konan_DebugPrint(a_variable)\n(a_variable) one is 1(KInt) $0 = 0\n(lldb)\n\n"}, {"type": "code", "text": "0:b-debugger-fixes:minamoto@unit-703(0)# cat ../debugger-plugin/1.kt | nl -p\n     1  fun foo(a:String, b:Int) = a + b\n     2  fun one() = 1\n     3  fun main(arg:Array<String>) {\n     4    var a_variable = foo(\"(a_variable) one is \", 1)\n     5    var b_variable = foo(\"(b_variable) two is \", 2)\n     6    var c_variable = foo(\"(c_variable) two is \", 3)\n     7    var d_variable = foo(\"(d_variable) two is \", 4)\n     8    println(a_variable)\n     9    println(b_variable)\n    10    println(c_variable)\n    11    println(d_variable)\n    12  }\n0:b-debugger-fixes:minamoto@unit-703(0)# lldb ./program.kexe -o 'b -f 1.kt -l 9' -o r\n(lldb) target create \"./program.kexe\"\nCurrent executable set to './program.kexe' (x86_64).\n(lldb) b -f 1.kt -l 9\nBreakpoint 1: where = program.kexe`kfun:main(kotlin.Array<kotlin.String>) + 463 at 1.kt:9, address = 0x0000000100000dbf\n(lldb) r\n(a_variable) one is 1\nProcess 80496 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x0000000100000dbf program.kexe`kfun:main(kotlin.Array<kotlin.String>) at 1.kt:9\n   6      var c_variable = foo(\"(c_variable) two is \", 3)\n   7      var d_variable = foo(\"(d_variable) two is \", 4)\n   8      println(a_variable)\n-> 9      println(b_variable)\n   10     println(c_variable)\n   11     println(d_variable)\n   12   }\n\nProcess 80496 launched: './program.kexe' (x86_64)\n(lldb) expression -- Konan_DebugPrint(a_variable)\n(a_variable) one is 1(KInt) $0 = 0\n(lldb)\n\n"}, {"type": "h3", "text": "Known issues"}, {"type": "ul", "text": "\nperformance of Python bindings.\n"}, {"type": "li", "text": "performance of Python bindings."}, {"type": "p", "text": "Note: Supporting the DWARF 2 specification means that the debugger tool recognizes Kotlin as C89, because before the DWARF 5 specification, there is no identifier for the Kotlin language type in specification."}, {"type": "em", "text": "Note:"}]